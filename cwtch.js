//
// uci chess engine with nnue eval
//
// usage: node cwtch [uci commands]
// example: node cwtch u n "position startpos" b "go depth 5" bench
//

(function() {

  //{{{  constants
  
  const IMAP = Array(16);
  
  const MAX_PLY = 128;
  const MATE    = 30000;
  
  const WHITE = 0x0;
  const BLACK = 0x8;
  
  const PIECE_MASK  = 0x7;
  const COLOUR_MASK = 0x8;
  
  const PAWN   = 1;
  const KNIGHT = 2;
  const BISHOP = 3;
  const ROOK   = 4;
  const QUEEN  = 5;
  const KING   = 6;
  const EDGE   = 7;
  
  const W_PAWN   = PAWN;
  const W_KNIGHT = KNIGHT;
  const W_BISHOP = BISHOP;
  const W_ROOK   = ROOK;
  const W_QUEEN  = QUEEN;
  const W_KING   = KING;
  
  const B_PAWN   = PAWN   | BLACK;
  const B_KNIGHT = KNIGHT | BLACK;
  const B_BISHOP = BISHOP | BLACK;
  const B_ROOK   = ROOK   | BLACK;
  const B_QUEEN  = QUEEN  | BLACK;
  const B_KING   = KING   | BLACK;
  
  const LCOUNT = 0;
  const LKING  = 1;
  
  const PPHASE = 0;
  const NPHASE = 1;
  const BPHASE = 1;
  const RPHASE = 2;
  const QPHASE = 4;
  const KPHASE = 0;
  const TPHASE = PPHASE*16 + NPHASE*4 + BPHASE*4 + RPHASE*4 + QPHASE*2 + KPHASE*2;
  const VPHASE = [PPHASE,NPHASE,BPHASE,RPHASE,QPHASE,KPHASE];
  
  const TT_SIZE  = 1 << 20;
  const TT_MASK  = TT_SIZE - 1;
  const TT_EXACT = 0x01;
  const TT_ALPHA = 0x02;
  const TT_BETA  = 0x04;
  
  const ADJACENT = [1,1,0,0,0,0,0,0,0,0,0,1,1,1];
  
  //
  // E == EMPTY, X = OFF BOARD, - == CANNOT HAPPEN
  //
  //                  0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15
  //                  E  W  W  W  W  W  W  X  -  B  B  B  B  B  B  -
  //                  E  P  N  B  R  Q  K  X  -  P  N  B  R  Q  K  -
  //
  const IS_O       = [0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0];
  const IS_E       = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  const IS_OE      = [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0];
  
  const IS_P       = [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0];
  const IS_N       = [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0];
  const IS_NBRQ    = [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0];
  const IS_NBRQKE  = [1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0];
  const IS_RQKE    = [1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0];
  const IS_Q       = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0];
  const IS_QKE     = [1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0];
  const IS_K       = [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0];
  const IS_KN      = [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0];
  const IS_SLIDER  = [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0];
  
  const IS_W       = [0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  const IS_WE      = [1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  const IS_WP      = [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  const IS_WN      = [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  const IS_WNBRQ   = [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  const IS_WPNBRQ  = [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  const IS_WPNBRQE = [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  const IS_WB      = [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  const IS_WR      = [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  const IS_WBQ     = [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  const IS_WRQ     = [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  const IS_WQ      = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  const IS_WK      = [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  
  const IS_B       = [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0];
  const IS_BE      = [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0];
  const IS_BP      = [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0];
  const IS_BN      = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0];
  const IS_BNBRQ   = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0];
  const IS_BPNBRQ  = [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0];
  const IS_BPNBRQE = [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0];
  const IS_BB      = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0];
  const IS_BR      = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0];
  const IS_BBQ     = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0];
  const IS_BRQ     = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0];
  const IS_BQ      = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0];
  const IS_BK      = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0];
  
  const OBJ_CHAR = ['.','P','N','B','R','Q','K','x','y','p','n','b','r','q','k','z'];
  
  const A1 = 110;
  const B1 = 111;
  const C1 = 112;
  const D1 = 113;
  const E1 = 114;
  const F1 = 115;
  const G1 = 116;
  const H1 = 117;
  const B2 = 99;
  const C2 = 100;
  const G2 = 104;
  const H2 = 105;
  const B7 = 39;
  const C7 = 40;
  const G7 = 44;
  const H7 = 45;
  const A8 = 26;
  const B8 = 27;
  const C8 = 28;
  const D8 = 29;
  const E8 = 30;
  const F8 = 31;
  const G8 = 32;
  const H8 = 33;
  
  const B88 = [26, 27, 28, 29, 30, 31, 32, 33,
               38, 39, 40, 41, 42, 43, 44, 45,
               50, 51, 52, 53, 54, 55, 56, 57,
               62, 63, 64, 65, 66, 67, 68, 69,
               74, 75, 76, 77, 78, 79, 80, 81,
               86, 87, 88, 89, 90, 91, 92, 93,
               98, 99, 100,101,102,103,104,105,
               110,111,112,113,114,115,116,117];
  
  const B144 = [0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0, 0,
                0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0, 0,
                0, 0, 0,  1,  2,  3,  4,  5,  6,  7,  0, 0,
                0, 0, 8,  9,  10, 11, 12, 13, 14, 15, 0, 0,
                0, 0, 16, 17, 18, 19, 20, 21, 22, 23, 0, 0,
                0, 0, 24, 25, 26, 27, 28, 29, 30, 31, 0, 0,
                0, 0, 32, 33, 34, 35, 36, 37, 38, 39, 0, 0,
                0, 0, 40, 41, 42, 43, 44, 45, 46, 47, 0, 0,
                0, 0, 48, 49, 50, 51, 52, 53, 54, 55, 0, 0,
                0, 0, 56, 57, 58, 59, 60, 61, 62, 63, 0, 0,
                0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0, 0,
                0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0, 0];
  
  
  const COORDS = ['??', '??', '??', '??', '??', '??', '??', '??', '??', '??', '??', '??',
                  '??', '??', '??', '??', '??', '??', '??', '??', '??', '??', '??', '??',
                  '??', '??', 'a8', 'b8', 'c8', 'd8', 'e8', 'f8', 'g8', 'h8', '??', '??',
                  '??', '??', 'a7', 'b7', 'c7', 'd7', 'e7', 'f7', 'g7', 'h7', '??', '??',
                  '??', '??', 'a6', 'b6', 'c6', 'd6', 'e6', 'f6', 'g6', 'h6', '??', '??',
                  '??', '??', 'a5', 'b5', 'c5', 'd5', 'e5', 'f5', 'g5', 'h5', '??', '??',
                  '??', '??', 'a4', 'b4', 'c4', 'd4', 'e4', 'f4', 'g4', 'h4', '??', '??',
                  '??', '??', 'a3', 'b3', 'c3', 'd3', 'e3', 'f3', 'g3', 'h3', '??', '??',
                  '??', '??', 'a2', 'b2', 'c2', 'd2', 'e2', 'f2', 'g2', 'h2', '??', '??',
                  '??', '??', 'a1', 'b1', 'c1', 'd1', 'e1', 'f1', 'g1', 'h1', '??', '??',
                  '??', '??', '??', '??', '??', '??', '??', '??', '??', '??', '??', '??',
                  '??', '??', '??', '??', '??', '??', '??', '??', '??', '??', '??', '??'];
  
  const CENTRE = [0, 0, 0, 0,  0,  0,  0,  0,  0,  0, 0, 0,
                  0, 0, 0, 0,  0,  0,  0,  0,  0,  0, 0, 0,
                  0, 0, 1, 2,  3,  4,  4,  3,  2,  1, 0, 0,
                  0, 0, 2, 6,  8,  10, 10, 8,  6,  2, 0, 0,
                  0, 0, 3, 8,  15, 18, 18, 15, 8,  3, 0, 0,
                  0, 0, 4, 10, 18, 28, 28, 18, 10, 4, 0, 0,
                  0, 0, 4, 10, 18, 28, 28, 19, 10, 4, 0, 0,
                  0, 0, 3, 8,  15, 18, 18, 15, 8,  3, 0, 0,
                  0, 0, 2, 6,  8,  10, 10, 8,  6,  2, 0, 0,
                  0, 0, 1, 2,  3,  4,  4,  3,  2,  1, 0, 0,
                  0, 0, 0, 0,  0,  0,  0,  0,  0,  0, 0, 0,
                  0, 0, 0, 0,  0,  0,  0,  0,  0,  0, 0, 0];
  
  const RANK = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0,
                0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0,
                0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0,
                0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0,
                0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0,
                0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0,
                0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0,
                0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  
  const PMOVE_W = [0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0, 0,
                   0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0, 0,
                   0, 0, 29, 29, 29, 29, 29, 29, 29, 29, 0, 0,
                   0, 0, 22, 22, 22, 22, 22, 22, 22, 22, 0, 0,
                   0, 0, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0,
                   0, 0, 11, 11, 11, 11, 11, 11, 11, 11, 0, 0,
                   0, 0, 7,  7,  7,  7,  7,  7,  7,  7,  0, 0,
                   0, 0, 4,  4,  4,  4,  4,  4,  4,  4,  0, 0,
                   0, 0, 2,  2,  2,  2,  2,  2,  2,  2,  0, 0,
                   0, 0, 1,  1,  1,  1,  1,  1,  1,  1,  0, 0,
                   0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0, 0,
                   0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0, 0];
  
  const PMOVE_B = [0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0, 0,
                   0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0, 0,
                   0, 0, 1,  1,  1,  1,  1,  1,  1,  1,  0, 0,
                   0, 0, 2,  2,  2,  2,  2,  2,  2,  2,  0, 0,
                   0, 0, 4,  4,  4,  4,  4,  4,  4,  4,  0, 0,
                   0, 0, 7,  7,  7,  7,  7,  7,  7,  7,  0, 0,
                   0, 0, 11, 11, 11, 11, 11, 11, 11, 11, 0, 0,
                   0, 0, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0,
                   0, 0, 22, 22, 22, 22, 22, 22, 22, 22, 0, 0,
                   0, 0, 29, 29, 29, 29, 29, 29, 29, 29, 0, 0,
                   0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0, 0,
                   0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0, 0];
  
  const OBJMOVE = [null, PMOVE_W, CENTRE, CENTRE, CENTRE, CENTRE, CENTRE, null, null,
                         PMOVE_B, CENTRE, CENTRE, CENTRE, CENTRE, CENTRE];
  
  const FILE = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0,
                0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0,
                0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0,
                0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0,
                0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0,
                0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0,
                0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0,
                0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  
  const MAX_MOVES = 256;
  
  const ALL_MOVES        = 0;
  const NOISY_MOVES_ONLY = 1;
  
  const MOVE_TO_BITS     = 0;
  const MOVE_FR_BITS     = 8;
  const MOVE_TOOBJ_BITS  = 16;
  const MOVE_FROBJ_BITS  = 20;
  const MOVE_PROMAS_BITS = 29;
  
  const MOVE_TO_MASK       = 0x000000FF;
  const MOVE_FR_MASK       = 0x0000FF00;
  const MOVE_TOOBJ_MASK    = 0x000F0000;
  const MOVE_FROBJ_MASK    = 0x00F00000;
  const MOVE_SPARE_MASK    = 0x01000000;
  const MOVE_EPTAKE_MASK   = 0x02000000;
  const MOVE_EPMAKE_MASK   = 0x04000000;
  const MOVE_CASTLE_MASK   = 0x08000000;
  const MOVE_PROMOTE_MASK  = 0x10000000;
  const MOVE_PROMAS_MASK   = 0x60000000;  // NBRQ.
  const MOVE_LEGAL_MASK    = 0x80000000;
  
  const MOVE_CLEAN_MASK    = ~MOVE_LEGAL_MASK & 0xFFFFFFFF;
  const MOVE_NOISY_MASK    = MOVE_TOOBJ_MASK | MOVE_EPTAKE_MASK;
  const MOVE_IKKY_MASK     = MOVE_CASTLE_MASK | MOVE_PROMOTE_MASK | MOVE_EPTAKE_MASK | MOVE_EPMAKE_MASK;
  const MOVE_REPRESET_MASK = MOVE_TOOBJ_MASK | MOVE_CASTLE_MASK | MOVE_PROMOTE_MASK | MOVE_EPTAKE_MASK;
  
  const MOVE_E1G1 = MOVE_CASTLE_MASK | (W_KING << MOVE_FROBJ_BITS) | (E1 << MOVE_FR_BITS) | G1;
  const MOVE_E1C1 = MOVE_CASTLE_MASK | (W_KING << MOVE_FROBJ_BITS) | (E1 << MOVE_FR_BITS) | C1;
  const MOVE_E8G8 = MOVE_CASTLE_MASK | (B_KING << MOVE_FROBJ_BITS) | (E8 << MOVE_FR_BITS) | G8;
  const MOVE_E8C8 = MOVE_CASTLE_MASK | (B_KING << MOVE_FROBJ_BITS) | (E8 << MOVE_FR_BITS) | C8;
  
  const QPRO = (QUEEN-2)  << MOVE_PROMAS_BITS | MOVE_PROMOTE_MASK;
  const RPRO = (ROOK-2)   << MOVE_PROMAS_BITS | MOVE_PROMOTE_MASK;
  const BPRO = (BISHOP-2) << MOVE_PROMAS_BITS | MOVE_PROMOTE_MASK;
  const NPRO = (KNIGHT-2) << MOVE_PROMAS_BITS | MOVE_PROMOTE_MASK;
  
  const WHITE_RIGHTS_KING  = 0x00000001;
  const WHITE_RIGHTS_QUEEN = 0x00000002;
  const BLACK_RIGHTS_KING  = 0x00000004;
  const BLACK_RIGHTS_QUEEN = 0x00000008;
  const WHITE_RIGHTS       = WHITE_RIGHTS_QUEEN | WHITE_RIGHTS_KING;
  const BLACK_RIGHTS       = BLACK_RIGHTS_QUEEN | BLACK_RIGHTS_KING;
  
  const MASK_RIGHTS = [15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
                       15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
                       15, 15, ~8, 15, 15, 15, ~12,15, 15, ~4, 15, 15,
                       15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
                       15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
                       15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
                       15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
                       15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
                       15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
                       15, 15, ~2, 15, 15, 15, ~3, 15, 15, ~1, 15, 15,
                       15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
                       15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15];
  
  const W_OFFSET_ORTH  = -12;
  const W_OFFSET_DIAG1 = -13;
  const W_OFFSET_DIAG2 = -11;
  
  const B_OFFSET_ORTH  = 12;
  const B_OFFSET_DIAG1 = 13;
  const B_OFFSET_DIAG2 = 11;
  
  const KNIGHT_OFFSETS  = [25,-25,23,-23,14,-14,10,-10];
  const BISHOP_OFFSETS  = [11,-11,13,-13];
  const ROOK_OFFSETS    = [1,-1,12,-12];
  const QUEEN_OFFSETS   = [11,-11,13,-13,1,-1,12,-12];
  const KING_OFFSETS    = [11,-11,13,-13,1,-1,12,-12];
  
  const SLIDER_OFFSETS = [0, 0, 0, BISHOP_OFFSETS, ROOK_OFFSETS, QUEEN_OFFSETS];
  
  const WB_CAN_CAPTURE  = [IS_BPNBRQ,      IS_WPNBRQ];
  const WB_OUR_PIECE    = [IS_W,           IS_B];
  const WB_OFFSET_ORTH  = [W_OFFSET_ORTH,  B_OFFSET_ORTH];
  const WB_OFFSET_DIAG1 = [W_OFFSET_DIAG1, B_OFFSET_DIAG1];
  const WB_OFFSET_DIAG2 = [W_OFFSET_DIAG2, B_OFFSET_DIAG2];
  const WB_HOME_RANK    = [2,              7];
  const WB_PROMOTE_RANK = [7,              2];
  const WB_EP_RANK      = [5,              4];
  const WB_RQ           = [IS_WRQ,         IS_BRQ];
  const WB_BQ           = [IS_WBQ,         IS_BBQ];
  const WB_PAWN         = [W_PAWN,         B_PAWN];
  
  //{{{  ALIGNED
  
  const ALIGNED = [
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,1,1,1,1,1,1,1,7,7,7,7,12,13,0,0,0,0,0,0,7,7,7,7,12,0,13,0,0,0,0,0,7,7,7,7,12,0,0,13,0,0,0,0,7,7,7,7,12,0,0,0,13,0,0,0,7,7,7,7,12,0,0,0,0,13,0,0,7,7,7,7,12,0,0,0,0,0,13,0,7,7,7,7,12,0,0,0,0,0,0,13,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-1,0,1,1,1,1,1,1,7,7,7,7,11,12,13,0,0,0,0,0,7,7,7,7,0,12,0,13,0,0,0,0,7,7,7,7,0,12,0,0,13,0,0,0,7,7,7,7,0,12,0,0,0,13,0,0,7,7,7,7,0,12,0,0,0,0,13,0,7,7,7,7,0,12,0,0,0,0,0,13,7,7,7,7,0,12,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-1,-1,0,1,1,1,1,1,7,7,7,7,0,11,12,13,0,0,0,0,7,7,7,7,11,0,12,0,13,0,0,0,7,7,7,7,0,0,12,0,0,13,0,0,7,7,7,7,0,0,12,0,0,0,13,0,7,7,7,7,0,0,12,0,0,0,0,13,7,7,7,7,0,0,12,0,0,0,0,0,7,7,7,7,0,0,12,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-1,-1,-1,0,1,1,1,1,7,7,7,7,0,0,11,12,13,0,0,0,7,7,7,7,0,11,0,12,0,13,0,0,7,7,7,7,11,0,0,12,0,0,13,0,7,7,7,7,0,0,0,12,0,0,0,13,7,7,7,7,0,0,0,12,0,0,0,0,7,7,7,7,0,0,0,12,0,0,0,0,7,7,7,7,0,0,0,12,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-1,-1,-1,-1,0,1,1,1,7,7,7,7,0,0,0,11,12,13,0,0,7,7,7,7,0,0,11,0,12,0,13,0,7,7,7,7,0,11,0,0,12,0,0,13,7,7,7,7,11,0,0,0,12,0,0,0,7,7,7,7,0,0,0,0,12,0,0,0,7,7,7,7,0,0,0,0,12,0,0,0,7,7,7,7,0,0,0,0,12,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-1,-1,-1,-1,-1,0,1,1,7,7,7,7,0,0,0,0,11,12,13,0,7,7,7,7,0,0,0,11,0,12,0,13,7,7,7,7,0,0,11,0,0,12,0,0,7,7,7,7,0,11,0,0,0,12,0,0,7,7,7,7,11,0,0,0,0,12,0,0,7,7,7,7,0,0,0,0,0,12,0,0,7,7,7,7,0,0,0,0,0,12,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-1,-1,-1,-1,-1,-1,0,1,7,7,7,7,0,0,0,0,0,11,12,13,7,7,7,7,0,0,0,0,11,0,12,0,7,7,7,7,0,0,0,11,0,0,12,0,7,7,7,7,0,0,11,0,0,0,12,0,7,7,7,7,0,11,0,0,0,0,12,0,7,7,7,7,11,0,0,0,0,0,12,0,7,7,7,7,0,0,0,0,0,0,12,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-1,-1,-1,-1,-1,-1,-1,0,7,7,7,7,0,0,0,0,0,0,11,12,7,7,7,7,0,0,0,0,0,11,0,12,7,7,7,7,0,0,0,0,11,0,0,12,7,7,7,7,0,0,0,11,0,0,0,12,7,7,7,7,0,0,11,0,0,0,0,12,7,7,7,7,0,11,0,0,0,0,0,12,7,7,7,7,11,0,0,0,0,0,0,12,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-12,-11,0,0,0,0,0,0,7,7,7,7,0,1,1,1,1,1,1,1,7,7,7,7,12,13,0,0,0,0,0,0,7,7,7,7,12,0,13,0,0,0,0,0,7,7,7,7,12,0,0,13,0,0,0,0,7,7,7,7,12,0,0,0,13,0,0,0,7,7,7,7,12,0,0,0,0,13,0,0,7,7,7,7,12,0,0,0,0,0,13,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-13,-12,-11,0,0,0,0,0,7,7,7,7,-1,0,1,1,1,1,1,1,7,7,7,7,11,12,13,0,0,0,0,0,7,7,7,7,0,12,0,13,0,0,0,0,7,7,7,7,0,12,0,0,13,0,0,0,7,7,7,7,0,12,0,0,0,13,0,0,7,7,7,7,0,12,0,0,0,0,13,0,7,7,7,7,0,12,0,0,0,0,0,13,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,-13,-12,-11,0,0,0,0,7,7,7,7,-1,-1,0,1,1,1,1,1,7,7,7,7,0,11,12,13,0,0,0,0,7,7,7,7,11,0,12,0,13,0,0,0,7,7,7,7,0,0,12,0,0,13,0,0,7,7,7,7,0,0,12,0,0,0,13,0,7,7,7,7,0,0,12,0,0,0,0,13,7,7,7,7,0,0,12,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,-13,-12,-11,0,0,0,7,7,7,7,-1,-1,-1,0,1,1,1,1,7,7,7,7,0,0,11,12,13,0,0,0,7,7,7,7,0,11,0,12,0,13,0,0,7,7,7,7,11,0,0,12,0,0,13,0,7,7,7,7,0,0,0,12,0,0,0,13,7,7,7,7,0,0,0,12,0,0,0,0,7,7,7,7,0,0,0,12,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,-13,-12,-11,0,0,7,7,7,7,-1,-1,-1,-1,0,1,1,1,7,7,7,7,0,0,0,11,12,13,0,0,7,7,7,7,0,0,11,0,12,0,13,0,7,7,7,7,0,11,0,0,12,0,0,13,7,7,7,7,11,0,0,0,12,0,0,0,7,7,7,7,0,0,0,0,12,0,0,0,7,7,7,7,0,0,0,0,12,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,-13,-12,-11,0,7,7,7,7,-1,-1,-1,-1,-1,0,1,1,7,7,7,7,0,0,0,0,11,12,13,0,7,7,7,7,0,0,0,11,0,12,0,13,7,7,7,7,0,0,11,0,0,12,0,0,7,7,7,7,0,11,0,0,0,12,0,0,7,7,7,7,11,0,0,0,0,12,0,0,7,7,7,7,0,0,0,0,0,12,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,-13,-12,-11,7,7,7,7,-1,-1,-1,-1,-1,-1,0,1,7,7,7,7,0,0,0,0,0,11,12,13,7,7,7,7,0,0,0,0,11,0,12,0,7,7,7,7,0,0,0,11,0,0,12,0,7,7,7,7,0,0,11,0,0,0,12,0,7,7,7,7,0,11,0,0,0,0,12,0,7,7,7,7,11,0,0,0,0,0,12,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,-13,-12,7,7,7,7,-1,-1,-1,-1,-1,-1,-1,0,7,7,7,7,0,0,0,0,0,0,11,12,7,7,7,7,0,0,0,0,0,11,0,12,7,7,7,7,0,0,0,0,11,0,0,12,7,7,7,7,0,0,0,11,0,0,0,12,7,7,7,7,0,0,11,0,0,0,0,12,7,7,7,7,0,11,0,0,0,0,0,12,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-12,0,-11,0,0,0,0,0,7,7,7,7,-12,-11,0,0,0,0,0,0,7,7,7,7,0,1,1,1,1,1,1,1,7,7,7,7,12,13,0,0,0,0,0,0,7,7,7,7,12,0,13,0,0,0,0,0,7,7,7,7,12,0,0,13,0,0,0,0,7,7,7,7,12,0,0,0,13,0,0,0,7,7,7,7,12,0,0,0,0,13,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,-12,0,-11,0,0,0,0,7,7,7,7,-13,-12,-11,0,0,0,0,0,7,7,7,7,-1,0,1,1,1,1,1,1,7,7,7,7,11,12,13,0,0,0,0,0,7,7,7,7,0,12,0,13,0,0,0,0,7,7,7,7,0,12,0,0,13,0,0,0,7,7,7,7,0,12,0,0,0,13,0,0,7,7,7,7,0,12,0,0,0,0,13,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-13,0,-12,0,-11,0,0,0,7,7,7,7,0,-13,-12,-11,0,0,0,0,7,7,7,7,-1,-1,0,1,1,1,1,1,7,7,7,7,0,11,12,13,0,0,0,0,7,7,7,7,11,0,12,0,13,0,0,0,7,7,7,7,0,0,12,0,0,13,0,0,7,7,7,7,0,0,12,0,0,0,13,0,7,7,7,7,0,0,12,0,0,0,0,13,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,-13,0,-12,0,-11,0,0,7,7,7,7,0,0,-13,-12,-11,0,0,0,7,7,7,7,-1,-1,-1,0,1,1,1,1,7,7,7,7,0,0,11,12,13,0,0,0,7,7,7,7,0,11,0,12,0,13,0,0,7,7,7,7,11,0,0,12,0,0,13,0,7,7,7,7,0,0,0,12,0,0,0,13,7,7,7,7,0,0,0,12,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,-13,0,-12,0,-11,0,7,7,7,7,0,0,0,-13,-12,-11,0,0,7,7,7,7,-1,-1,-1,-1,0,1,1,1,7,7,7,7,0,0,0,11,12,13,0,0,7,7,7,7,0,0,11,0,12,0,13,0,7,7,7,7,0,11,0,0,12,0,0,13,7,7,7,7,11,0,0,0,12,0,0,0,7,7,7,7,0,0,0,0,12,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,-13,0,-12,0,-11,7,7,7,7,0,0,0,0,-13,-12,-11,0,7,7,7,7,-1,-1,-1,-1,-1,0,1,1,7,7,7,7,0,0,0,0,11,12,13,0,7,7,7,7,0,0,0,11,0,12,0,13,7,7,7,7,0,0,11,0,0,12,0,0,7,7,7,7,0,11,0,0,0,12,0,0,7,7,7,7,11,0,0,0,0,12,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,-13,0,-12,0,7,7,7,7,0,0,0,0,0,-13,-12,-11,7,7,7,7,-1,-1,-1,-1,-1,-1,0,1,7,7,7,7,0,0,0,0,0,11,12,13,7,7,7,7,0,0,0,0,11,0,12,0,7,7,7,7,0,0,0,11,0,0,12,0,7,7,7,7,0,0,11,0,0,0,12,0,7,7,7,7,0,11,0,0,0,0,12,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,-13,0,-12,7,7,7,7,0,0,0,0,0,0,-13,-12,7,7,7,7,-1,-1,-1,-1,-1,-1,-1,0,7,7,7,7,0,0,0,0,0,0,11,12,7,7,7,7,0,0,0,0,0,11,0,12,7,7,7,7,0,0,0,0,11,0,0,12,7,7,7,7,0,0,0,11,0,0,0,12,7,7,7,7,0,0,11,0,0,0,0,12,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-12,0,0,-11,0,0,0,0,7,7,7,7,-12,0,-11,0,0,0,0,0,7,7,7,7,-12,-11,0,0,0,0,0,0,7,7,7,7,0,1,1,1,1,1,1,1,7,7,7,7,12,13,0,0,0,0,0,0,7,7,7,7,12,0,13,0,0,0,0,0,7,7,7,7,12,0,0,13,0,0,0,0,7,7,7,7,12,0,0,0,13,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,-12,0,0,-11,0,0,0,7,7,7,7,0,-12,0,-11,0,0,0,0,7,7,7,7,-13,-12,-11,0,0,0,0,0,7,7,7,7,-1,0,1,1,1,1,1,1,7,7,7,7,11,12,13,0,0,0,0,0,7,7,7,7,0,12,0,13,0,0,0,0,7,7,7,7,0,12,0,0,13,0,0,0,7,7,7,7,0,12,0,0,0,13,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,-12,0,0,-11,0,0,7,7,7,7,-13,0,-12,0,-11,0,0,0,7,7,7,7,0,-13,-12,-11,0,0,0,0,7,7,7,7,-1,-1,0,1,1,1,1,1,7,7,7,7,0,11,12,13,0,0,0,0,7,7,7,7,11,0,12,0,13,0,0,0,7,7,7,7,0,0,12,0,0,13,0,0,7,7,7,7,0,0,12,0,0,0,13,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-13,0,0,-12,0,0,-11,0,7,7,7,7,0,-13,0,-12,0,-11,0,0,7,7,7,7,0,0,-13,-12,-11,0,0,0,7,7,7,7,-1,-1,-1,0,1,1,1,1,7,7,7,7,0,0,11,12,13,0,0,0,7,7,7,7,0,11,0,12,0,13,0,0,7,7,7,7,11,0,0,12,0,0,13,0,7,7,7,7,0,0,0,12,0,0,0,13,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,-13,0,0,-12,0,0,-11,7,7,7,7,0,0,-13,0,-12,0,-11,0,7,7,7,7,0,0,0,-13,-12,-11,0,0,7,7,7,7,-1,-1,-1,-1,0,1,1,1,7,7,7,7,0,0,0,11,12,13,0,0,7,7,7,7,0,0,11,0,12,0,13,0,7,7,7,7,0,11,0,0,12,0,0,13,7,7,7,7,11,0,0,0,12,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,-13,0,0,-12,0,0,7,7,7,7,0,0,0,-13,0,-12,0,-11,7,7,7,7,0,0,0,0,-13,-12,-11,0,7,7,7,7,-1,-1,-1,-1,-1,0,1,1,7,7,7,7,0,0,0,0,11,12,13,0,7,7,7,7,0,0,0,11,0,12,0,13,7,7,7,7,0,0,11,0,0,12,0,0,7,7,7,7,0,11,0,0,0,12,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,-13,0,0,-12,0,7,7,7,7,0,0,0,0,-13,0,-12,0,7,7,7,7,0,0,0,0,0,-13,-12,-11,7,7,7,7,-1,-1,-1,-1,-1,-1,0,1,7,7,7,7,0,0,0,0,0,11,12,13,7,7,7,7,0,0,0,0,11,0,12,0,7,7,7,7,0,0,0,11,0,0,12,0,7,7,7,7,0,0,11,0,0,0,12,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,-13,0,0,-12,7,7,7,7,0,0,0,0,0,-13,0,-12,7,7,7,7,0,0,0,0,0,0,-13,-12,7,7,7,7,-1,-1,-1,-1,-1,-1,-1,0,7,7,7,7,0,0,0,0,0,0,11,12,7,7,7,7,0,0,0,0,0,11,0,12,7,7,7,7,0,0,0,0,11,0,0,12,7,7,7,7,0,0,0,11,0,0,0,12,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-12,0,0,0,-11,0,0,0,7,7,7,7,-12,0,0,-11,0,0,0,0,7,7,7,7,-12,0,-11,0,0,0,0,0,7,7,7,7,-12,-11,0,0,0,0,0,0,7,7,7,7,0,1,1,1,1,1,1,1,7,7,7,7,12,13,0,0,0,0,0,0,7,7,7,7,12,0,13,0,0,0,0,0,7,7,7,7,12,0,0,13,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,-12,0,0,0,-11,0,0,7,7,7,7,0,-12,0,0,-11,0,0,0,7,7,7,7,0,-12,0,-11,0,0,0,0,7,7,7,7,-13,-12,-11,0,0,0,0,0,7,7,7,7,-1,0,1,1,1,1,1,1,7,7,7,7,11,12,13,0,0,0,0,0,7,7,7,7,0,12,0,13,0,0,0,0,7,7,7,7,0,12,0,0,13,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,-12,0,0,0,-11,0,7,7,7,7,0,0,-12,0,0,-11,0,0,7,7,7,7,-13,0,-12,0,-11,0,0,0,7,7,7,7,0,-13,-12,-11,0,0,0,0,7,7,7,7,-1,-1,0,1,1,1,1,1,7,7,7,7,0,11,12,13,0,0,0,0,7,7,7,7,11,0,12,0,13,0,0,0,7,7,7,7,0,0,12,0,0,13,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,-12,0,0,0,-11,7,7,7,7,-13,0,0,-12,0,0,-11,0,7,7,7,7,0,-13,0,-12,0,-11,0,0,7,7,7,7,0,0,-13,-12,-11,0,0,0,7,7,7,7,-1,-1,-1,0,1,1,1,1,7,7,7,7,0,0,11,12,13,0,0,0,7,7,7,7,0,11,0,12,0,13,0,0,7,7,7,7,11,0,0,12,0,0,13,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-13,0,0,0,-12,0,0,0,7,7,7,7,0,-13,0,0,-12,0,0,-11,7,7,7,7,0,0,-13,0,-12,0,-11,0,7,7,7,7,0,0,0,-13,-12,-11,0,0,7,7,7,7,-1,-1,-1,-1,0,1,1,1,7,7,7,7,0,0,0,11,12,13,0,0,7,7,7,7,0,0,11,0,12,0,13,0,7,7,7,7,0,11,0,0,12,0,0,13,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,-13,0,0,0,-12,0,0,7,7,7,7,0,0,-13,0,0,-12,0,0,7,7,7,7,0,0,0,-13,0,-12,0,-11,7,7,7,7,0,0,0,0,-13,-12,-11,0,7,7,7,7,-1,-1,-1,-1,-1,0,1,1,7,7,7,7,0,0,0,0,11,12,13,0,7,7,7,7,0,0,0,11,0,12,0,13,7,7,7,7,0,0,11,0,0,12,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,-13,0,0,0,-12,0,7,7,7,7,0,0,0,-13,0,0,-12,0,7,7,7,7,0,0,0,0,-13,0,-12,0,7,7,7,7,0,0,0,0,0,-13,-12,-11,7,7,7,7,-1,-1,-1,-1,-1,-1,0,1,7,7,7,7,0,0,0,0,0,11,12,13,7,7,7,7,0,0,0,0,11,0,12,0,7,7,7,7,0,0,0,11,0,0,12,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,-13,0,0,0,-12,7,7,7,7,0,0,0,0,-13,0,0,-12,7,7,7,7,0,0,0,0,0,-13,0,-12,7,7,7,7,0,0,0,0,0,0,-13,-12,7,7,7,7,-1,-1,-1,-1,-1,-1,-1,0,7,7,7,7,0,0,0,0,0,0,11,12,7,7,7,7,0,0,0,0,0,11,0,12,7,7,7,7,0,0,0,0,11,0,0,12,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-12,0,0,0,0,-11,0,0,7,7,7,7,-12,0,0,0,-11,0,0,0,7,7,7,7,-12,0,0,-11,0,0,0,0,7,7,7,7,-12,0,-11,0,0,0,0,0,7,7,7,7,-12,-11,0,0,0,0,0,0,7,7,7,7,0,1,1,1,1,1,1,1,7,7,7,7,12,13,0,0,0,0,0,0,7,7,7,7,12,0,13,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,-12,0,0,0,0,-11,0,7,7,7,7,0,-12,0,0,0,-11,0,0,7,7,7,7,0,-12,0,0,-11,0,0,0,7,7,7,7,0,-12,0,-11,0,0,0,0,7,7,7,7,-13,-12,-11,0,0,0,0,0,7,7,7,7,-1,0,1,1,1,1,1,1,7,7,7,7,11,12,13,0,0,0,0,0,7,7,7,7,0,12,0,13,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,-12,0,0,0,0,-11,7,7,7,7,0,0,-12,0,0,0,-11,0,7,7,7,7,0,0,-12,0,0,-11,0,0,7,7,7,7,-13,0,-12,0,-11,0,0,0,7,7,7,7,0,-13,-12,-11,0,0,0,0,7,7,7,7,-1,-1,0,1,1,1,1,1,7,7,7,7,0,11,12,13,0,0,0,0,7,7,7,7,11,0,12,0,13,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,-12,0,0,0,0,7,7,7,7,0,0,0,-12,0,0,0,-11,7,7,7,7,-13,0,0,-12,0,0,-11,0,7,7,7,7,0,-13,0,-12,0,-11,0,0,7,7,7,7,0,0,-13,-12,-11,0,0,0,7,7,7,7,-1,-1,-1,0,1,1,1,1,7,7,7,7,0,0,11,12,13,0,0,0,7,7,7,7,0,11,0,12,0,13,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,-12,0,0,0,7,7,7,7,-13,0,0,0,-12,0,0,0,7,7,7,7,0,-13,0,0,-12,0,0,-11,7,7,7,7,0,0,-13,0,-12,0,-11,0,7,7,7,7,0,0,0,-13,-12,-11,0,0,7,7,7,7,-1,-1,-1,-1,0,1,1,1,7,7,7,7,0,0,0,11,12,13,0,0,7,7,7,7,0,0,11,0,12,0,13,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-13,0,0,0,0,-12,0,0,7,7,7,7,0,-13,0,0,0,-12,0,0,7,7,7,7,0,0,-13,0,0,-12,0,0,7,7,7,7,0,0,0,-13,0,-12,0,-11,7,7,7,7,0,0,0,0,-13,-12,-11,0,7,7,7,7,-1,-1,-1,-1,-1,0,1,1,7,7,7,7,0,0,0,0,11,12,13,0,7,7,7,7,0,0,0,11,0,12,0,13,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,-13,0,0,0,0,-12,0,7,7,7,7,0,0,-13,0,0,0,-12,0,7,7,7,7,0,0,0,-13,0,0,-12,0,7,7,7,7,0,0,0,0,-13,0,-12,0,7,7,7,7,0,0,0,0,0,-13,-12,-11,7,7,7,7,-1,-1,-1,-1,-1,-1,0,1,7,7,7,7,0,0,0,0,0,11,12,13,7,7,7,7,0,0,0,0,11,0,12,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,-13,0,0,0,0,-12,7,7,7,7,0,0,0,-13,0,0,0,-12,7,7,7,7,0,0,0,0,-13,0,0,-12,7,7,7,7,0,0,0,0,0,-13,0,-12,7,7,7,7,0,0,0,0,0,0,-13,-12,7,7,7,7,-1,-1,-1,-1,-1,-1,-1,0,7,7,7,7,0,0,0,0,0,0,11,12,7,7,7,7,0,0,0,0,0,11,0,12,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-12,0,0,0,0,0,-11,0,7,7,7,7,-12,0,0,0,0,-11,0,0,7,7,7,7,-12,0,0,0,-11,0,0,0,7,7,7,7,-12,0,0,-11,0,0,0,0,7,7,7,7,-12,0,-11,0,0,0,0,0,7,7,7,7,-12,-11,0,0,0,0,0,0,7,7,7,7,0,1,1,1,1,1,1,1,7,7,7,7,12,13,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,-12,0,0,0,0,0,-11,7,7,7,7,0,-12,0,0,0,0,-11,0,7,7,7,7,0,-12,0,0,0,-11,0,0,7,7,7,7,0,-12,0,0,-11,0,0,0,7,7,7,7,0,-12,0,-11,0,0,0,0,7,7,7,7,-13,-12,-11,0,0,0,0,0,7,7,7,7,-1,0,1,1,1,1,1,1,7,7,7,7,11,12,13,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,-12,0,0,0,0,0,7,7,7,7,0,0,-12,0,0,0,0,-11,7,7,7,7,0,0,-12,0,0,0,-11,0,7,7,7,7,0,0,-12,0,0,-11,0,0,7,7,7,7,-13,0,-12,0,-11,0,0,0,7,7,7,7,0,-13,-12,-11,0,0,0,0,7,7,7,7,-1,-1,0,1,1,1,1,1,7,7,7,7,0,11,12,13,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,-12,0,0,0,0,7,7,7,7,0,0,0,-12,0,0,0,0,7,7,7,7,0,0,0,-12,0,0,0,-11,7,7,7,7,-13,0,0,-12,0,0,-11,0,7,7,7,7,0,-13,0,-12,0,-11,0,0,7,7,7,7,0,0,-13,-12,-11,0,0,0,7,7,7,7,-1,-1,-1,0,1,1,1,1,7,7,7,7,0,0,11,12,13,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,-12,0,0,0,7,7,7,7,0,0,0,0,-12,0,0,0,7,7,7,7,-13,0,0,0,-12,0,0,0,7,7,7,7,0,-13,0,0,-12,0,0,-11,7,7,7,7,0,0,-13,0,-12,0,-11,0,7,7,7,7,0,0,0,-13,-12,-11,0,0,7,7,7,7,-1,-1,-1,-1,0,1,1,1,7,7,7,7,0,0,0,11,12,13,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,-12,0,0,7,7,7,7,-13,0,0,0,0,-12,0,0,7,7,7,7,0,-13,0,0,0,-12,0,0,7,7,7,7,0,0,-13,0,0,-12,0,0,7,7,7,7,0,0,0,-13,0,-12,0,-11,7,7,7,7,0,0,0,0,-13,-12,-11,0,7,7,7,7,-1,-1,-1,-1,-1,0,1,1,7,7,7,7,0,0,0,0,11,12,13,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-13,0,0,0,0,0,-12,0,7,7,7,7,0,-13,0,0,0,0,-12,0,7,7,7,7,0,0,-13,0,0,0,-12,0,7,7,7,7,0,0,0,-13,0,0,-12,0,7,7,7,7,0,0,0,0,-13,0,-12,0,7,7,7,7,0,0,0,0,0,-13,-12,-11,7,7,7,7,-1,-1,-1,-1,-1,-1,0,1,7,7,7,7,0,0,0,0,0,11,12,13,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,-13,0,0,0,0,0,-12,7,7,7,7,0,0,-13,0,0,0,0,-12,7,7,7,7,0,0,0,-13,0,0,0,-12,7,7,7,7,0,0,0,0,-13,0,0,-12,7,7,7,7,0,0,0,0,0,-13,0,-12,7,7,7,7,0,0,0,0,0,0,-13,-12,7,7,7,7,-1,-1,-1,-1,-1,-1,-1,0,7,7,7,7,0,0,0,0,0,0,11,12,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-12,0,0,0,0,0,0,-11,7,7,7,7,-12,0,0,0,0,0,-11,0,7,7,7,7,-12,0,0,0,0,-11,0,0,7,7,7,7,-12,0,0,0,-11,0,0,0,7,7,7,7,-12,0,0,-11,0,0,0,0,7,7,7,7,-12,0,-11,0,0,0,0,0,7,7,7,7,-12,-11,0,0,0,0,0,0,7,7,7,7,0,1,1,1,1,1,1,1,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,-12,0,0,0,0,0,0,7,7,7,7,0,-12,0,0,0,0,0,-11,7,7,7,7,0,-12,0,0,0,0,-11,0,7,7,7,7,0,-12,0,0,0,-11,0,0,7,7,7,7,0,-12,0,0,-11,0,0,0,7,7,7,7,0,-12,0,-11,0,0,0,0,7,7,7,7,-13,-12,-11,0,0,0,0,0,7,7,7,7,-1,0,1,1,1,1,1,1,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,-12,0,0,0,0,0,7,7,7,7,0,0,-12,0,0,0,0,0,7,7,7,7,0,0,-12,0,0,0,0,-11,7,7,7,7,0,0,-12,0,0,0,-11,0,7,7,7,7,0,0,-12,0,0,-11,0,0,7,7,7,7,-13,0,-12,0,-11,0,0,0,7,7,7,7,0,-13,-12,-11,0,0,0,0,7,7,7,7,-1,-1,0,1,1,1,1,1,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,-12,0,0,0,0,7,7,7,7,0,0,0,-12,0,0,0,0,7,7,7,7,0,0,0,-12,0,0,0,0,7,7,7,7,0,0,0,-12,0,0,0,-11,7,7,7,7,-13,0,0,-12,0,0,-11,0,7,7,7,7,0,-13,0,-12,0,-11,0,0,7,7,7,7,0,0,-13,-12,-11,0,0,0,7,7,7,7,-1,-1,-1,0,1,1,1,1,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,-12,0,0,0,7,7,7,7,0,0,0,0,-12,0,0,0,7,7,7,7,0,0,0,0,-12,0,0,0,7,7,7,7,-13,0,0,0,-12,0,0,0,7,7,7,7,0,-13,0,0,-12,0,0,-11,7,7,7,7,0,0,-13,0,-12,0,-11,0,7,7,7,7,0,0,0,-13,-12,-11,0,0,7,7,7,7,-1,-1,-1,-1,0,1,1,1,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,-12,0,0,7,7,7,7,0,0,0,0,0,-12,0,0,7,7,7,7,-13,0,0,0,0,-12,0,0,7,7,7,7,0,-13,0,0,0,-12,0,0,7,7,7,7,0,0,-13,0,0,-12,0,0,7,7,7,7,0,0,0,-13,0,-12,0,-11,7,7,7,7,0,0,0,0,-13,-12,-11,0,7,7,7,7,-1,-1,-1,-1,-1,0,1,1,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,-12,0,7,7,7,7,-13,0,0,0,0,0,-12,0,7,7,7,7,0,-13,0,0,0,0,-12,0,7,7,7,7,0,0,-13,0,0,0,-12,0,7,7,7,7,0,0,0,-13,0,0,-12,0,7,7,7,7,0,0,0,0,-13,0,-12,0,7,7,7,7,0,0,0,0,0,-13,-12,-11,7,7,7,7,-1,-1,-1,-1,-1,-1,0,1,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-13,0,0,0,0,0,0,-12,7,7,7,7,0,-13,0,0,0,0,0,-12,7,7,7,7,0,0,-13,0,0,0,0,-12,7,7,7,7,0,0,0,-13,0,0,0,-12,7,7,7,7,0,0,0,0,-13,0,0,-12,7,7,7,7,0,0,0,0,0,-13,0,-12,7,7,7,7,0,0,0,0,0,0,-13,-12,7,7,7,7,-1,-1,-1,-1,-1,-1,-1,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7]
  ];
  
  //}}}
  
  //}}}

  //{{{  utility primitives
  
  //{{{  uciLog
  
  function uciLog () {
  
    if (cwtch.quiet)
      return;
  
    var s = '';
  
    for (var i = 0; i < arguments.length; i++)
      s += arguments[i] + ' ';
  
    console.log(s);
  }
  
  //}}}
  //{{{  myround
  
  function myround(x) {
    return Math.sign(x) * Math.round(Math.abs(x));
  }
  
  //}}}
  
  //}}}
  //{{{  prng primitives
  //
  // https://en.wikipedia.org/wiki/Mersenne_Twister
  //
  
  let twisterList  = new Uint32Array(624);
  let twisterIndex = 0;
  
  function twisterInit(seed) {
  
    const mt = twisterList;
  
    mt[0] = seed >>> 0;
  
    for (let i = 1; i < 624; i++) {
      mt[i] = (0x6C078965 * (mt[i - 1] ^ (mt[i - 1] >>> 30)) + i) >>> 0;
    }
  }
  
  function twisterFill() {
  
    const mt = twisterList;
  
    for (let i = 0; i < 624; i++) {
      let y = (mt[i] & 0x80000000) + (mt[(i + 1) % 624] & 0x7FFFFFFF);
      mt[i] = mt[(i + 397) % 624] ^ (y >>> 1);
      if (y % 2 !== 0) {
        mt[i] ^= 0x9908B0DF;
      }
    }
  }
  
  function twisterRand() {
  
    const mt = twisterList;
  
    if (twisterIndex === 0)
      twisterFill();
  
    let y = mt[twisterIndex];
    y ^= y >>> 11;
    y ^= (y << 7)  & 0x9D2C5680;
    y ^= (y << 15) & 0xEFC60000;
    y ^= y >>> 18;
  
    twisterIndex = (twisterIndex + 1) % 624;
  
    return y >>> 0;
  }
  
  twisterInit(123456789);
  
  //}}}
  //{{{  move primitives
  
  function moveClean (move) {
    return move & MOVE_CLEAN_MASK;
  }
  
  function moveIsNoisy (move) {
    return (move & MOVE_NOISY_MASK) != 0;
  }
  
  function moveIsQuiet (move) {
    return (move & MOVE_NOISY_MASK) == 0;
  }
  
  function moveEq (m1,m2) {
    return (m1 & MOVE_CLEAN_MASK) == (m2 & MOVE_CLEAN_MASK);
  }
  
  function moveFromSq (move) {
    return (move & MOVE_FR_MASK) >>> MOVE_FR_BITS;
  }
  
  function moveToSq (move) {
    return (move & MOVE_TO_MASK) >>> MOVE_TO_BITS;
  }
  
  function moveToObj (move) {
    return (move & MOVE_TOOBJ_MASK) >>> MOVE_TOOBJ_BITS;
  }
  
  function moveFromObj (move) {
    return (move & MOVE_FROBJ_MASK) >>> MOVE_FROBJ_BITS;
  }
  
  function movePromotePiece (move) {
    return ((move & MOVE_PROMAS_MASK) >>> MOVE_PROMAS_BITS) + 2;
  }
  
  function formatMove (move) {
  
    if (move == 0)
      return 'NaM';
  
    const fr = moveFromSq(move);
    const to = moveToSq(move);
  
    const frCoord = COORDS[fr];
    const toCoord = COORDS[to];
  
    const pro = (move & MOVE_PROMOTE_MASK) ? OBJ_CHAR[movePromotePiece(move)|BLACK] : '';
  
    return frCoord + toCoord + pro;
  }
  
  //}}}
  //{{{  board primitives
  
  function objColour (obj) {
    return obj & COLOUR_MASK;
  }
  
  function objPiece (obj) {
    return obj & PIECE_MASK;
  }
  
  function colourIndex (c) {
    return c >>> 3;
  }
  
  function colourIndexToggle (i) {
    return Math.abs(i-1);
  }
  
  function colourMultiplier (c) {
    return (-c >> 31) | 1;
  }
  
  function colourToggle (c) {
    return ~c & COLOUR_MASK;
  }
  
  function flip (sq) {
    let m = (143 - sq) / 12 | 0;
    return 12*m + sq%12;
  }
  
  //}}}
  //{{{  net primitives
  
  function relu(x) {
    return x;
    //return Math.max(0, x);
  }
  
  function crelu(x) {
    return Math.min(Math.max(x, 0), 1);
  }
  
  function inputIndex(obj, sq) {
    return IMAP[obj][sq];
  }
  
  //}}}

  //{{{  nodeStruct
  
  //{{{  struct
  
  function nodeStruct () {
  
    this.cwtch  = null;
    this.child  = null;
    this.parent = null;
    this.granny = null;
  
    this.ply = 0;
    this.no  = 0;
  
    this.quietNum   = 0;
    this.quietMoves = new Uint32Array(MAX_MOVES).fill(0);
    this.quietRanks = new Uint32Array(MAX_MOVES).fill(0);
  
    this.noisyNum   = 0;
    this.noisyMoves = new Uint32Array(MAX_MOVES).fill(0);
    this.noisyRanks = new Uint32Array(MAX_MOVES).fill(0);
  
    this.killer    = 0;
    this.killerNum = 0;
  
    this.nextMove = 0;
    this.stage    = 0;
    this.flags    = 0;
    this.inCheck  = 0;
  
    this.ttMove = 0;
  
    this.hHistoryLimit = 0;
    this.rights        = 0;
    this.ep            = 0;
    this.hLo           = new Uint32Array(1);
    this.hHi           = new Uint32Array(1);
    this.net_h1_a      = new Float32Array(net_h1_size);
  }
  
  //}}}
  
  //{{{  initMoveGen
  
  nodeStruct.prototype.initMoveGen = function (flags, inCheck) {
  
    this.stage     = 0;
    this.flags     = flags;
    this.inCheck   = inCheck;
  
  }
  
  //}}}
  
  //{{{  getNextMove
  
  nodeStruct.prototype.getNextMove = function () {
  
    const l      = this.cwtch;
    const ttMove = this.ttMove;
  
    switch (this.stage) {
  
      case 0:
  
        this.stage++;
  
        if (ttMove && l.ttValidate(ttMove)) {
          return ttMove;
        }
  
        if (ttMove)
          uciLog('info invalid tt move', formatMove(ttMove), l.fen(), this.ply); //hack
  
      case 1:
  
        this.noisyNum    = 0;
        this.quietNum    = 0;
        this.killerNum   = 0;
  
        this.genNonCastlingMoves();
  
        this.nextMove = 0;
        this.stage++;
  
      case 2:
  
        if (this.nextMove < this.noisyNum)
          return this.nextStagedNoisy();
  
        if (this.flags & NOISY_MOVES_ONLY)
          return 0;
  
        this.genCastlingMoves();
  
        this.stage++;
  
      case 3:
  
        this.stage++;
  
        if (this.killerNum)
          return this.killer;
  
      case 4:
  
        this.rankQuiets();
  
        this.stage++;
        this.nextMove = 0;
  
      case 5:
  
        if (this.nextMove < this.quietNum)
          return this.nextStagedQuiet();
  
        return 0;
    }
  }
  
  //}}}
  //{{{  nextStagedNoisy
  
  nodeStruct.prototype.nextStagedNoisy = function () {
  
    let maxR = -100000;
    let maxI = 0;
  
    for (let i=this.nextMove; i < this.noisyNum; i++) {
      if (this.noisyRanks[i] > maxR) {
        maxR = this.noisyRanks[i];
        maxI = i;
      }
    }
  
    const maxM = this.noisyMoves[maxI]
  
    this.noisyMoves[maxI] = this.noisyMoves[this.nextMove];
    this.noisyRanks[maxI] = this.noisyRanks[this.nextMove];
  
    this.nextMove++;
  
    return maxM;
  }
  
  //}}}
  //{{{  nextStagedQuiet
  
  nodeStruct.prototype.nextStagedQuiet = function () {
  
    let maxR = -100000;
    let maxI = 0;
  
    for (let i=this.nextMove; i < this.quietNum; i++) {
      if (this.quietRanks[i] > maxR) {
        maxR = this.quietRanks[i];
        maxI = i;
      }
    }
  
    const maxM = this.quietMoves[maxI]
  
    this.quietMoves[maxI] = this.quietMoves[this.nextMove];
    this.quietRanks[maxI] = this.quietRanks[this.nextMove];
  
    this.nextMove++;
  
    return maxM;
  }
  
  //}}}
  
  //{{{  genNonCastlingMoves
  
  nodeStruct.prototype.genNonCastlingMoves = function () {
  
    const l = this.cwtch;
    const b = l.board;
  
    const cx           = colourIndex(l.turn);
    const HOME_RANK    = WB_HOME_RANK[cx];
    const PROMOTE_RANK = WB_PROMOTE_RANK[cx];
    const EP_RANK      = WB_EP_RANK[cx];
    const list         = l.cxList[cx];
    const num          = list[LCOUNT];
    const aligned      = ALIGNED[list[LKING]];
  
    for (let i=1; i<=num; i++) {
  
      const fr        = list[i];
      const frObj     = b[fr];
  
      const frPiece   = objPiece(frObj);
      const frMove    = (frObj << MOVE_FROBJ_BITS) | (fr << MOVE_FR_BITS);
      const legalMask = !this.inCheck && !aligned[fr] ? MOVE_LEGAL_MASK : 0;
  
      switch (frPiece) {
  
        case KING:
          this.genKingMoves(frMove);
          break;
  
        case PAWN:
          const frRank = RANK[fr];
          switch (frRank) {
            case HOME_RANK:
              this.genHomePawnMoves(frMove | legalMask);
              break;
            case PROMOTE_RANK:
              this.genPromotePawnMoves(frMove | legalMask);
              break;
            case EP_RANK:
              this.genPawnMoves(frMove | legalMask);
              if (l.ep)
                this.genEnPassPawnMoves(frMove);
              break;
            default:
              this.genPawnMoves(frMove | legalMask);
              break;
          }
          break;
  
        case KNIGHT:
          this.genKnightMoves(frMove | legalMask);
          break;
  
        default:
          this.genSliderMoves(frMove | legalMask);
          break;
      }
    }
  }
  
  //}}}
  //{{{  genCastlingMoves
  
  nodeStruct.prototype.genCastlingMoves = function () {
  
    if (this.inCheck)
      return;
  
    const l = this.cwtch;
    const b = l.board;
  
    if (l.turn == WHITE && (l.rights & WHITE_RIGHTS)) {
      //{{{  white
      
      if ((l.rights & WHITE_RIGHTS_KING) && !b[F1]
                                         && !b[G1]
                                         && b[G2] != B_KING
                                         && b[H2] != B_KING
                                         && !l.isKingAttacked(F1,BLACK)) {
        this.addQuiet(MOVE_E1G1);
      }
      
      if ((l.rights & WHITE_RIGHTS_QUEEN) && !b[B1]
                                          && !b[C1]
                                          && !b[D1]
                                          && b[B2] != B_KING
                                          && b[C2] != B_KING
                                          && !l.isKingAttacked(D1,BLACK)) {
        this.addQuiet(MOVE_E1C1);
      }
      
      //}}}
    }
  
    else if (l.turn == BLACK && (l.rights & BLACK_RIGHTS)) {
      //{{{  black
      
      if ((l.rights & BLACK_RIGHTS_KING) && b[F8] == 0
                                         && b[G8] == 0
                                         && b[G7] != W_KING
                                         && b[H7] != W_KING
                                         && !l.isKingAttacked(F8,WHITE)) {
        this.addQuiet(MOVE_E8G8);
      }
      
      if ((l.rights & BLACK_RIGHTS_QUEEN) && b[B8] == 0
                                          && b[C8] == 0
                                          && b[D8] == 0
                                          && b[B7] != W_KING
                                          && b[C7] != W_KING
                                          && !l.isKingAttacked(D8,WHITE)) {
        this.addQuiet(MOVE_E8C8);
      }
      
      //}}}
    }
  }
  
  //}}}
  
  //{{{  addNoisy
  
  //              E  P  N  B  R  Q  K  X  -  P  N  B  R  Q  K
  const MVVLVA = [1, 1, 2, 3, 4, 5, 6, 0, 0, 1, 2, 3, 4, 5, 6];
  
  nodeStruct.prototype.addNoisy = function (move) {
  
    if (moveEq(this.ttMove,move))
      return;
  
    this.noisyMoves[this.noisyNum]   = move;
    this.noisyRanks[this.noisyNum++] = Math.random() * 10000 | 0; //10 * MVVLVA[moveToObj(move)] - MVVLVA[moveFromObj(move)];
  }
  
  //}}}
  //{{{  addQuiet
  
  nodeStruct.prototype.addQuiet = function (move) {
  
    if (moveEq(this.ttMove,move))
      return;
  
    if (moveEq(this.killer,move)) {
      this.killerNum = 1;
      return;
    }
  
    this.quietMoves[this.quietNum++] = move;
  
  }
  
  //}}}
  //{{{  rankQuiets
  
  nodeStruct.prototype.rankQuiets = function () {
  
    const l = this.cwtch;
  
    for (let i=0; i < this.quietNum; i++) {
  
      const move    = this.quietMoves[i];
      const fr      = moveFromSq(move);
      const to      = moveToSq(move);
      const frObj   = moveFromObj(move);
      const frPiece = objPiece(frObj) - 1;
      const cx      = colourIndex(l.turn);
      const objMove = OBJMOVE[frObj];
      const val     = objMove[to] - objMove[fr];
      const h       = l.cxHistory[cx][frPiece];
      const hv      = h[to];
  
      this.quietRanks[i] = Math.random() * 10000 | 0;
    }
  }
  
  //}}}
  
  //{{{  genPawnMoves
  
  nodeStruct.prototype.genPawnMoves = function (frMove) {
  
    const l = this.cwtch;
    const b = l.board;
  
    const fr           = moveFromSq(frMove);
    const cx           = colourIndex(l.turn);
    const CAN_CAPTURE  = WB_CAN_CAPTURE[cx];
    const OFFSET_ORTH  = WB_OFFSET_ORTH[cx];
    const OFFSET_DIAG1 = WB_OFFSET_DIAG1[cx];
    const OFFSET_DIAG2 = WB_OFFSET_DIAG2[cx];
  
    let to    = 0;
    let toObj = 0;
  
    to = fr + OFFSET_ORTH;
    if (!b[to])
      this.addQuiet(frMove | to);
  
    to = fr + OFFSET_DIAG1;
    toObj = b[to];
    if (CAN_CAPTURE[toObj])
      this.addNoisy(frMove | (toObj << MOVE_TOOBJ_BITS) | to);
  
    to = fr + OFFSET_DIAG2;
    toObj = b[to];
    if (CAN_CAPTURE[toObj])
      this.addNoisy(frMove | (toObj << MOVE_TOOBJ_BITS) | to);
  }
  
  //}}}
  //{{{  genEnPassPawnMoves
  
  nodeStruct.prototype.genEnPassPawnMoves = function (frMove) {
  
    const l = this.cwtch;
    const b = l.board;
  
    const fr           = moveFromSq(frMove);
    const cx           = colourIndex(l.turn);
    const OFFSET_DIAG1 = WB_OFFSET_DIAG1[cx];
    const OFFSET_DIAG2 = WB_OFFSET_DIAG2[cx];
  
    let to = 0;
  
    to = fr + OFFSET_DIAG1;
    if (to == l.ep && !b[to])
      this.addNoisy(frMove | to | MOVE_EPTAKE_MASK);
  
    to = fr + OFFSET_DIAG2;
    if (to == l.ep && !b[to])
      this.addNoisy(frMove | to | MOVE_EPTAKE_MASK);
  }
  
  //}}}
  //{{{  genHomePawnMoves
  
  nodeStruct.prototype.genHomePawnMoves = function (frMove) {
  
    const l = this.cwtch;
    const b = l.board;
  
    const fr           = moveFromSq(frMove);
    const cx           = colourIndex(l.turn);
    const CAN_CAPTURE  = WB_CAN_CAPTURE[cx];
    const OFFSET_ORTH  = WB_OFFSET_ORTH[cx];
    const OFFSET_DIAG1 = WB_OFFSET_DIAG1[cx];
    const OFFSET_DIAG2 = WB_OFFSET_DIAG2[cx];
  
    let to    = 0;
    let toObj = 0;
  
    to = fr + OFFSET_ORTH;
    if (!b[to]) {
      this.addQuiet(frMove | to);
      to += OFFSET_ORTH;
      if (!b[to])
        this.addQuiet(frMove | to | MOVE_EPMAKE_MASK);
    }
  
    to    = fr + OFFSET_DIAG1;
    toObj = b[to];
    if (CAN_CAPTURE[toObj])
      this.addNoisy(frMove | (toObj << MOVE_TOOBJ_BITS) | to);
  
    to    = fr + OFFSET_DIAG2;
    toObj = b[to];
    if (CAN_CAPTURE[toObj])
      this.addNoisy(frMove | (toObj << MOVE_TOOBJ_BITS) | to);
  }
  
  //}}}
  //{{{  genPromotePawnMoves
  
  nodeStruct.prototype.genPromotePawnMoves = function (frMove) {
  
    const l = this.cwtch;
    const b = l.board;
  
    const fr           = moveFromSq(frMove);
    const cx           = colourIndex(l.turn);
    const CAN_CAPTURE  = WB_CAN_CAPTURE[cx];
    const OFFSET_ORTH  = WB_OFFSET_ORTH[cx];
    const OFFSET_DIAG1 = WB_OFFSET_DIAG1[cx];
    const OFFSET_DIAG2 = WB_OFFSET_DIAG2[cx];
  
    let to    = 0;
    let toObj = 0;
  
    to = fr + OFFSET_ORTH;
    if (!b[to]) {
      this.addQuiet(frMove | to | QPRO);
      this.addQuiet(frMove | to | RPRO);
      this.addQuiet(frMove | to | BPRO);
      this.addQuiet(frMove | to | NPRO);
    }
  
    to    = fr + OFFSET_DIAG1;
    toObj = b[to];
    if (CAN_CAPTURE[toObj]) {
      this.addNoisy(frMove | (toObj << MOVE_TOOBJ_BITS) | to | QPRO);
      this.addNoisy(frMove | (toObj << MOVE_TOOBJ_BITS) | to | RPRO);
      this.addNoisy(frMove | (toObj << MOVE_TOOBJ_BITS) | to | BPRO);
      this.addNoisy(frMove | (toObj << MOVE_TOOBJ_BITS) | to | NPRO);
    }
  
    to    = fr + OFFSET_DIAG2;
    toObj = b[to];
    if (CAN_CAPTURE[toObj]) {
      this.addNoisy(frMove | (toObj << MOVE_TOOBJ_BITS) | to | QPRO);
      this.addNoisy(frMove | (toObj << MOVE_TOOBJ_BITS) | to | RPRO);
      this.addNoisy(frMove | (toObj << MOVE_TOOBJ_BITS) | to | BPRO);
      this.addNoisy(frMove | (toObj << MOVE_TOOBJ_BITS) | to | NPRO);
    }
  }
  
  //}}}
  
  //{{{  genKingMoves
  
  nodeStruct.prototype.genKingMoves = function (frMove) {
  
    const l = this.cwtch;
    const b = l.board;
  
    const fr          = moveFromSq(frMove);
    const cx          = colourIndex(l.turn);
    const cy          = colourIndexToggle(cx);
    const CAN_CAPTURE = WB_CAN_CAPTURE[cx];
    const theirKingSq = l.cxList[cy][LKING];
  
    let dir = 0;
  
    while (dir < 8) {
  
      const to = fr + KING_OFFSETS[dir++];
  
      if (!ADJACENT[Math.abs(to-theirKingSq)]) {
  
        const toObj = b[to];
  
        if (!toObj)
          this.addQuiet(frMove | to);
  
        else if (CAN_CAPTURE[toObj])
          this.addNoisy(frMove | (toObj << MOVE_TOOBJ_BITS) | to);
      }
    }
  }
  
  //}}}
  //{{{  genKnightMoves
  
  nodeStruct.prototype.genKnightMoves = function (frMove) {
  
    const l = this.cwtch;
    const b = l.board;
  
    const fr          = moveFromSq(frMove);
    const cx          = colourIndex(l.turn);
    const CAN_CAPTURE = WB_CAN_CAPTURE[cx];
  
    let dir = 0;
  
    while (dir < 8) {
  
      const to    = fr + KNIGHT_OFFSETS[dir++];
      const toObj = b[to];
  
      if (!toObj)
        this.addQuiet(frMove | to);
  
      else if (CAN_CAPTURE[toObj])
        this.addNoisy(frMove | (toObj << MOVE_TOOBJ_BITS) | to);
    }
  }
  
  //}}}
  //{{{  genSliderMoves
  
  nodeStruct.prototype.genSliderMoves = function (frMove) {
  
    const l = this.cwtch;
    const b = l.board;
  
    const fr          = moveFromSq(frMove);
    const frObj       = moveFromObj(frMove);
    const frPiece     = objPiece(frObj);
    const cx          = colourIndex(l.turn);
    const CAN_CAPTURE = WB_CAN_CAPTURE[cx];
    const OFFSETS     = SLIDER_OFFSETS[frPiece];
    const len         = OFFSETS.length;
  
    let dir = 0;
  
    while (dir < len) {
  
      const offset = OFFSETS[dir++];
  
      let to = fr + offset;
      while (!b[to]) {
        this.addQuiet(frMove | to);
        to += offset;
      }
  
      const toObj = b[to];
      if (CAN_CAPTURE[toObj])
        this.addNoisy(frMove | (toObj << MOVE_TOOBJ_BITS) | to);
    }
  }
  
  //}}}
  
  //{{{  cacheSave
  
  nodeStruct.prototype.cacheSave = function () {
  
    const l = this.cwtch;
  
    this.hHistoryLimit = l.hHistoryLimit;
    this.rights        = l.rights;
    this.ep            = l.ep;
    this.hLo[0]        = l.hLo[0];
    this.hHi[0]        = l.hHi[0];
  
    //for (let i=0; i < net_h1_size; i++)
      //this.net_h1_a[i] = l.net_h1_a[i];
  
    this.net_h1_a.set(l.net_h1_a);
  
  }
  
  //}}}
  //{{{  cacheUnSave
  
  nodeStruct.prototype.cacheUnsave = function () {
  
    const l = this.cwtch;
  
    l.hHistoryLimit = this.hHistoryLimit;
    l.rights        = this.rights;
    l.ep            = this.ep;
    l.hLo[0]        = this.hLo[0];
    l.hHi[0]        = this.hHi[0];
  
    //for (let i=0; i < net_h1_size; i++)
      //l.net_h1_a[i] = this.net_h1_a[i];
  
    l.net_h1_a.set(this.net_h1_a);
  
  }
  
  //}}}
  
  //}}}
  //{{{  cwtchStruct
  
  //{{{  struct
  
  function cwtchStruct () {
  
    this.quiet   = 0;
    this.ev      = 0;
  
    this.board   = new Uint8Array(144).fill(0);
    this.listPtr = new Uint8Array(144).fill(0);
    this.rights  = 0;
    this.ep      = 0;
    this.turn    = 0;
  
    this.wList = new Uint8Array(17);
    this.bList = new Uint8Array(17);
  
    this.objList = [null, this.wList, this.wList, this.wList, this.wList, this.wList, this.wList, null, null,
                          this.bList, this.bList, this.bList, this.bList, this.bList, this.bList];
  
    this.cxList = [this.wList, this.bList];
  
    this.wHistory = Array(6);
    this.bHistory = Array(6);
  
    this.objHistory = Array(15).fill(null);
  
    this.cxHistory = [this.wHistory, this.bHistory];
  
    this.bestMove    = 0;
    this.outOfTime   = 0;
    this.nodeCount   = 0;
    this.targetDepth = 0;
    this.targetNodes = 0;
    this.finishTime  = 0;
  
    this.nodes = Array(MAX_PLY).fill(null);
  
    this.hLo = new Uint32Array(1);
    this.hHi = new Uint32Array(1);
  
    this.hHistoryLo = new Uint32Array(MAX_PLY * 8);
    this.hHistoryHi = new Uint32Array(MAX_PLY * 8);
  
    this.hHistoryLimit = 0;
    this.hHistoryNext  = 0;
  
    this.hLoTurn   = new Uint32Array(9);
    this.hHiTurn   = new Uint32Array(9);
    this.hLoRights = new Uint32Array(16);
    this.hHiRights = new Uint32Array(16);
    this.hLoEP     = new Uint32Array(144);
    this.hHiEP     = new Uint32Array(144);
    this.hLoObj    = Array(16).fill(null);
    this.hHiObj    = Array(16).fill(null);
  
    this.ttLo    = new Uint32Array(TT_SIZE);
    this.ttHi    = new Uint32Array(TT_SIZE);
    this.ttFlags = new Uint8Array(TT_SIZE);
    this.ttScore = new Int16Array(TT_SIZE);
    this.ttDepth = new Uint8Array(TT_SIZE);
    this.ttMove  = new Uint32Array(TT_SIZE);
    this.ttEval  = new Int16Array(TT_SIZE);
  
    this.net_h1_a = new Float32Array(net_h1_size);
  }
  
  //}}}
  
  //{{{  initOnce
  
  cwtchStruct.prototype.initOnce = function () {
  
    //{{{  nodes
    
    for (let i=0; i < MAX_PLY; i++) {
      this.nodes[i] = new(nodeStruct);
      this.nodes[i].cwtch = this;
      this.nodes[i].ply = i + 1;
    }
    
    for (let i=0; i < MAX_PLY-1; i++) {
      this.nodes[i].child = this.nodes[i+1];
    }
    
    for (let i=1; i < MAX_PLY; i++) {
      this.nodes[i].parent = this.nodes[i-1];
    }
    
    for (let i=2; i < MAX_PLY; i++) {
      this.nodes[i].granny = this.nodes[i-2];
    }
    
    //}}}
    //{{{  hash
    
    for (let i=0; i < this.hLoTurn.length; i++) {
      this.hLoTurn[i] = twisterRand();
      this.hHiTurn[i] = twisterRand();
    }
    
    for (let i=0; i < this.hLoRights.length; i++) {
      this.hLoRights[i] = twisterRand();
      this.hHiRights[i] = twisterRand();
    }
    
    for (let i=0; i < this.hLoEP.length; i++) {
      this.hLoEP[i] = twisterRand();
      this.hHiEP[i] = twisterRand();
    }
    
    for (let i=1; i < this.hLoObj.length; i++) {
      this.hLoObj[i] = new Uint32Array(144);
      this.hHiObj[i] = new Uint32Array(144);
      for (let j=0; j < 144; j++) {
        this.hLoObj[i][j] = twisterRand();
        this.hHiObj[i][j] = twisterRand();
      }
    }
    this.hLoObj[0] = new Uint32Array(144);
    this.hHiObj[0] = new Uint32Array(144);
    for (let j=0; j < 144; j++) {
      this.hLoObj[0][j] = 0;
      this.hHiObj[0][j] = 0;
    }
    
    //}}}
    //{{{  IMAP
    
    for (var i=0; i < 16; i++) {
      IMAP[i] = Array(144).fill(0);
    }
    
    for (var i=0; i < 64; i++) {
      const j = B88[i];
      IMAP[W_PAWN][j]   = 0   + (PAWN-1)   * 64 + i;
      IMAP[W_KNIGHT][j] = 0   + (KNIGHT-1) * 64 + i;
      IMAP[W_BISHOP][j] = 0   + (BISHOP-1) * 64 + i;
      IMAP[W_ROOK][j]   = 0   + (ROOK-1)   * 64 + i;
      IMAP[W_QUEEN][j]  = 0   + (QUEEN-1)  * 64 + i;
      IMAP[W_KING][j]   = 0   + (KING-1)   * 64 + i;
      IMAP[B_PAWN][j]   = 384 + (PAWN-1)   * 64 + i;
      IMAP[B_KNIGHT][j] = 384 + (KNIGHT-1) * 64 + i;
      IMAP[B_BISHOP][j] = 384 + (BISHOP-1) * 64 + i;
      IMAP[B_ROOK][j]   = 384 + (ROOK-1)   * 64 + i;
      IMAP[B_QUEEN][j]  = 384 + (QUEEN-1)  * 64 + i;
      IMAP[B_KING][j]   = 384 + (KING-1)   * 64 + i;
    }
    
    //}}}
    //{{{  history
    
    for (let i=0; i < 6; i++) {
      this.wHistory[i] = new Uint32Array(144);
      this.bHistory[i] = new Uint32Array(144);
    }
    
    this.objHistory[W_PAWN]   = this.wHistory[W_PAWN-1];
    this.objHistory[W_KNIGHT] = this.wHistory[W_KNIGHT-1];
    this.objHistory[W_BISHOP] = this.wHistory[W_BISHOP-1];
    this.objHistory[W_ROOK]   = this.wHistory[W_ROOK-1];
    this.objHistory[W_QUEEN]  = this.wHistory[W_QUEEN-1];
    this.objHistory[W_KING]   = this.wHistory[W_KING-1];
    
    this.objHistory[B_PAWN]   = this.bHistory[W_PAWN-1];    // sic.
    this.objHistory[B_KNIGHT] = this.bHistory[W_KNIGHT-1];
    this.objHistory[B_BISHOP] = this.bHistory[W_BISHOP-1];
    this.objHistory[B_ROOK]   = this.bHistory[W_ROOK-1];
    this.objHistory[B_QUEEN]  = this.bHistory[W_QUEEN-1];
    this.objHistory[B_KING]   = this.bHistory[W_KING-1];
    
    //}}}
  
    //{{{  sanity check
    
    if (net_h1_w[0].length != net_h1_size)
      console.log('h1 w size', net_h1_w[0].length)
    
    if (net_h1_b.length != net_h1_size)
      console.log('h1 b size', net_h1_b.length)
    
    if (net_o_w.length != net_h1_size)
      console.log('o w size', net_o_w.length)
    
    //}}}
    //{{{  crude quantize
    /*
    for (let i=0; i < net_h1_w.length; i++) {
      for (let j=0; j < net_h1_size; j++) {
        net_h1_w[i][j] = myround(net_h1_w[i][j]);
      }
    }
    
    for (let j=0; j < net_h1_size; j++) {
      net_h1_b[j] = myround(net_h1_b[j]);
      net_o_w[j]  = myround(net_o_w[j]);
    }
    
    //net_o_b = myround(net_o_b);
    */
    
    //}}}
    //{{{  create Kaufman PST
    
    const v = [0,100,325,325,500,975];
    
    for (let i=0; i < 768; i++)
      net_h1_w[i].fill(0);
    
    net_h1_b.fill(0);
    net_o_w.fill(1);
    
    for (let i=PAWN; i<=QUEEN; i++) {
      for (let sq=0; sq < 64; sq++) {
        net_h1_w[inputIndex(i|WHITE,B88[sq])][0] = v[i];
        net_h1_w[inputIndex(i|BLACK,B88[sq])][0] = -v[i];
      }
    }
    
    //}}}
  }
  
  //}}}
  //{{{  uciExec
  
  //{{{  bench fens
  
  const bFens = [
    "r3k2r/2pb1ppp/2pp1q2/p7/1nP1B3/1P2P3/P2N1PPP/R2QK2R w KQkq a6 0 14",
    "4rrk1/2p1b1p1/p1p3q1/4p3/2P2n1p/1P1NR2P/PB3PP1/3R1QK1 b - - 2 24",
    "r3qbrk/6p1/2b2pPp/p3pP1Q/PpPpP2P/3P1B2/2PB3K/R5R1 w - - 16 42",
    "6k1/1R3p2/6p1/2Bp3p/3P2q1/P7/1P2rQ1K/5R2 b - - 4 44",
    "8/8/1p2k1p1/3p3p/1p1P1P1P/1P2PK2/8/8 w - - 3 54",
    "7r/2p3k1/1p1p1qp1/1P1Bp3/p1P2r1P/P7/4R3/Q4RK1 w - - 0 36",
    "r1bq1rk1/pp2b1pp/n1pp1n2/3P1p2/2P1p3/2N1P2N/PP2BPPP/R1BQ1RK1 b - - 2 10",
    "3r3k/2r4p/1p1b3q/p4P2/P2Pp3/1B2P3/3BQ1RP/6K1 w - - 3 87",
    "2r4r/1p4k1/1Pnp4/3Qb1pq/8/4BpPp/5P2/2RR1BK1 w - - 0 42",
    "4q1bk/6b1/7p/p1p4p/PNPpP2P/KN4P1/3Q4/4R3 b - - 0 37",
    "2q3r1/1r2pk2/pp3pp1/2pP3p/P1Pb1BbP/1P4Q1/R3NPP1/4R1K1 w - - 2 34",
    "1r2r2k/1b4q1/pp5p/2pPp1p1/P3Pn2/1P1B1Q1P/2R3P1/4BR1K b - - 1 37",
    "r3kbbr/pp1n1p1P/3ppnp1/q5N1/1P1pP3/P1N1B3/2P1QP2/R3KB1R b KQkq b3 0 17",
    "8/6pk/2b1Rp2/3r4/1R1B2PP/P5K1/8/2r5 b - - 16 42",
    "1r4k1/4ppb1/2n1b1qp/pB4p1/1n1BP1P1/7P/2PNQPK1/3RN3 w - - 8 29",
    "8/p2B4/PkP5/4p1pK/4Pb1p/5P2/8/8 w - - 29 68",
    "3r4/ppq1ppkp/4bnp1/2pN4/2P1P3/1P4P1/PQ3PBP/R4K2 b - - 2 20",
    "5rr1/4n2k/4q2P/P1P2n2/3B1p2/4pP2/2N1P3/1RR1K2Q w - - 1 49",
    "1r5k/2pq2p1/3p3p/p1pP4/4QP2/PP1R3P/6PK/8 w - - 1 51",
    "q5k1/5ppp/1r3bn1/1B6/P1N2P2/BQ2P1P1/5K1P/8 b - - 2 34",
    "r1b2k1r/5n2/p4q2/1ppn1Pp1/3pp1p1/NP2P3/P1PPBK2/1RQN2R1 w - - 0 22",
    "r1bqk2r/pppp1ppp/5n2/4b3/4P3/P1N5/1PP2PPP/R1BQKB1R w KQkq - 0 5",
    "r1bqr1k1/pp1p1ppp/2p5/8/3N1Q2/P2BB3/1PP2PPP/R3K2n b Q - 1 12",
    "r1bq2k1/p4r1p/1pp2pp1/3p4/1P1B3Q/P2B1N2/2P3PP/4R1K1 b - - 2 19",
    "r4qk1/6r1/1p4p1/2ppBbN1/1p5Q/P7/2P3PP/5RK1 w - - 2 25",
    "r7/6k1/1p6/2pp1p2/7Q/8/p1P2K1P/8 w - - 0 32",
    "r3k2r/ppp1pp1p/2nqb1pn/3p4/4P3/2PP4/PP1NBPPP/R2QK1NR w KQkq - 1 5",
    "3r1rk1/1pp1pn1p/p1n1q1p1/3p4/Q3P3/2P5/PP1NBPPP/4RRK1 w - - 0 12",
    "5rk1/1pp1pn1p/p3Brp1/8/1n6/5N2/PP3PPP/2R2RK1 w - - 2 20",
    "8/1p2pk1p/p1p1r1p1/3n4/8/5R2/PP3PPP/4R1K1 b - - 3 27",
    "8/4pk2/1p1r2p1/p1p4p/Pn5P/3R4/1P3PP1/4RK2 w - - 1 33",
    "8/5k2/1pnrp1p1/p1p4p/P6P/4R1PK/1P3P2/4R3 b - - 1 38",
    "8/8/1p1kp1p1/p1pr1n1p/P6P/1R4P1/1P3PK1/1R6 b - - 15 45",
    "8/8/1p1k2p1/p1prp2p/P2n3P/6P1/1P1R1PK1/4R3 b - - 5 49",
    "8/8/1p4p1/p1p2k1p/P2npP1P/4K1P1/1P6/3R4 w - - 6 54",
    "8/8/1p4p1/p1p2k1p/P2n1P1P/4K1P1/1P6/6R1 b - - 6 59",
    "8/5k2/1p4p1/p1pK3p/P2n1P1P/6P1/1P6/4R3 b - - 14 63",
    "8/1R6/1p1K1kp1/p6p/P1p2P1P/6P1/1Pn5/8 w - - 0 67",
    "1rb1rn1k/p3q1bp/2p3p1/2p1p3/2P1P2N/PP1RQNP1/1B3P2/4R1K1 b - - 4 23",
    "4rrk1/pp1n1pp1/q5p1/P1pP4/2n3P1/7P/1P3PB1/R1BQ1RK1 w - - 3 22",
    "r2qr1k1/pb1nbppp/1pn1p3/2ppP3/3P4/2PB1NN1/PP3PPP/R1BQR1K1 w - - 4 12",
    "2r2k2/8/4P1R1/1p6/8/P4K1N/7b/2B5 b - - 0 55",
    "6k1/5pp1/8/2bKP2P/2P5/p4PNb/B7/8 b - - 1 44",
    "2rqr1k1/1p3p1p/p2p2p1/P1nPb3/2B1P3/5P2/1PQ2NPP/R1R4K w - - 3 25",
    "r1b2rk1/p1q1ppbp/6p1/2Q5/8/4BP2/PPP3PP/2KR1B1R b - - 2 14",
    "6r1/5k2/p1b1r2p/1pB1p1p1/1Pp3PP/2P1R1K1/2P2P2/3R4 w - - 1 36",
    "rnbqkb1r/pppppppp/5n2/8/2PP4/8/PP2PPPP/RNBQKBNR b KQkq c3 0 2",
    "2rr2k1/1p4bp/p1q1p1p1/4Pp1n/2PB4/1PN3P1/P3Q2P/2RR2K1 w - f6 0 20",
    "3br1k1/p1pn3p/1p3n2/5pNq/2P1p3/1PN3PP/P2Q1PB1/4R1K1 w - - 0 23",
    "2r2b2/5p2/5k2/p1r1pP2/P2pB3/1P3P2/K1P3R1/7R w - - 23 93"
  ];
  
  //}}}
  //{{{  perft fens
  
  const pFens = [
    ['fen rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR             w KQkq -  0 1', 0, 1,         'cpw-pos1-0'],
    ['fen rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR             w KQkq -  0 1', 1, 20,        'cpw-pos1-1'],
    ['fen rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR             w KQkq -  0 1', 2, 400,       'cpw-pos1-2'],
    ['fen rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR             w KQkq -  0 1', 3, 8902,      'cpw-pos1-3'],
    ['fen rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR             w KQkq -  0 1', 4, 197281,    'cpw-pos1-4'],
    ['fen rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR             w KQkq -  0 1', 5, 4865609,   'cpw-pos1-5'],
    ['fen 4k3/8/8/8/8/8/R7/R3K2R                                  w Q    -  0 1', 3, 4729,      'castling-2'],
    ['fen 4k3/8/8/8/8/8/R7/R3K2R                                  w K    -  0 1', 3, 4686,      'castling-3'],
    ['fen 4k3/8/8/8/8/8/R7/R3K2R                                  w -    -  0 1', 3, 4522,      'castling-4'],
    ['fen r3k2r/r7/8/8/8/8/8/4K3                                  b kq   -  0 1', 3, 4893,      'castling-5'],
    ['fen r3k2r/r7/8/8/8/8/8/4K3                                  b q    -  0 1', 3, 4729,      'castling-6'],
    ['fen r3k2r/r7/8/8/8/8/8/4K3                                  b k    -  0 1', 3, 4686,      'castling-7'],
    ['fen r3k2r/r7/8/8/8/8/8/4K3                                  b -    -  0 1', 3, 4522,      'castling-8'],
    ['fen rnbqkb1r/pp1p1ppp/2p5/4P3/2B5/8/PPP1NnPP/RNBQK2R        w KQkq -  0 1', 1, 42,        'cpw-pos5-1'],
    ['fen rnbqkb1r/pp1p1ppp/2p5/4P3/2B5/8/PPP1NnPP/RNBQK2R        w KQkq -  0 1', 2, 1352,      'cpw-pos5-2'],
    ['fen rnbqkb1r/pp1p1ppp/2p5/4P3/2B5/8/PPP1NnPP/RNBQK2R        w KQkq -  0 1', 3, 53392,     'cpw-pos5-3'],
    ['fen r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq -  0 1', 1, 48,        'cpw-pos2-1'],
    ['fen r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq -  0 1', 2, 2039,      'cpw-pos2-2'],
    ['fen r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq -  0 1', 3, 97862,     'cpw-pos2-3'],
    ['fen 8/2p5/3p4/KP5r/1R3p1k/8/4P1P1/8                         w -    -  0 1', 5, 674624,    'cpw-pos3-5'],
    ['fen n1n5/PPPk4/8/8/8/8/4Kppp/5N1N                           b -    -  0 1', 1, 24,        'prom-1    '],
    ['fen 8/5bk1/8/2Pp4/8/1K6/8/8                                 w -    d6 0 1', 6, 824064,    'ccc-1     '],
    ['fen 8/8/1k6/8/2pP4/8/5BK1/8                                 b -    d3 0 1', 6, 824064,    'ccc-2     '],
    ['fen 8/8/1k6/2b5/2pP4/8/5K2/8                                b -    d3 0 1', 6, 1440467,   'ccc-3     '],
    ['fen 8/5k2/8/2Pp4/2B5/1K6/8/8                                w -    d6 0 1', 6, 1440467,   'ccc-4     '],
    ['fen 5k2/8/8/8/8/8/8/4K2R                                    w K    -  0 1', 6, 661072,    'ccc-5     '],
    ['fen 4k2r/8/8/8/8/8/8/5K2                                    b k    -  0 1', 6, 661072,    'ccc-6     '],
    ['fen 3k4/8/8/8/8/8/8/R3K3                                    w Q    -  0 1', 6, 803711,    'ccc-7     '],
    ['fen r3k3/8/8/8/8/8/8/3K4                                    b q    -  0 1', 6, 803711,    'ccc-8     '],
    ['fen r3k2r/1b4bq/8/8/8/8/7B/R3K2R                            w KQkq -  0 1', 4, 1274206,   'ccc-9     '],
    ['fen r3k2r/7b/8/8/8/8/1B4BQ/R3K2R                            b KQkq -  0 1', 4, 1274206,   'ccc-10    '],
    ['fen r3k2r/8/3Q4/8/8/5q2/8/R3K2R                             b KQkq -  0 1', 4, 1720476,   'ccc-11    '],
    ['fen r3k2r/8/5Q2/8/8/3q4/8/R3K2R                             w KQkq -  0 1', 4, 1720476,   'ccc-12    '],
    ['fen 2K2r2/4P3/8/8/8/8/8/3k4                                 w -    -  0 1', 6, 3821001,   'ccc-13    '],
    ['fen 3K4/8/8/8/8/8/4p3/2k2R2                                 b -    -  0 1', 6, 3821001,   'ccc-14    '],
    ['fen 8/8/1P2K3/8/2n5/1q6/8/5k2                               b -    -  0 1', 5, 1004658,   'ccc-15    '],
    ['fen 5K2/8/1Q6/2N5/8/1p2k3/8/8                               w -    -  0 1', 5, 1004658,   'ccc-16    '],
    ['fen 4k3/1P6/8/8/8/8/K7/8                                    w -    -  0 1', 6, 217342,    'ccc-17    '],
    ['fen 8/k7/8/8/8/8/1p6/4K3                                    b -    -  0 1', 6, 217342,    'ccc-18    '],
    ['fen 8/P1k5/K7/8/8/8/8/8                                     w -    -  0 1', 6, 92683,     'ccc-19    '],
    ['fen 8/8/8/8/8/k7/p1K5/8                                     b -    -  0 1', 6, 92683,     'ccc-20    '],
    ['fen K1k5/8/P7/8/8/8/8/8                                     w -    -  0 1', 6, 2217,      'ccc-21    '],
    ['fen 8/8/8/8/8/p7/8/k1K5                                     b -    -  0 1', 6, 2217,      'ccc-22    '],
    ['fen 8/k1P5/8/1K6/8/8/8/8                                    w -    -  0 1', 7, 567584,    'ccc-23    '],
    ['fen 8/8/8/8/1k6/8/K1p5/8                                    b -    -  0 1', 7, 567584,    'ccc-24    '],
    ['fen 8/8/2k5/5q2/5n2/8/5K2/8                                 b -    -  0 1', 4, 23527,     'ccc-25    '],
    ['fen 8/5k2/8/5N2/5Q2/2K5/8/8                                 w -    -  0 1', 4, 23527,     'ccc-26    '],
    ['fen rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR             w KQkq -  0 1', 6, 119060324, 'cpw-pos1-6'],
    ['fen 8/p7/8/1P6/K1k3p1/6P1/7P/8                              w -    -  0 1', 8, 8103790,   'jvm-7     '],
    ['fen n1n5/PPPk4/8/8/8/8/4Kppp/5N1N                           b -    -  0 1', 6, 71179139,  'jvm-8     '],
    ['fen r3k2r/p6p/8/B7/1pp1p3/3b4/P6P/R3K2R                     w KQkq -  0 1', 6, 77054993,  'jvm-9     '],
    ['fen 8/5p2/8/2k3P1/p3K3/8/1P6/8                              b -    -  0 1', 8, 64451405,  'jvm-11    '],
    ['fen r3k2r/pb3p2/5npp/n2p4/1p1PPB2/6P1/P2N1PBP/R3K2R         w KQkq -  0 1', 5, 29179893,  'jvm-12    '],
    ['fen 8/2p5/3p4/KP5r/1R3p1k/8/4P1P1/8                         w -    -  0 1', 7, 178633661, 'jvm-10    '],
    ['fen r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq -  0 1', 5, 193690690, 'jvm-6     '],
    ['fen 8/2pkp3/8/RP3P1Q/6B1/8/2PPP3/rb1K1n1r                   w -    -  0 1', 6, 181153194, 'ob1       '],
    ['fen rnbqkb1r/ppppp1pp/7n/4Pp2/8/8/PPPP1PPP/RNBQKBNR         w KQkq f6 0 1', 6, 244063299, 'jvm-5     '],
    ['fen 8/2ppp3/8/RP1k1P1Q/8/8/2PPP3/rb1K1n1r                   w -    -  0 1', 6, 205552081, 'ob2       '],
    ['fen 8/8/3q4/4r3/1b3n2/8/3PPP2/2k1K2R                        w K    -  0 1', 6, 207139531, 'ob3       '],
    ['fen 4r2r/RP1kP1P1/3P1P2/8/8/3ppp2/1p4p1/4K2R                b K    -  0 1', 6, 314516438, 'ob4       '],
    ['fen r3k2r/8/8/8/3pPp2/8/8/R3K1RR                            b KQkq e3 0 1', 6, 485647607, 'jvm-1     '],
    ['fen 8/3K4/2p5/p2b2r1/5k2/8/8/1q6                            b -    -  0 1', 7, 493407574, 'jvm-4     '],
    ['fen r3k2r/Pppp1ppp/1b3nbN/nP6/BBP1P3/q4N2/Pp1P2PP/R2Q1RK1   w kq   -  0 1', 6, 706045033, 'jvm-2     '],
    ['fen r6r/1P4P1/2kPPP2/8/8/3ppp2/1p4p1/R3K2R                  w KQ   -  0 1', 6, 975944981, 'ob5       ']
  ];
  
  //}}}
  
  cwtchStruct.prototype.uciExec = function (e) {
  
    const messageList = e.split('\n');
  
    for (let messageNum=0; messageNum < messageList.length; messageNum++ ) {
  
      let message = messageList[messageNum].replace(/(\r\n|\n|\r)/gm,"");
  
      message = message.trim();
      message = message.replace(/\s+/g,' ');
  
      const tokens  = message.split(' ');
      const command = tokens[0];
  
      if (!command)
        continue;
  
      switch (command) {
  
        case 'position':
        case 'p': {
          //{{{  position
          
          switch (tokens[1]) {
          
            case 'startpos':
            case 's':
          
              this.position('rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR', 'w', 'KQkq', '-');
              if (tokens[2] == 'moves') {
                for (let i=3; i < tokens.length; i++)
                  this.playMove(tokens[i]);
              }
              break;
          
            case 'fen':
            case 'f':
          
              this.position(tokens[2], tokens[3], tokens[4], tokens[5]);
              if (tokens[8] == 'moves') {
                for (let i=9; i < tokens.length; i++)
                  this.playMove(tokens[i]);
              }
              break;
          
            default:
          
              console.log(command, tokens[1], 'not implemented');
              break;
          }
          
          break;
          
          //}}}
        }
  
        case 'go':
        case 'g': {
          //{{{  go
          
          const slop = 1;
          
          let wTime     = 0;
          let bTime     = 0;
          let wInc      = 0;
          let bInc      = 0;
          let moveTime  = 0;
          let movesToGo = 0;
          let depth     = 0;
          let nodes     = 0;
          
          let i = 1;
          
          while (i < tokens.length) {
            switch (tokens[i]) {
              case 'depth':
              case 'd': {
                depth = parseInt(tokens[i+1]);
                i += 2;
                break;
              }
              case 'nodes': {
                nodes = parseInt(tokens[i+1]);
                i += 2;
                break;
              }
              case 'movestogo': {
                movesToGo = parseInt(tokens[i+1]);
                i += 2;
                break;
              }
              case 'movetime':
              case 'mt': {
                moveTime = parseInt(tokens[i+1]);
                i += 2;
                break;
              }
              case 'winc': {
                wInc = parseInt(tokens[i+1]);
                i += 2;
                break;
              }
              case 'binc': {
                bInc = parseInt(tokens[i+1]);
                i += 2;
                break;
              }
              case 'wtime': {
                wTime = parseInt(tokens[i+1]);
                i += 2;
                break;
              }
              case 'btime': {
                bTime = parseInt(tokens[i+1]);
                i += 2;
                break;
              }
              default: {
                console.log('unknown go token', tokens[i]);
                i++;
              }
            }
          }
          
          if (depth)
            this.targetDepth = depth;
          else
            this.targetDepth = MAX_PLY - 1;
          
          if (nodes)
            this.targetNodes = nodes;
          else
            this.targetNodes = 0;
          
          if (moveTime > 0)
            this.finishTime = Date.now() + moveTime + slop;
          
          else {
          
            if (movesToGo)
              movesToGo += 2;
            else
              movesToGo = 30;
          
            if (wTime && this.turn == WHITE)
              this.finishTime = Date.now() + 0.95 * (wTime/movesToGo + wInc) + slop;
            else if (bTime && this.turn == BLACK)
              this.finishTime = Date.now() + 0.95 * (bTime/movesToGo + bInc) + slop;
            else
              this.finishTime = 0;
          }
          
          this.go();
          
          break;
          
          //}}}
        }
  
        case 'uci': {
          //{{{  uci
          
          uciLog('id name cwtch 0');
          uciLog('id author Colin Jenkins');
          uciLog('uciok');
          
          break;
          
          //}}}
        }
  
        case 'isready': {
          //{{{  isready
          
          uciLog('readyok');
          
          break;
          
          //}}}
        }
  
        case 'stop': {
          //{{{  stop
          
          break;
          
          //}}}
        }
  
        case 'ucinewgame':
        case 'u': {
          //{{{  ucinewgame
          
          this.newGame();
          
          break;
          
          //}}}
        }
  
        case 'board':
        case 'b': {
          //{{{  board
          
          this.printBoard();
          
          break;
          
          //}}}
        }
  
        case 'draw':
        case 'd': {
          //{{{  draw
          
          console.log(this.isDraw());
          
          break;
          
          //}}}
        }
  
        case 'fen':
        case 'f': {
          //{{{  fen
          
          console.log(this.fen());
          
          break;
          
          //}}}
        }
  
        case 'hash':
        case 'h': {
          //{{{  hash
          
          console.log(this.hHi[0],this.hLo[0]);
          console.log(this.hHistoryLimit,this.hHistoryNext);
          
          break;
          
          //}}}
        }
  
        case 'eval':
        case 'e': {
          //{{{  eval
          
          const e1 = this.netSlowEval();
          const e2 = this.netFastEval();
          
          console.log('slow',e1,'fast',e2);
          
          break;
          
          //}}}
        }
  
        case 'net':
        case 'n': {
          //{{{  net info
          
          console.log('h1 size', net_h1_size);
          console.log('activation', net_activation);
          console.log('stretch', net_stretch);
          console.log('epochs', net_epochs);
          
          let maxWeight = -9999;
          let minWeight = 9999;
          
          for (let i=0; i < net_h1_w.length; i++) {
            for (let j=0; j < net_h1_size; j++) {
              const w = Math.abs(net_h1_w[i][j]);
              if (w < minWeight)
                minWeight = w;
              if (w > maxWeight)
                maxWeight = w;
            }
          }
          
          console.log('min h1 weight', minWeight);
          console.log('max h1 weight', maxWeight);
          
          maxWeight = -9999;
          minWeight = 9999;
          
          for (let j=0; j < net_h1_size; j++) {
            const w = Math.abs(net_o_w[j]);
            if (w < minWeight)
              minWeight = w;
            if (w > maxWeight)
              maxWeight = w;
          }
          
          console.log('min o weight', minWeight);
          console.log('max o weight', maxWeight);
          
          break;
          
          //}}}
        }
  
        case 'quit':
        case 'q': {
          //{{{  quit
          
          process.exit();
          
          break;
          
          //}}}
        }
  
        case 'perft': {
          //{{{  perft
          
          const depth  = parseInt(tokens[1]);
          const t      = Date.now();
          const pmoves = perft(depth);
          
          console.log(pmoves,'moves ',Date.now()-t,'ms');
          
          break;
          
          //}}}
        }
  
        case 'bench': {
          //{{{  bench
          
          this.quiet = 1;
          
          let nodes = 0;
          
          const t1 = Date.now();
          
          for (let i=0; i < bFens.length; i++) {
          
            process.stdout.write(i+'\r');
          
            const fen = bFens[i];
          
            this.uciExec('ucinewgame');
            this.uciExec('position fen ' + fen);
            this.uciExec('go depth 10');
          
            nodes += this.nodeCount;
          }
          
          const t2  = Date.now();
          const sec = (Math.round((t2-t1)/100)/10);
          
          console.log(sec,nodes);
          
          this.quiet = 0;
          
          break;
          
          //}}}
        }
  
        case 'et': {
          //{{{  eval tests
          
          for (let i=0; i < bFens.length; i++) {
          
            const fen = bFens[i];
          
            this.uciExec('ucinewgame');
            this.uciExec('position fen ' + fen);
            //this.uciExec('go depth 3')
            this.uciExec('e');
          
          }
          
          break;
          
          //}}}
        }
  
        case 'pt': {
          //{{{  perft tests
          
          let num = 0;
          
          if (tokens.length > 1)
            num = parseInt(tokens[1]);
          else
            num = pFens.length;
          
          let errs = 0;
          
          const t1 = Date.now();
          
          for (let i=0; i < num; i++) {
          
            const p = pFens[i];
          
            const fen   = p[0];
            const depth = p[1];
            const moves = p[2];
            const id    = p[3];
          
            this.uciExec('ucinewgame');
            this.uciExec('position ' + fen);
          
            const pmoves = this.perft(this.nodes[0], depth);
            const err    = pmoves - moves;
          
            errs += err;
          
            const t2  = Date.now();
            const sec = (''+Math.round((t2-t1)/100)/10).padEnd(6);
          
            console.log(sec,id,fen,depth,moves,pmoves,err,errs);
          }
          
          const t2  = Date.now();
          const sec = Math.round((t2-t1)/100)/10;
          
          console.log(sec, 'sec', errs, 'perft errors');
          
          break;
          
          //}}}
        }
  
        default:
          //{{{  ?
          
          console.log(command, '?');
          
          break;
          
          //}}}
      }
    }
  }
  
  //}}}
  
  //{{{  go
  //
  // https://github.com/AndyGrant/Ethereal/blob/master/src/search.c#L274
  //
  
  cwtchStruct.prototype.go = function () {
  
    this.bestMove  = 0;
    this.outOfTime = 0;
    this.nodeCount = 0;
  
    let score = 0;
    let alpha = 0;
    let beta  = 0;
    let delta = 0;
  
    for (let depth=1; depth <= this.targetDepth; depth++) {
  
      alpha = -MATE;
      beta  = MATE;
      delta = 10;
  
      if (depth >= 4) {
        alpha = Math.max(-MATE, score - delta);
        beta  = Math.min(MATE,  score + delta);
      }
  
      while (1) {
  
        score = this.search(this.nodes[0], alpha, beta, depth);
  
        if (this.outOfTime)
          break;
  
        if (score > alpha && score < beta) {
          uciLog('info', 'depth', depth, 'nodes', this.nodeCount, 'score', score, 'pv', formatMove(this.bestMove));
          break;
        }
  
        delta += delta / 2 | 0;
  
        if (score <= alpha) {
          uciLog('info', 'depth', depth, 'nodes', this.nodeCount, 'lowerbound', score);
          beta  = Math.min(MATE, ((alpha + beta) / 2) | 0);
          alpha = Math.max(-MATE, score - delta);
        }
        else if (score >= beta) {
          uciLog('info', 'depth', depth, 'nodes', this.nodeCount, 'upperbound', score);
          alpha = Math.max(-MATE, ((alpha + beta) / 2) | 0);
          beta  = Math.min(MATE,  score + delta);
        }
      }
  
      if (this.outOfTime)
        break;
    }
  
    uciLog('bestmove', formatMove(this.bestMove));
  }
  
  //}}}
  //{{{  search
  
  cwtchStruct.prototype.search = function (node, alpha, beta, depth) {
  
    //{{{  housekeeping
    
    node.child.no = 0;
    
    if (this.areWeOutOfTime() || !node.child) {
    
      this.outOfTime = 1;
    
      return 0;
    }
    
    //}}}
    //{{{  mate distance pruning
    
    /* hack
    
    if (!rootNode) {
    
      let matingValue = MATE - node.ply;
    
      if (matingValue < beta) {
         beta = matingValue;
         if (alpha >= matingValue)
           return matingValue;
      }
    
      matingValue = -MATE + node.ply;
    
      if (matingValue > alpha) {
         alpha = matingValue;
         if (beta <= matingValue)
           return matingValue;
      }
    }
    
    */
    
    //}}}
  
    const turn     = this.turn;
    const nextTurn = colourToggle(turn);
    const cx       = colourIndex(turn);
    const list     = this.cxList[cx];
    const inCheck  = this.isKingAttacked(list[LKING], nextTurn);
  
  
    if (depth <= 0 && !inCheck)
      return this.qsearch(node.child, alpha, beta, depth);
  
    this.nodeCount++;
  
    depth = Math.max(0, depth);
  
    const rootNode = !node.parent;
    const pvNode   = alpha != (beta - 1);
    const oAlpha   = alpha;
  
    if (!rootNode && this.isDraw())
      return 0;
  
    //{{{  check tt
    
    const ttIndex = this.ttIndex();
    
    node.ttMove = 0;
    
    if (ttIndex) {
    
      const ttFlags = this.ttFlags[ttIndex];
      const ttScore = this.ttScore[ttIndex];
    
      if (this.ttDepth[ttIndex] >= depth && (depth == 0 || !pvNode)) {
        if (ttFlags == TT_EXACT ||
           (ttFlags == TT_BETA  && ttScore >= beta) ||
           (ttFlags == TT_ALPHA && ttScore <= alpha)) {
          return ttScore;
        }
      }
    
      node.ttMove = this.ttMove[ttIndex];
    }
    
    //{{{  no tt move
    //
    // https://www.talkchess.com/forum3/viewtopic.php?f=7&t=74769
    //
    
    if (!node.ttMove && depth > 3)
      depth -= 1;
    
    //}}}
    
    //}}}
    //{{{  improving?
    
    let improv = 0;
    let ev     = 0
    
    if (ttIndex)
      ev = this.ttEval[ttIndex];
    else
      ev = this.netFastEval();
    
    node.ev = ev;
    
    if (node.granny && (ev - node.granny.ev) > 0)
      improv = 1; //optimize
    
    //}}}
    //{{{  alpha pruning
    
    if (!inCheck && !rootNode && !pvNode && depth <= 5 && (ev + 1000) < alpha) {
      return ev;
    }
    
    //}}}
    //{{{  beta pruning
    
    if (!inCheck && !rootNode && !pvNode && depth <= 5 && (ev - depth * 75) >= beta) {
      return ev;
    }
    
    //}}}
  
    node.cacheSave();
  
    let score = 0;
  
    //{{{  null move pruning
    
    if (!node.no && !inCheck && !rootNode && !pvNode && depth > 2 && ev > beta) {
    
      this.hashEP();
      this.ep = 0;
      this.hashEP();
    
      this.hashTurn();
      this.turn = colourToggle(this.turn);
      this.hashTurn();
    
      node.child.no = 1;
    
      score = -this.search(node.child, -beta, -beta+1, depth-4);
    
      node.cacheUnsave();
      this.turn = colourToggle(this.turn);
    
      if (this.outOfTime)
        return 0;
    
      if (score >= beta) {
        return beta;
      }
    }
    
    //}}}
  
    let bestScore = -MATE;
    let bestMove  = 0;
  
    let move   = 0;
    let played = 0;
    let quiets = 0;
  
    node.initMoveGen(ALL_MOVES, inCheck);
  
    while (move = node.getNextMove()) {
  
      //{{{  late move pruning
      
      if (node.stage == 5)
        quiets++;
      
      let cutoff = 4 + depth * depth;
      if (!improv)
        cutoff = cutoff / 2 | 0;
      
      if (played && quiets > cutoff && !inCheck && !rootNode && !pvNode && depth <= 8) {
        continue;
      }
      
      //}}}
      //{{{  futility pruning
      
      if (played && node.stage == 5 && !inCheck && !rootNode && !pvNode && depth <= 2 && (ev + depth * depth * 100) < alpha) {
        continue;
      }
      
      //}}}
  
      //{{{  make move
      
      if (!(move & MOVE_LEGAL_MASK)) {
      
        this.makeMoveBare(move);
      
        if (this.isKingAttacked(list[LKING], nextTurn)) {
          this.unmakeMoveBare(move);
          //node.cacheUnsave();
          continue;
        }
      
        this.unmakeMoveBare(move);
        this.makeMove(move);
      }
      
      else {
        this.makeMove(move);
      }
      
      //}}}
  
      played++;
  
      //{{{  reduce/extend?
      
      let R = 0;
      
      if (played > 4 && depth >= 3) {
      
        R = 1 + depth/5 + played/20 | 0;
      
        if (pvNode)
          R -= 1;
      
        if (inCheck) // hack && depth > 5
          R -= 1;
      
        if (node.stage < 5)
          R -= 1;
      
        if (moveIsNoisy(node.ttMove))
          R += 1;
      
        //if (moveIsNoisy(move))
          //R += 1;
      
        if (!improv)
          R += 1;
      
        Math.max(0,R);
      
      }
      
      //}}}
  
      if (pvNode) {
        if (played == 1) {
          score = -this.search(node.child, -beta, -alpha, depth-1);
        }
        else {
          score = -this.search(node.child, -alpha-1, -alpha, depth-1-R);
          if (!this.outOfTime && score > alpha) {
            score = -this.search(node.child, -beta, -alpha, depth-1);
          }
        }
      }
      else {
        score = -this.search(node.child, -beta, -alpha, depth-1-R);
        if (!this.outOfTime && R && score > alpha)
          score = -this.search(node.child, -beta, -alpha, depth-1);
      }
  
      this.unmakeMove(move);
      node.cacheUnsave();
  
      if (this.outOfTime)
        return 0;
  
      if (score > bestScore) {
        bestScore = score;
        bestMove  = move;
        if (bestScore > alpha) {
          alpha = bestScore;
          if (rootNode) {
            this.bestMove = bestMove;
          }
          if (bestScore >= beta) {
            if (moveIsQuiet(move))
              node.killer = moveClean(move);
            this.ttPut(TT_BETA, depth, bestScore, bestMove, ev);
            this.historyAdd(bestMove, depth*depth)
            return bestScore;
          }
        }
      }
    }
  
    if (!played)
      return inCheck ? -MATE + node.ply : 0;
  
    if (alpha > oAlpha)
      this.ttPut(TT_EXACT, depth, bestScore, bestMove, ev);
    else
      this.ttPut(TT_ALPHA, depth, bestScore, bestMove, ev);
  
    return bestScore;
  }
  
  //}}}
  //{{{  qsearch
  
  cwtchStruct.prototype.qsearch = function (node, alpha, beta, depth) {
  
    //{{{  housekeeping
    
    this.nodeCount++;
    
    if (this.areWeOutOfTime() || !node.child) {
    
      this.outOfTime = 1;
    
      return this.netFastEval();
    }
    
    //}}}
  
    //{{{  check TT
    
    node.ttMove = 0;
    
    const i = this.ttIndex();
    
    if (i) {
    
      const ttFlags = this.ttFlags[i];
      const ttScore = this.ttScore[i];
      const ttMove  = this.ttMove[i];
    
      if (ttFlags == TT_EXACT ||
         (ttFlags == TT_BETA  && ttScore >= beta) ||
         (ttFlags == TT_ALPHA && ttScore <= alpha)) {
        return ttScore;
      }
    
      if (moveIsNoisy(ttMove))
        node.ttMove = ttMove;
    
    }
    
    //}}}
  
    const e = this.netFastEval();
  
    if (e >= beta)
      return e;
  
    if (alpha < e)
      alpha = e;
  
    const turn     = this.turn;
    const nextTurn = colourToggle(turn);
    const cx       = colourIndex(turn);
    const list     = this.cxList[cx];
    const inCheck  = this.isKingAttacked(list[LKING], nextTurn);
  
    let move   = 0;
    let score  = 0;
    let played = 0;
  
    node.cacheSave();
    node.initMoveGen(NOISY_MOVES_ONLY, inCheck);
  
    while (move = node.getNextMove()) {
  
      if (moveIsQuiet(move))
        console.log('quiet q move', formatMove(move)); //hack
  
      //{{{  make move
      
      if (!(move & MOVE_LEGAL_MASK)) {
      
        this.makeMoveBare(move);
      
        if (this.isKingAttacked(list[LKING], nextTurn)) {
          this.unmakeMoveBare(move);
          //node.cacheUnsave();
          continue;
        }
      
        this.unmakeMoveBare(move);
        this.makeMove(move);
      }
      
      else {
        this.makeMove(move);
      }
      
      //}}}
  
      played++;
  
      score = -this.qsearch(node.child, -beta, -alpha, depth-1);
  
      this.unmakeMove(move);
      node.cacheUnsave();
  
      if (this.outOfTime)
        return alpha;
  
      if (score > alpha) {
        alpha = score;
        if (score >= beta) {
          return score;
        }
      }
    }
  
    return alpha;
  }
  
  //}}}
  //{{{  perft
  
  cwtchStruct.prototype.perft = function (node, depth) {
  
    if (depth == 0)
      return 1;
  
    const turn     = this.turn;
    const nextTurn = colourToggle(turn);
    const cx       = colourIndex(turn);
    const list     = this.cxList[cx];
    const inCheck  = this.isKingAttacked(list[LKING], nextTurn);
  
    let count = 0;
    let move  = 0;
  
    node.ttMove = 0;
  
    node.cacheSave();
    node.initMoveGen(ALL_MOVES, inCheck);
  
    while (move = node.getNextMove()) {
  
      //{{{  make move
      
      if (!(move & MOVE_LEGAL_MASK)) {
      
        this.makeMoveBare(move);
      
        if (this.isKingAttacked(list[LKING], nextTurn)) {
          this.unmakeMoveBare(move);
          //node.cacheUnsave();
          continue;
        }
      
        this.unmakeMoveBare(move);
        this.makeMove(move);
      }
      
      else {
        this.makeMove(move);
      }
      
      //}}}
  
      count += this.perft(node.child, depth-1);
  
      this.unmakeMove(move);
      node.cacheUnsave();
    }
  
    return count;
  }
  
  //}}}
  
  //{{{  position
  
  cwtchStruct.prototype.position = function (sb, st, sr, sep) {
  
    const b = this.board;
  
    this.listReset();
    this.netReset();
  
    b.fill(EDGE);
  
    for (let i=0; i < 64; i++)
      b[B88[i]] = 0;
  
    //{{{  board board
    
    let sq   = 0;
    let rank = 7;
    let file = 0;
    
    for (let i=0; i < sb.length; i++) {
    
      const ch   = sb.charAt(i);
      const sq88 = (7-rank) * 8 + file;
      const sq   = B88[sq88];
    
      switch (ch) {
        //{{{  1-8
        
        case '1':
          file += 1;
          break;
        case '2':
          file += 2;
          break;
        case '3':
          file += 3;
          break;
        case '4':
          file += 4;
          break;
        case '5':
          file += 5;
          break;
        case '6':
          file += 6;
          break;
        case '7':
          file += 7;
          break;
        case '8':
          break;
        
        //}}}
        //{{{  /
        
        case '/':
          rank--;
          file = 0;
          break;
        
        //}}}
        //{{{  white
        
        case 'P':
          b[sq] = W_PAWN;
          this.netAdd(W_PAWN, sq);
          this.listExtend(W_PAWN,sq);
          file++;
          break;
        case 'N':
          b[sq] = W_KNIGHT;
          this.netAdd(W_KNIGHT, sq);
          this.listExtend(W_KNIGHT,sq);
          file++;
          break;
        case 'B':
          b[sq] = W_BISHOP;
          this.netAdd(W_BISHOP, sq);
          this.listExtend(W_BISHOP,sq);
          file++;
          break;
        case 'R':
          b[sq] = W_ROOK;
          this.netAdd(W_ROOK, sq);
          this.listExtend(W_ROOK,sq);
          file++;
          break;
        case 'Q':
          b[sq] = W_QUEEN;
          this.netAdd(W_QUEEN, sq);
          this.listExtend(W_QUEEN,sq);
          file++;
          break;
        case 'K':
          b[sq] = W_KING;
          this.netAdd(W_KING, sq);
          this.listExtend(W_KING,sq);
          file++;
          break;
        
        //}}}
        //{{{  black
        
        case 'p':
          b[sq] = B_PAWN;
          this.netAdd(B_PAWN, sq);
          this.listExtend(B_PAWN,sq);
          file++;
          break;
        case 'n':
          b[sq] = B_KNIGHT;
          this.netAdd(B_KNIGHT, sq);
          this.listExtend(B_KNIGHT,sq);
          file++;
          break;
        case 'b':
          b[sq] = B_BISHOP;
          this.netAdd(B_BISHOP, sq);
          this.listExtend(B_BISHOP,sq);
          file++;
          break;
        case 'r':
          b[sq] = B_ROOK;
          this.netAdd(B_ROOK, sq);
          this.listExtend(B_ROOK,sq);
          file++;
          break;
        case 'q':
          b[sq] = B_QUEEN;
          this.netAdd(B_QUEEN, sq);
          this.listExtend(B_QUEEN,sq);
          file++;
          break;
        case 'k':
          b[sq] = B_KING;
          this.netAdd(B_KING, sq);
          this.listExtend(B_KING,sq);
          file++;
          break;
        
        //}}}
        default:
          console.log('unknown board char','|'+ch+'|');
      }
    }
    
    //}}}
    //{{{  board turn
    
    if (st == 'w')
      this.turn = WHITE;
    
    else if (st == 'b')
      this.turn = BLACK;
    
    else
      console.log('unknown board colour', st)
    
    //}}}
    //{{{  board rights
    
    this.rights = 0;
    
    for (let i=0; i < sr.length; i++) {
    
      const ch = sr.charAt(i);
    
      if (ch == 'K') this.rights |= WHITE_RIGHTS_KING;
      if (ch == 'Q') this.rights |= WHITE_RIGHTS_QUEEN;
      if (ch == 'k') this.rights |= BLACK_RIGHTS_KING;
      if (ch == 'q') this.rights |= BLACK_RIGHTS_QUEEN;
    }
    
    //}}}
    //{{{  board ep
    
    if (sep.length == 2)
      this.ep = COORDS.indexOf(sep)
    
    else
      this.ep = 0;
    
    //}}}
  
    this.hashCalc();
    this.historyReset();
  
  }
  
  //}}}
  //{{{  playMove
  
  cwtchStruct.prototype.playMove = function (uciMove) {
  
    const node = this.nodes[0];
  
    const turn     = this.turn;
    const nextTurn = colourToggle(turn);
    const cx       = colourIndex(turn);
    const inCheck  = this.isKingAttacked(this.cxList[cx][LKING], nextTurn);
  
    node.ttMove = 0;
  
    node.initMoveGen(ALL_MOVES,inCheck);
  
    let move = 0;
  
    while (move = node.getNextMove()) {
  
      if (formatMove(move) == uciMove) {
        this.makeMove(move);
        return;
      }
    }
  
    console.log('info cannot play uci move', uciMove);
    process.exit();
  }
  
  //}}}
  
  //{{{  netSlowEval
  
  cwtchStruct.prototype.netSlowEval = function () {
  
    const b  = this.board;
    const cx = colourMultiplier(this.turn)
  
    let h1 = Array(net_h1_size);
    for (let j=0; j < net_h1_size; j++) {
      h1[j] = net_h1_b[j];
    }
  
    for (let sq=0; sq<64; sq++) {
  
      const fr    = B88[sq];
      const frObj = b[fr];
  
      if (!frObj)
        continue;
  
      const index = inputIndex(frObj, fr);
  
      for (let i=0; i < net_h1_size; i++) {
        h1[i] += net_h1_w[index][i];
      }
    }
  
    let e = net_o_b;
  
    for (let i=0; i < net_h1_size; i++) {
      e += net_o_w[i] * relu(h1[i]);
    }
  
    return e * cx | 0;
  }
  
  //}}}
  //{{{  netFastEval
  
  cwtchStruct.prototype.netFastEval = function () {
  
    const cx = colourMultiplier(this.turn)
  
    let e = net_o_b;
  
    for (let i=0; i < net_h1_size; i++) {
      e += net_o_w[i] * relu(this.net_h1_a[i]);
    }
  
    return e * cx | 0;
  }
  
  //}}}
  
  //{{{  makeMove
  
  cwtchStruct.prototype.makeMove = function (move) {
  
    //this.listCheck('makemove in',move);
  
    const b = this.board;
  
    const fr     = moveFromSq(move);
    const to     = moveToSq(move);
    const frObj  = moveFromObj(move);
    const toObj  = moveToObj(move);
    const toList = this.objList[toObj];
    const frList = this.objList[frObj];
    const toPtr  = this.listPtr[to];
    const frPtr  = this.listPtr[fr];
  
    //this.netDel(frObj,fr);
    //this.netDel(toObj,to);
    //this.netAdd(frObj,to);
  
    if (toObj) {
  
      this.netCapture(frObj,fr,toObj,to);
  
      this.listPtr[to] = frPtr;
      frList[frPtr] = to;
  
      if (toList[LCOUNT] != toPtr) {
        toList[toPtr] = toList[toList[LCOUNT]];
        this.listPtr[toList[toPtr]] = toPtr
      }
      toList[LCOUNT] = toList[LCOUNT] - 1;
    }
    else {
      this.netMove(frObj,fr,to);
  
      this.listPtr[to] = frPtr;
      frList[frPtr] = to;
    }
  
    this.hashObj(frObj,fr);
    b[fr] = 0;
    //this.hashObj(0,fr);
  
    this.hashObj(toObj,to);
    b[to] = frObj;
    this.hashObj(frObj,to);
  
    this.hashEP();
    this.ep = 0;
    this.hashEP();
  
    if (move & MOVE_IKKY_MASK) {
      //{{{  ikky stuff
      
      const frCol = objColour(frObj);
      
      if (frCol == WHITE) {
        //{{{  white
        
        if (move & MOVE_EPMAKE_MASK) {
        
          this.hashEP();
          this.ep = to+12;
          this.hashEP();
        
        }
        
        else if (move & MOVE_EPTAKE_MASK) {
        
          this.netDel(B_PAWN,to+12);
        
          this.hashObj(B_PAWN,to+12);
          b[to+12] = 0;
          //this.hashObj(0,to+12);
        
          const ptr = this.listPtr[to+12];
          this.bList[ptr] = this.bList[this.bList[LCOUNT]];
          this.listPtr[this.bList[ptr]] = ptr
          this.bList[LCOUNT] = this.bList[LCOUNT] - 1;
        
        }
        
        else if (move & MOVE_PROMOTE_MASK) {
        
          const pp = movePromotePiece(move) | WHITE;
        
          //this.netDel(W_PAWN,to);
          //this.netAdd(pp,to);
        
          this.netPromote(W_PAWN,pp,to);
        
          this.hashObj(W_PAWN,to);
          b[to] = pp;
          this.hashObj(pp,to);
        
        }
        
        else if (moveEq(move,MOVE_E1G1)) {
        
          //this.netDel(W_ROOK,H1);
          //this.netAdd(W_ROOK,F1);
        
          this.netMove(W_ROOK,H1,F1);
        
          this.hashObj(W_ROOK,H1);
          b[H1] = 0;
          //this.hashObj(0,H1);
        
          //this.hashObj(0,F1);
          b[F1] = W_ROOK;
          this.hashObj(W_ROOK,F1);
        
          this.listPtr[F1] = this.listPtr[H1];
          this.wList[this.listPtr[H1]] = F1;
        
        }
        
        else if (moveEq(move,MOVE_E1C1)) {
        
          //this.netDel(W_ROOK,A1);
          //this.netAdd(W_ROOK,D1);
        
          this.netMove(W_ROOK,A1,D1);
        
          this.hashObj(W_ROOK,A1);
          b[A1] = 0;
          //this.hashObj(0,A1);
        
          //this.hashObj(0,D1);
          b[D1] = W_ROOK;
          this.hashObj(W_ROOK,D1);
        
          this.listPtr[D1] = this.listPtr[A1];
          this.wList[this.listPtr[A1]] = D1;
        
        }
        
        //}}}
      }
      
      else {
        //{{{  black
        
        if (move & MOVE_EPMAKE_MASK) {
        
          this.hashEP();
          this.ep = to-12;
          this.hashEP();
        
        }
        
        else if (move & MOVE_EPTAKE_MASK) {
        
          this.netDel(W_PAWN,to-12);
        
          this.hashObj(W_PAWN,to-12);
          b[to-12] = 0;
          //this.hashObj(0,to-12);
        
          const ptr = this.listPtr[to-12];
          this.wList[ptr] = this.wList[this.wList[LCOUNT]];
          this.listPtr[this.wList[ptr]] = ptr
          this.wList[LCOUNT] = this.wList[LCOUNT] - 1;
        
        }
        
        else if (move & MOVE_PROMOTE_MASK) {
        
          const pp = movePromotePiece(move) | BLACK;
        
          //this.netDel(B_PAWN,to);
          //this.netAdd(pp,to);
        
          this.netPromote(B_PAWN,pp,to);
        
          this.hashObj(B_PAWN,to);
          b[to] = pp;
          this.hashObj(pp,to);
        
        }
        
        else if (moveEq(move,MOVE_E8G8)) {
        
          //this.netDel(B_ROOK,H8);
          //this.netAdd(B_ROOK,F8);
        
          this.netMove(B_ROOK,H8,F8);
        
          this.hashObj(B_ROOK,H8);
          b[H8] = 0;
          //this.hashObj(0,H8);
        
          //this.hashObj(0,F8);
          b[F8] = B_ROOK;
          this.hashObj(B_ROOK,F8);
        
          this.listPtr[F8] = this.listPtr[H8];
          this.bList[this.listPtr[H8]] = F8;
        }
        
        else if (moveEq(move,MOVE_E8C8)) {
        
          //this.netDel(B_ROOK,A8);
          //this.netAdd(B_ROOK,D8);
        
          this.netMove(B_ROOK,A8,D8);
        
          this.hashObj(B_ROOK,A8);
          b[A8] = 0;
          //this.hashObj(0,A8);
        
          //this.hashObj(0,D8);
          b[D8] = B_ROOK;
          this.hashObj(B_ROOK,D8);
        
          this.listPtr[D8] = this.listPtr[A8];
          this.bList[this.listPtr[A8]] = D8;
        
        }
        
        //}}}
      }
      
      //}}}
    }
  
    this.hashTurn();
    this.turn = colourToggle(this.turn);
    this.hashTurn();
  
    this.hashRights();
    this.rights &= MASK_RIGHTS[fr] & MASK_RIGHTS[to];
    this.hashRights();
  
    this.hHistoryLo[this.hHistoryNext] = this.hLo[0];
    this.hHistoryHi[this.hHistoryNext] = this.hHi[0];
  
    if ((move & MOVE_REPRESET_MASK) || IS_P[frObj])
      this.hHistoryLimit = this.hHistoryNext;
  
    this.hHistoryNext++;
  
    //this.listCheck('makemove out',move);
  
  }
  
  //}}}
  //{{{  unmakeMove
  
  cwtchStruct.prototype.unmakeMove = function (move) {
  
    const b = this.board;
  
    const fr    = moveFromSq(move);
    const to    = moveToSq(move);
    const toObj = moveToObj(move);
    const frObj = moveFromObj(move);
    const toList = this.objList[toObj];
    const frList = this.objList[frObj];
    const toPtr  = this.listPtr[to];
    const frPtr  = this.listPtr[fr];
  
    //this.netDel(frObj,to);
    //this.netAdd(toObj,to);
    //this.netAdd(frObj,fr);
  
    b[fr] = frObj;
    b[to] = toObj;
  
    if (toObj) {
      this.listPtr[fr] = toPtr;
      frList[toPtr] = fr;
  
      toList[LCOUNT] = toList[0] + 1;
      toList[toList[LCOUNT]] = to;
      this.listPtr[to] = toList[LCOUNT];
    }
    else {
      this.listPtr[fr] = toPtr;
      frList[toPtr] = fr;
    }
  
    if (move & MOVE_IKKY_MASK) {
      //{{{  ikky stuff
      
      const frCol = objColour(frObj);
      
      if (frCol == WHITE) {
        //{{{  white
        
        if (move & MOVE_EPTAKE_MASK) {
        
          //this.netAdd(B_PAWN,to+12);
        
          b[to+12] = B_PAWN;
        
          this.bList[LCOUNT] = this.bList[LCOUNT] + 1;
          this.bList[this.bList[0]] = to+12;
          this.listPtr[to+12] = this.bList[LCOUNT];
        
        }
        
        //else if (move & MOVE_PROMOTE_MASK) {
        
          //this.netDel(movePromotePiece(move) | WHITE, to);
          //this.netAdd(W_PAWN,to);
        
        //}
        
        
        else if (moveEq(move,MOVE_E1G1)) {
        
          //this.netAdd(W_ROOK,H1);
          //this.netDel(W_ROOK,F1);
        
          b[H1] = W_ROOK;
          b[F1] = 0;
        
          this.listPtr[H1] = this.listPtr[F1];
          this.wList[this.listPtr[F1]] = H1;
        
        }
        
        else if (moveEq(move,MOVE_E1C1)) {
        
          //this.netAdd(W_ROOK,A1);
          //this.netDel(W_ROOK,D1);
        
          b[A1] = W_ROOK;
          b[D1] = 0;
        
          this.listPtr[A1] = this.listPtr[D1];
          this.wList[this.listPtr[D1]] = A1;
        
        }
        
        //}}}
      }
      
      else {
        //{{{  black
        
        if (move & MOVE_EPTAKE_MASK) {
        
          //this.netAdd(W_PAWN,to-12);
        
          b[to-12] = W_PAWN;
        
          this.wList[LCOUNT] = this.wList[LCOUNT] + 1;
          this.wList[this.wList[LCOUNT]] = to-12;
          this.listPtr[to-12] = this.wList[LCOUNT];
        
        }
        
        //else if (move & MOVE_PROMOTE_MASK) {
        
          //this.netDel(movePromotePiece(move) | BLACK, to);
          //this.netAdd(B_PAWN,to);
        
        //}
        
        else if (moveEq(move,MOVE_E8G8)) {
        
          //this.netAdd(B_ROOK,H8);
          //this.netDel(B_ROOK,F8);
        
          b[H8] = B_ROOK;
          b[F8] = 0;
        
          this.listPtr[H8] = this.listPtr[F8];
          this.bList[this.listPtr[F8]] = H8;
        
        }
        
        else if (moveEq(move,MOVE_E8C8)) {
        
          //this.netAdd(B_ROOK,A8);
          //this.netDel(B_ROOK,D8);
        
          b[A8] = B_ROOK;
          b[D8] = 0;
        
          this.listPtr[A8] = this.listPtr[D8];
          this.bList[this.listPtr[D8]] = A8;
        
        }
        
        //}}}
      }
      
      //}}}
    }
  
    this.turn = colourToggle(this.turn);
  
    this.hHistoryNext--;
  }
  
  //}}}
  
  //{{{  makeMoveBare
  
  cwtchStruct.prototype.makeMoveBare = function (move) {
  
    const b = this.board;
  
    const fr    = moveFromSq(move);
    const to    = moveToSq(move);
    const frObj = moveFromObj(move);
    //const toObj = moveToObj(move);
    const frList = this.objList[frObj];
    const frPtr  = this.listPtr[fr];
  
    b[fr] = 0;
    b[to] = frObj;
  
    frList[frPtr] = to;
  
    if (move & MOVE_IKKY_MASK) {
      //{{{  ikky stuff
      
      const frCol = objColour(frObj);
      
      if (frCol == WHITE) {
        //{{{  white
        
        if (move & MOVE_EPTAKE_MASK) {
        
          b[to+12] = 0;
        
        }
        
        else if (move & MOVE_PROMOTE_MASK) {
        
          b[to] = movePromotePiece(move) | WHITE;
        }
        
        else if (moveEq(move,MOVE_E1G1)) {
        
          b[H1] = 0;
          b[F1] = W_ROOK;
        
        }
        
        else if (moveEq(move,MOVE_E1C1)) {
        
          b[A1] = 0;
          b[D1] = W_ROOK;
        
        }
        
        //}}}
      }
      
      else {
        //{{{  black
        
        if (move & MOVE_EPTAKE_MASK) {
        
          b[to-12] = 0;
        
        }
        
        else if (move & MOVE_PROMOTE_MASK) {
        
          b[to] = movePromotePiece(move) | BLACK;
        
        }
        
        else if (moveEq(move,MOVE_E8G8)) {
        
          b[H8] = 0;
          b[F8] = B_ROOK;
        
        }
        
        else if (moveEq(move,MOVE_E8C8)) {
        
          b[A8] = 0;
          b[D8] = B_ROOK;
        
        }
        
        //}}}
      }
      
      //}}}
    }
  }
  
  //}}}
  //{{{  unmakeMoveBare
  
  cwtchStruct.prototype.unmakeMoveBare = function (move) {
  
    const b = this.board;
  
    const fr     = moveFromSq(move);
    const to     = moveToSq(move);
    const toObj  = moveToObj(move);
    const frObj  = moveFromObj(move);
    const frList = this.objList[frObj];
    const frPtr  = this.listPtr[fr];
  
    b[fr] = frObj;
    b[to] = toObj;
  
    frList[frPtr] = fr;
  
    if (move & MOVE_IKKY_MASK) {
      //{{{  ikky stuff
      
      const frCol = objColour(frObj);
      
      if (frCol == WHITE) {
        //{{{  white
        
        if (move & MOVE_EPTAKE_MASK) {
        
          b[to+12] = B_PAWN;
        
        }
        
        else if (moveEq(move,MOVE_E1G1)) {
        
          b[H1] = W_ROOK;
          b[F1] = 0;
        
        }
        
        else if (moveEq(move,MOVE_E1C1)) {
        
          b[A1] = W_ROOK;
          b[D1] = 0;
        
        }
        
        //}}}
      }
      
      else {
        //{{{  black
        
        if (move & MOVE_EPTAKE_MASK) {
        
          b[to-12] = W_PAWN;
        
        }
        
        else if (moveEq(move,MOVE_E8G8)) {
        
          b[H8] = B_ROOK;
          b[F8] = 0;
        
        }
        
        else if (moveEq(move,MOVE_E8C8)) {
        
          b[A8] = B_ROOK;
          b[D8] = 0;
        
        }
        
        //}}}
      }
      
      //}}}
    }
  }
  
  //}}}
  
  //{{{  listReset
  
  cwtchStruct.prototype.listReset = function () {
  
    this.listPtr.fill(0);
  
    this.wList[LCOUNT] = 1;
    this.bList[LCOUNT] = 1;
  
  }
  
  //}}}
  //{{{  listCheck
  
  cwtchStruct.prototype.listCheck = function (s,move) {
  
    const m = formatMove(move);
  
    const wNum = this.wList[LCOUNT];
    for (let i=1; i <= wNum; i++) {
      const sq = this.wList[i];
      if (this.listPtr[sq] != i) {
        console.log('w',s,m,'wnum',wNum,'i',i,'sq',sq,'ptr',this.listPtr[sq]);
        this.printBoard();
        process.exit();
      }
    }
  
    const bNum = this.bList[LCOUNT];
    for (let i=1; i <= bNum; i++) {
      const sq = this.bList[i];
      if (this.listPtr[sq] != i) {
        console.log('b',s,m,'bnum',bNum,'i',i,'sq',sq,'ptr',this.listPtr[sq]);
        this.printBoard();
        process.exit();
      }
    }
  }
  
  //}}}
  //{{{  listExtend
  
  cwtchStruct.prototype.listExtend = function (obj, sq) {
  
    const list = this.objList[obj];
    const num  = list[LCOUNT] + 1;
  
    if (obj == W_KING || obj == B_KING) {
      list[LKING] = sq;
      this.listPtr[sq] = 1;
    }
    else {
      list[num] = sq;
      this.listPtr[sq] = num;
      list[LCOUNT] = num;
    }
  }
  
  //}}}
  
  //{{{  historyReset
  
  cwtchStruct.prototype.historyReset = function () {
  
    for (let i=0; i < 6; i++) {
      this.wHistory[i].fill(0);
      this.bHistory[i].fill(0);
    }
  
  }
  
  //}}}
  //{{{  historyAdd
  
  cwtchStruct.prototype.historyAdd = function (move, v) {
  
    if (moveIsNoisy(move))
      return;
  
    const frObj = moveFromObj(move);
    const to    = moveToSq(move);
    const h     = this.objHistory[frObj];
  
    h[to] = h[to] + v;
  
  }
  
  //}}}
  
  //{{{  netReset
  
  cwtchStruct.prototype.netReset = function () {
  
    //for (let h=0; h < net_h1_size; h++)
      //this.net_h1_a[h] = net_h1_b[h];
  
    this.net_h1_a.set(net_h1_b);
  
  }
  
  //}}}
  //{{{  netAdd
  
  cwtchStruct.prototype.netAdd = function (obj, sq) {
  
    //if (!obj) {
      //console.log('netaddnull');
      //return;
    //}
  
    const i   = inputIndex(obj, sq);
    const h1i = net_h1_w[i];
  
    for (let h=0; h < net_h1_size; h++)
      this.net_h1_a[h] += h1i[h];
  }
  
  //}}}
  //{{{  netDel
  
  cwtchStruct.prototype.netDel = function (obj, sq) {
  
    //if (!obj) {
      //console.log('netdelnull');
      //return;
    //}
  
    const i   = inputIndex(obj, sq);
    const h1i = net_h1_w[i];
  
    for (let h=0; h < net_h1_size; h++)
      this.net_h1_a[h] -= h1i[h];
  }
  
  //}}}
  //{{{  netMove
  
  cwtchStruct.prototype.netMove = function (frObj,fr,to) {
  
    const i1 = inputIndex(frObj, fr);
    const i2 = inputIndex(frObj, to);
  
    const h1 = net_h1_w[i1];
    const h2 = net_h1_w[i2];
  
    for (let h=0; h < net_h1_size; h++) {
      this.net_h1_a[h] += h2[h] - h1[h];
    }
  }
  
  //}}}
  //{{{  netCapture
  
  cwtchStruct.prototype.netCapture = function (frObj,fr,toObj,to) {
  
    const i1 = inputIndex(frObj, fr);
    const i2 = inputIndex(toObj, to);
    const i3 = inputIndex(frObj, to);
  
    const h1 = net_h1_w[i1];
    const h2 = net_h1_w[i2];
    const h3 = net_h1_w[i3];
  
    for (let h=0; h < net_h1_size; h++) {
      this.net_h1_a[h] += h3[h] - h2[h] - h1[h];
    }
  }
  
  //}}}
  //{{{  netPromote
  
  cwtchStruct.prototype.netPromote = function (pawnObj,promoteObj,sq) {
  
    const i1 = inputIndex(pawnObj,    sq);
    const i2 = inputIndex(promoteObj, sq);
  
    const h1 = net_h1_w[i1];
    const h2 = net_h1_w[i2];
  
    for (let h=0; h < net_h1_size; h++) {
      this.net_h1_a[h] += h2[h] - h1[h];
    }
  }
  
  //}}}
  
  //{{{  ttInit
  
  cwtchStruct.prototype.ttInit = function () {
    this.ttFlags.fill(0);
  }
  
  //}}}
  //{{{  ttPut
  
  cwtchStruct.prototype.ttPut = function (flags, depth, score, move, ev) {
  
    const i = this.hLo[0] & TT_MASK;
  
    this.ttLo[i] = this.hLo[0];
    this.ttHi[i] = this.hHi[0];
  
    this.ttFlags[i] = flags;
    this.ttDepth[i] = depth;
    this.ttScore[i] = score;
    this.ttMove[i]  = move;
    this.ttEval[i]  = ev;
  }
  
  //}}}
  //{{{  ttIndex
  
  cwtchStruct.prototype.ttIndex = function () {
  
    const i = this.hLo[0] & TT_MASK;
  
    if (this.ttFlags[i] && this.hashEq(this.ttLo[i],this.ttHi[i]))
      return i;
    else
      return 0;
  }
  
  //}}}
  //{{{  ttValidate
  
  cwtchStruct.prototype.ttValidate = function (move) {
  
    const b = this.board;
  
    const frObj = moveFromObj(move);
    const fr    = moveFromSq(move);
  
    if (b[fr] != frObj)
      return false;
  
    const toObj = moveToObj(move);
    const to    = moveToSq(move);
  
    if (b[to] != toObj)
      return false;
  
    return true;
  }
  
  //}}}
  
  //{{{  hashEq
  
  cwtchStruct.prototype.hashEq = function (lo, hi) {
  
    return this.hLo[0] == lo && this.hHi[0] == hi;
  
  }
  
  //}}}
  //{{{  hashCalc
  
  cwtchStruct.prototype.hashCalc = function () {
  
    this.hLo[0] = 0;
    this.hHi[0] = 0;
  
    this.hHistoryLimit = 0;
    this.hHistoryNext  = 0;
  
    for (let i=0; i < 64; i++) {
      let sq  = B88[i];
      let obj = this.board[sq];
      this.hashObj(obj,sq);
    }
  
    this.hashTurn();
    this.hashRights();
    this.hashEP();
  
    this.hHistoryLo[0] = this.hLo[0];
    this.hHistoryHi[0] = this.hHi[0];
  
    this.hHistoryNext++;
  }
  
  //}}}
  //{{{  hashTurn
  
  cwtchStruct.prototype.hashTurn = function () {
    this.hLo[0] ^= this.hLoTurn[this.turn];
    this.hHi[0] ^= this.hHiTurn[this.turn];
  }
  
  //}}}
  //{{{  hashRights
  
  cwtchStruct.prototype.hashRights = function () {
    this.hLo[0] ^= this.hLoRights[this.rights];
    this.hHi[0] ^= this.hHiRights[this.rights];
  }
  
  //}}}
  //{{{  hashEP
  
  cwtchStruct.prototype.hashEP = function () {
    this.hLo[0] ^= this.hLoEP[this.ep];
    this.hHi[0] ^= this.hHiEP[this.ep];
  }
  
  //}}}
  //{{{  hashObj
  
  cwtchStruct.prototype.hashObj = function (obj, sq) {
    this.hLo[0] ^= this.hLoObj[obj][sq];
    this.hHi[0] ^= this.hHiObj[obj][sq];
  }
  
  //}}}
  
  //{{{  quickSee
  
  cwtchStruct.prototype.quickSee = function (move) {
  /*
    if (move & MOVE_IKKY_MASK)
      return 0;
  
    const toObj = moveToObj(move);
  
    if (!toObj)
      return true;
  
    const frObj   = moveFromObj(move);
    const toPiece = objPiece(toObj);
    const frPiece = objPiece(frObj);
  
    if (frPiece <= toPiece)
      return true;
  
    const to = moveToSq(move);
  
    return !isSqAttacked(to, colourToggle(turn));
  */
  }
  
  
  //}}}
  //{{{  uciArgv
  
  cwtchStruct.prototype.uciArgv = function () {
  
    if (process.argv.length > 2) {
      for (let i=2; i < process.argv.length; i++)
        this.uciExec(process.argv[i]);
    }
  
  }
  
  //}}}
  //{{{  newGame
  
  cwtchStruct.prototype.newGame = function () {
  
    this.ttInit();
  
    for (let i=0; i < MAX_PLY; i++) {
      this.nodes[i].killer = 0;
    }
  
  }
  
  //}}}
  //{{{  areWeOutOfTime
  
  cwtchStruct.prototype.areWeOutOfTime = function () {
  
    return this.bestMove && ((this.finishTime  && (Date.now()     >  this.finishTime)) ||
                             (this.targetNodes && (this.nodeCount >= this.targetNodes)));
  
  }
  
  //}}}
  //{{{  printBoard
  
  cwtchStruct.prototype.printBoard = function () {
  
    const b = this.board;
  
    for (let rank=7; rank >= 0; rank--) {
      process.stdout.write((rank+1)+' ');
      for (let file=0; file <= 7; file++) {
        process.stdout.write(OBJ_CHAR[b[B88[(7-rank)*8+file]]] + ' ');
      }
      process.stdout.write('\r\n');
    }
  
    console.log('  a b c d e f g h');
  
    if (this.turn == WHITE)
      process.stdout.write('w');
    else
      process.stdout.write('b');
    process.stdout.write(' ');
  
    if (this.rights) {
      if (this.rights & WHITE_RIGHTS_KING)
        process.stdout.write('K');
     if (this.rights & WHITE_RIGHTS_QUEEN)
        process.stdout.write('Q');
     if (this.rights & BLACK_RIGHTS_KING)
        process.stdout.write('k');
     if (this.rights & BLACK_RIGHTS_QUEEN)
        process.stdout.write('q');
      process.stdout.write(' ');
    }
    else
      process.stdout.write('- ');
  
    if (this.ep)
      process.stdout.write(COORDS[this.ep]);
    else
      process.stdout.write('-');
  
    console.log();
  
    console.log(this.fen());
    console.log('hash',this.hHi[0],this.hLo[0]);
  
    console.log('w list',this.wList.toString());
    console.log('b list',this.bList.toString());
  }
  
  //}}}
  //{{{  fen
  
  cwtchStruct.prototype.fen = function () {
  
    let fen = '';
    let n   = 0;
  
    for (let i=0; i < 8; i++) {
      for (let j=0; j < 8; j++) {
        const sq  = B88[i*8 + j]
        const obj = this.board[sq];
        if (obj == 0)
          n++;
        else {
          if (n) {
            fen += '' + n;
            n = 0;
          }
          fen += OBJ_CHAR[obj];
        }
      }
      if (n) {
        fen += '' + n;
        n = 0;
      }
      if (i < 7)
        fen += '/';
    }
  
    if (this.turn == WHITE)
      fen += ' w';
    else
      fen += ' b';
  
    if (this.rights) {
      fen += ' ';
      if (this.rights & WHITE_RIGHTS_KING)
        fen += 'K';
      if (this.rights & WHITE_RIGHTS_QUEEN)
        fen += 'Q';
      if (this.rights & BLACK_RIGHTS_KING)
        fen += 'k';
      if (this.rights & BLACK_RIGHTS_QUEEN)
        fen += 'Q';
    }
    else
      fen += ' -';
  
    if (this.ep)
      fen += ' ' + COORDS[this.ep];
    else
      fen += ' -';
  
    fen += ' 0 1';
  
    return fen;
  }
  
  //}}}
  //{{{  isKingAttacked
  
  cwtchStruct.prototype.isKingAttacked = function (to, byCol) {
  
    const b = this.board;
  
    const cx = colourIndex(byCol);
  
    const OFFSET_DIAG1 = -WB_OFFSET_DIAG1[cx];
    const OFFSET_DIAG2 = -WB_OFFSET_DIAG2[cx];
    const RQ           = WB_RQ[cx];
    const BQ           = WB_BQ[cx];
    const BY_PAWN      = WB_PAWN[cx];
    const N            = KNIGHT | byCol;
  
    let fr = 0;
  
    //{{{  pawns
    
    if (b[to+OFFSET_DIAG1] == BY_PAWN || b[to+OFFSET_DIAG2] == BY_PAWN)
      return 1;
    
    //}}}
    //{{{  knights
    
    if ((b[to + -10] == N) ||
        (b[to + -23] == N) ||
        (b[to + -14] == N) ||
        (b[to + -25] == N) ||
        (b[to +  10] == N) ||
        (b[to +  23] == N) ||
        (b[to +  14] == N) ||
        (b[to +  25] == N)) return 1;
    
    //}}}
    //{{{  queen, bishop, rook
    
    fr = to + 1;  while (!b[fr]) fr += 1;  if (RQ[b[fr]]) return 1;
    fr = to - 1;  while (!b[fr]) fr -= 1;  if (RQ[b[fr]]) return 1;
    fr = to + 12; while (!b[fr]) fr += 12; if (RQ[b[fr]]) return 1;
    fr = to - 12; while (!b[fr]) fr -= 12; if (RQ[b[fr]]) return 1;
    
    fr = to + 11; while (!b[fr]) fr += 11; if (BQ[b[fr]]) return 1;
    fr = to - 11; while (!b[fr]) fr -= 11; if (BQ[b[fr]]) return 1;
    fr = to + 13; while (!b[fr]) fr += 13; if (BQ[b[fr]]) return 1;
    fr = to - 13; while (!b[fr]) fr -= 13; if (BQ[b[fr]]) return 1;
    
    //}}}
  
    return 0;
  }
  
  //}}}
  //{{{  isDraw
  
  cwtchStruct.prototype.isDraw = function () {
  
    if (this.hHistoryNext - this.hHistoryLimit > 100)
      return true;
  
    let count = 0;
  
    for (let i=this.hHistoryNext-5; i >= this.hHistoryLimit; i -= 2) {
  
      if (this.hashEq(this.hHistoryLo[i],this.hHistoryHi[i])) {
        count++;
        if (count == 2) {
          return true;
        }
      }
    }
  
    return false;
  }
  
  //}}}
  
  //}}}

  //{{{  weights
  const net_h1_size    = 1;
  const net_activation = "relu";
  const net_stretch    = 100;
  const net_batch_size = 500;
  const net_epochs     = 0;
  //{{{  weights
  const net_h1_w = Array(768);
  net_h1_w[0] = new Float32Array([-0.009828963316977024]);
  net_h1_w[1] = new Float32Array([-0.0024952625390142202]);
  net_h1_w[2] = new Float32Array([0.028741784393787384]);
  net_h1_w[3] = new Float32Array([0.015362855046987534]);
  net_h1_w[4] = new Float32Array([0.015070850029587746]);
  net_h1_w[5] = new Float32Array([-0.02210223115980625]);
  net_h1_w[6] = new Float32Array([-0.014213137328624725]);
  net_h1_w[7] = new Float32Array([-0.023099271580576897]);
  net_h1_w[8] = new Float32Array([-0.00022503134096041322]);
  net_h1_w[9] = new Float32Array([0.03608737513422966]);
  net_h1_w[10] = new Float32Array([-0.025960497558116913]);
  net_h1_w[11] = new Float32Array([0.0028298927936702967]);
  net_h1_w[12] = new Float32Array([0.030510447919368744]);
  net_h1_w[13] = new Float32Array([-0.03426843136548996]);
  net_h1_w[14] = new Float32Array([0.04607120156288147]);
  net_h1_w[15] = new Float32Array([-0.03366714343428612]);
  net_h1_w[16] = new Float32Array([-0.03385185822844505]);
  net_h1_w[17] = new Float32Array([-0.025324290618300438]);
  net_h1_w[18] = new Float32Array([0.04482123255729675]);
  net_h1_w[19] = new Float32Array([0.038954973220825195]);
  net_h1_w[20] = new Float32Array([-0.02298911288380623]);
  net_h1_w[21] = new Float32Array([0.02495526522397995]);
  net_h1_w[22] = new Float32Array([-0.03535785898566246]);
  net_h1_w[23] = new Float32Array([0.030282551422715187]);
  net_h1_w[24] = new Float32Array([-0.007639628369361162]);
  net_h1_w[25] = new Float32Array([0.009867989458143711]);
  net_h1_w[26] = new Float32Array([0.030181311070919037]);
  net_h1_w[27] = new Float32Array([0.02252689003944397]);
  net_h1_w[28] = new Float32Array([-0.027288172394037247]);
  net_h1_w[29] = new Float32Array([0.023740587756037712]);
  net_h1_w[30] = new Float32Array([0.019142882898449898]);
  net_h1_w[31] = new Float32Array([0.04949318245053291]);
  net_h1_w[32] = new Float32Array([0.050950292497873306]);
  net_h1_w[33] = new Float32Array([0.035458363592624664]);
  net_h1_w[34] = new Float32Array([-0.00965903140604496]);
  net_h1_w[35] = new Float32Array([0.046077750623226166]);
  net_h1_w[36] = new Float32Array([0.04666199907660484]);
  net_h1_w[37] = new Float32Array([-0.02242327481508255]);
  net_h1_w[38] = new Float32Array([-0.0026301490142941475]);
  net_h1_w[39] = new Float32Array([0.007529801223427057]);
  net_h1_w[40] = new Float32Array([0.045953646302223206]);
  net_h1_w[41] = new Float32Array([-0.0005160876316949725]);
  net_h1_w[42] = new Float32Array([-0.03910920023918152]);
  net_h1_w[43] = new Float32Array([0.02800195850431919]);
  net_h1_w[44] = new Float32Array([0.02493141032755375]);
  net_h1_w[45] = new Float32Array([0.007513087242841721]);
  net_h1_w[46] = new Float32Array([0.04022478312253952]);
  net_h1_w[47] = new Float32Array([-0.022104214876890182]);
  net_h1_w[48] = new Float32Array([0.008956577628850937]);
  net_h1_w[49] = new Float32Array([-0.03386084735393524]);
  net_h1_w[50] = new Float32Array([0.021279823035001755]);
  net_h1_w[51] = new Float32Array([-0.04586340859532356]);
  net_h1_w[52] = new Float32Array([-0.03480130806565285]);
  net_h1_w[53] = new Float32Array([0.007427077740430832]);
  net_h1_w[54] = new Float32Array([0.04638536274433136]);
  net_h1_w[55] = new Float32Array([0.024213820695877075]);
  net_h1_w[56] = new Float32Array([-0.014121480286121368]);
  net_h1_w[57] = new Float32Array([0.015961194410920143]);
  net_h1_w[58] = new Float32Array([0.039799850434064865]);
  net_h1_w[59] = new Float32Array([0.042023222893476486]);
  net_h1_w[60] = new Float32Array([0.05086449906229973]);
  net_h1_w[61] = new Float32Array([0.031142430379986763]);
  net_h1_w[62] = new Float32Array([-0.012701836414635181]);
  net_h1_w[63] = new Float32Array([0.024222437292337418]);
  net_h1_w[64] = new Float32Array([-0.021352211013436317]);
  net_h1_w[65] = new Float32Array([-0.007121292408555746]);
  net_h1_w[66] = new Float32Array([-0.012782756239175797]);
  net_h1_w[67] = new Float32Array([0.034944698214530945]);
  net_h1_w[68] = new Float32Array([0.034189462661743164]);
  net_h1_w[69] = new Float32Array([-0.013742628507316113]);
  net_h1_w[70] = new Float32Array([0.01469816267490387]);
  net_h1_w[71] = new Float32Array([-0.022365976125001907]);
  net_h1_w[72] = new Float32Array([-0.04323631152510643]);
  net_h1_w[73] = new Float32Array([0.02546384558081627]);
  net_h1_w[74] = new Float32Array([0.021078258752822876]);
  net_h1_w[75] = new Float32Array([0.0485299676656723]);
  net_h1_w[76] = new Float32Array([-0.04830996319651604]);
  net_h1_w[77] = new Float32Array([-0.02424613945186138]);
  net_h1_w[78] = new Float32Array([0.016306323930621147]);
  net_h1_w[79] = new Float32Array([0.050100840628147125]);
  net_h1_w[80] = new Float32Array([0.012272899970412254]);
  net_h1_w[81] = new Float32Array([0.011880317702889442]);
  net_h1_w[82] = new Float32Array([0.016050441190600395]);
  net_h1_w[83] = new Float32Array([0.033270444720983505]);
  net_h1_w[84] = new Float32Array([0.037606317549943924]);
  net_h1_w[85] = new Float32Array([-0.023351440206170082]);
  net_h1_w[86] = new Float32Array([0.03528415411710739]);
  net_h1_w[87] = new Float32Array([-0.03821345791220665]);
  net_h1_w[88] = new Float32Array([0.04626556485891342]);
  net_h1_w[89] = new Float32Array([-0.037521492689847946]);
  net_h1_w[90] = new Float32Array([0.03544051945209503]);
  net_h1_w[91] = new Float32Array([0.004297288600355387]);
  net_h1_w[92] = new Float32Array([0.026436584070324898]);
  net_h1_w[93] = new Float32Array([0.02458319254219532]);
  net_h1_w[94] = new Float32Array([-0.03206106647849083]);
  net_h1_w[95] = new Float32Array([-0.042240895330905914]);
  net_h1_w[96] = new Float32Array([0.026544813066720963]);
  net_h1_w[97] = new Float32Array([0.049582354724407196]);
  net_h1_w[98] = new Float32Array([0.0016223229467868805]);
  net_h1_w[99] = new Float32Array([0.019149301573634148]);
  net_h1_w[100] = new Float32Array([-0.007315471302717924]);
  net_h1_w[101] = new Float32Array([-0.026515286415815353]);
  net_h1_w[102] = new Float32Array([0.020414011552929878]);
  net_h1_w[103] = new Float32Array([-0.041066937148571014]);
  net_h1_w[104] = new Float32Array([-0.018119510263204575]);
  net_h1_w[105] = new Float32Array([-0.0152354184538126]);
  net_h1_w[106] = new Float32Array([-0.013204858638346195]);
  net_h1_w[107] = new Float32Array([-0.0082464087754488]);
  net_h1_w[108] = new Float32Array([0.03900931403040886]);
  net_h1_w[109] = new Float32Array([0.010811579413712025]);
  net_h1_w[110] = new Float32Array([-0.007581658661365509]);
  net_h1_w[111] = new Float32Array([-0.0041502295061945915]);
  net_h1_w[112] = new Float32Array([-0.013763459399342537]);
  net_h1_w[113] = new Float32Array([-0.04987897723913193]);
  net_h1_w[114] = new Float32Array([0.01593298837542534]);
  net_h1_w[115] = new Float32Array([0.002484341850504279]);
  net_h1_w[116] = new Float32Array([0.007772224023938179]);
  net_h1_w[117] = new Float32Array([0.03818652406334877]);
  net_h1_w[118] = new Float32Array([-0.02953854389488697]);
  net_h1_w[119] = new Float32Array([-0.010770362801849842]);
  net_h1_w[120] = new Float32Array([0.0215371735394001]);
  net_h1_w[121] = new Float32Array([-0.004582731053233147]);
  net_h1_w[122] = new Float32Array([0.037234410643577576]);
  net_h1_w[123] = new Float32Array([0.04645886272192001]);
  net_h1_w[124] = new Float32Array([-0.014656642451882362]);
  net_h1_w[125] = new Float32Array([0.026624619960784912]);
  net_h1_w[126] = new Float32Array([-0.006539018824696541]);
  net_h1_w[127] = new Float32Array([-0.017334816977381706]);
  net_h1_w[128] = new Float32Array([-0.016488565132021904]);
  net_h1_w[129] = new Float32Array([0.013399327173829079]);
  net_h1_w[130] = new Float32Array([0.04650832712650299]);
  net_h1_w[131] = new Float32Array([-0.015029801055788994]);
  net_h1_w[132] = new Float32Array([0.04167875275015831]);
  net_h1_w[133] = new Float32Array([-0.02459140494465828]);
  net_h1_w[134] = new Float32Array([-0.010619662702083588]);
  net_h1_w[135] = new Float32Array([0.01737925596535206]);
  net_h1_w[136] = new Float32Array([-0.008089698851108551]);
  net_h1_w[137] = new Float32Array([0.04164961352944374]);
  net_h1_w[138] = new Float32Array([-0.015186937525868416]);
  net_h1_w[139] = new Float32Array([-0.039288293570280075]);
  net_h1_w[140] = new Float32Array([0.03319679573178291]);
  net_h1_w[141] = new Float32Array([-0.005729482509195805]);
  net_h1_w[142] = new Float32Array([0.04324725270271301]);
  net_h1_w[143] = new Float32Array([-0.01579452119767666]);
  net_h1_w[144] = new Float32Array([0.008485857397317886]);
  net_h1_w[145] = new Float32Array([-0.017030689865350723]);
  net_h1_w[146] = new Float32Array([-0.021873274818062782]);
  net_h1_w[147] = new Float32Array([0.012768450193107128]);
  net_h1_w[148] = new Float32Array([0.02868604101240635]);
  net_h1_w[149] = new Float32Array([0.006041433662176132]);
  net_h1_w[150] = new Float32Array([0.03705058619379997]);
  net_h1_w[151] = new Float32Array([-0.015261358581483364]);
  net_h1_w[152] = new Float32Array([0.03755161166191101]);
  net_h1_w[153] = new Float32Array([0.025282077491283417]);
  net_h1_w[154] = new Float32Array([-0.013408567756414413]);
  net_h1_w[155] = new Float32Array([0.02801329270005226]);
  net_h1_w[156] = new Float32Array([0.04742182418704033]);
  net_h1_w[157] = new Float32Array([0.026958128437399864]);
  net_h1_w[158] = new Float32Array([0.011026804335415363]);
  net_h1_w[159] = new Float32Array([-0.0005827245186083019]);
  net_h1_w[160] = new Float32Array([0.03947189822793007]);
  net_h1_w[161] = new Float32Array([-0.017819443717598915]);
  net_h1_w[162] = new Float32Array([0.03883757442235947]);
  net_h1_w[163] = new Float32Array([0.01822846569120884]);
  net_h1_w[164] = new Float32Array([0.03686385229229927]);
  net_h1_w[165] = new Float32Array([-0.05000634863972664]);
  net_h1_w[166] = new Float32Array([0.04992532357573509]);
  net_h1_w[167] = new Float32Array([0.026636967435479164]);
  net_h1_w[168] = new Float32Array([0.010483315214514732]);
  net_h1_w[169] = new Float32Array([0.050677575170993805]);
  net_h1_w[170] = new Float32Array([0.045012760907411575]);
  net_h1_w[171] = new Float32Array([-0.0023915753699839115]);
  net_h1_w[172] = new Float32Array([-0.030576754361391068]);
  net_h1_w[173] = new Float32Array([0.015736494213342667]);
  net_h1_w[174] = new Float32Array([0.030773906037211418]);
  net_h1_w[175] = new Float32Array([-0.028588226065039635]);
  net_h1_w[176] = new Float32Array([-0.028968699276447296]);
  net_h1_w[177] = new Float32Array([0.005168355070054531]);
  net_h1_w[178] = new Float32Array([-0.01131362933665514]);
  net_h1_w[179] = new Float32Array([-0.0020066057331860065]);
  net_h1_w[180] = new Float32Array([-0.041251782327890396]);
  net_h1_w[181] = new Float32Array([0.011291665956377983]);
  net_h1_w[182] = new Float32Array([0.002383112907409668]);
  net_h1_w[183] = new Float32Array([-0.028869012370705605]);
  net_h1_w[184] = new Float32Array([-0.024329455569386482]);
  net_h1_w[185] = new Float32Array([-0.03712568059563637]);
  net_h1_w[186] = new Float32Array([-0.018096014857292175]);
  net_h1_w[187] = new Float32Array([-0.043187469244003296]);
  net_h1_w[188] = new Float32Array([-0.04183752089738846]);
  net_h1_w[189] = new Float32Array([0.047003135085105896]);
  net_h1_w[190] = new Float32Array([-0.03727540001273155]);
  net_h1_w[191] = new Float32Array([-0.04985613375902176]);
  net_h1_w[192] = new Float32Array([0.05052613094449043]);
  net_h1_w[193] = new Float32Array([-0.04969778656959534]);
  net_h1_w[194] = new Float32Array([0.048439934849739075]);
  net_h1_w[195] = new Float32Array([0.0026762401685118675]);
  net_h1_w[196] = new Float32Array([-0.005369148217141628]);
  net_h1_w[197] = new Float32Array([0.006548476405441761]);
  net_h1_w[198] = new Float32Array([-0.02358069270849228]);
  net_h1_w[199] = new Float32Array([0.014650021679699421]);
  net_h1_w[200] = new Float32Array([0.0382150374352932]);
  net_h1_w[201] = new Float32Array([-0.008190300315618515]);
  net_h1_w[202] = new Float32Array([-0.029006395488977432]);
  net_h1_w[203] = new Float32Array([-0.0326998308300972]);
  net_h1_w[204] = new Float32Array([0.001579798525199294]);
  net_h1_w[205] = new Float32Array([0.025023482739925385]);
  net_h1_w[206] = new Float32Array([-0.04223911091685295]);
  net_h1_w[207] = new Float32Array([0.004407916683703661]);
  net_h1_w[208] = new Float32Array([0.026470905169844627]);
  net_h1_w[209] = new Float32Array([-0.015147258527576923]);
  net_h1_w[210] = new Float32Array([0.04700716957449913]);
  net_h1_w[211] = new Float32Array([0.005088159814476967]);
  net_h1_w[212] = new Float32Array([0.03765891492366791]);
  net_h1_w[213] = new Float32Array([0.048076704144477844]);
  net_h1_w[214] = new Float32Array([-0.00046176035539247096]);
  net_h1_w[215] = new Float32Array([-0.04891633987426758]);
  net_h1_w[216] = new Float32Array([-0.03644193336367607]);
  net_h1_w[217] = new Float32Array([0.004971158690750599]);
  net_h1_w[218] = new Float32Array([-0.041673969477415085]);
  net_h1_w[219] = new Float32Array([0.005590244196355343]);
  net_h1_w[220] = new Float32Array([-0.005923369899392128]);
  net_h1_w[221] = new Float32Array([-0.04176577925682068]);
  net_h1_w[222] = new Float32Array([-0.014950046315789223]);
  net_h1_w[223] = new Float32Array([-0.04296785965561867]);
  net_h1_w[224] = new Float32Array([0.04032518342137337]);
  net_h1_w[225] = new Float32Array([0.018893295899033546]);
  net_h1_w[226] = new Float32Array([-0.03549235686659813]);
  net_h1_w[227] = new Float32Array([0.049821753054857254]);
  net_h1_w[228] = new Float32Array([0.04519624263048172]);
  net_h1_w[229] = new Float32Array([0.043940167874097824]);
  net_h1_w[230] = new Float32Array([0.006857428699731827]);
  net_h1_w[231] = new Float32Array([0.023157989606261253]);
  net_h1_w[232] = new Float32Array([0.04212457314133644]);
  net_h1_w[233] = new Float32Array([-0.041558343917131424]);
  net_h1_w[234] = new Float32Array([-0.033053573220968246]);
  net_h1_w[235] = new Float32Array([-0.037519361823797226]);
  net_h1_w[236] = new Float32Array([0.003732618410140276]);
  net_h1_w[237] = new Float32Array([0.021308379247784615]);
  net_h1_w[238] = new Float32Array([-0.011013943701982498]);
  net_h1_w[239] = new Float32Array([0.03835081681609154]);
  net_h1_w[240] = new Float32Array([-0.04011162742972374]);
  net_h1_w[241] = new Float32Array([0.03150907903909683]);
  net_h1_w[242] = new Float32Array([0.011306513100862503]);
  net_h1_w[243] = new Float32Array([0.04990776255726814]);
  net_h1_w[244] = new Float32Array([0.046902671456336975]);
  net_h1_w[245] = new Float32Array([-0.04873541370034218]);
  net_h1_w[246] = new Float32Array([-0.004146871156990528]);
  net_h1_w[247] = new Float32Array([0.01848413422703743]);
  net_h1_w[248] = new Float32Array([0.03729096055030823]);
  net_h1_w[249] = new Float32Array([0.03059053234755993]);
  net_h1_w[250] = new Float32Array([0.04152730852365494]);
  net_h1_w[251] = new Float32Array([0.0248115211725235]);
  net_h1_w[252] = new Float32Array([-0.018117832019925117]);
  net_h1_w[253] = new Float32Array([-0.03571900352835655]);
  net_h1_w[254] = new Float32Array([0.009944915771484375]);
  net_h1_w[255] = new Float32Array([0.020643308758735657]);
  net_h1_w[256] = new Float32Array([0.003559495322406292]);
  net_h1_w[257] = new Float32Array([-0.009091521613299847]);
  net_h1_w[258] = new Float32Array([0.021737029775977135]);
  net_h1_w[259] = new Float32Array([0.00749023025855422]);
  net_h1_w[260] = new Float32Array([0.007649960462003946]);
  net_h1_w[261] = new Float32Array([-0.0449916310608387]);
  net_h1_w[262] = new Float32Array([-0.03697104752063751]);
  net_h1_w[263] = new Float32Array([0.021607859060168266]);
  net_h1_w[264] = new Float32Array([-0.02249816618859768]);
  net_h1_w[265] = new Float32Array([0.0019377912394702435]);
  net_h1_w[266] = new Float32Array([0.04995720088481903]);
  net_h1_w[267] = new Float32Array([0.03674032539129257]);
  net_h1_w[268] = new Float32Array([-0.03162175044417381]);
  net_h1_w[269] = new Float32Array([-0.042275916785001755]);
  net_h1_w[270] = new Float32Array([-0.03507959097623825]);
  net_h1_w[271] = new Float32Array([0.04718761891126633]);
  net_h1_w[272] = new Float32Array([0.011342027224600315]);
  net_h1_w[273] = new Float32Array([0.02222730778157711]);
  net_h1_w[274] = new Float32Array([0.03679611161351204]);
  net_h1_w[275] = new Float32Array([0.000900253071449697]);
  net_h1_w[276] = new Float32Array([-0.0073403543792665005]);
  net_h1_w[277] = new Float32Array([-0.041116707026958466]);
  net_h1_w[278] = new Float32Array([-0.02580980397760868]);
  net_h1_w[279] = new Float32Array([0.006443006917834282]);
  net_h1_w[280] = new Float32Array([-0.03168868646025658]);
  net_h1_w[281] = new Float32Array([0.032902903854846954]);
  net_h1_w[282] = new Float32Array([0.03704005852341652]);
  net_h1_w[283] = new Float32Array([0.034897331148386]);
  net_h1_w[284] = new Float32Array([0.034936774522066116]);
  net_h1_w[285] = new Float32Array([0.004850852303206921]);
  net_h1_w[286] = new Float32Array([-0.019920650869607925]);
  net_h1_w[287] = new Float32Array([0.040505316108465195]);
  net_h1_w[288] = new Float32Array([0.007061534095555544]);
  net_h1_w[289] = new Float32Array([-0.035164959728717804]);
  net_h1_w[290] = new Float32Array([0.04831266030669212]);
  net_h1_w[291] = new Float32Array([0.011170878075063229]);
  net_h1_w[292] = new Float32Array([0.027286505326628685]);
  net_h1_w[293] = new Float32Array([0.029625002294778824]);
  net_h1_w[294] = new Float32Array([-0.03320680931210518]);
  net_h1_w[295] = new Float32Array([0.005068343598395586]);
  net_h1_w[296] = new Float32Array([0.032192524522542953]);
  net_h1_w[297] = new Float32Array([-0.018266301602125168]);
  net_h1_w[298] = new Float32Array([0.012352680787444115]);
  net_h1_w[299] = new Float32Array([-0.02128104493021965]);
  net_h1_w[300] = new Float32Array([-0.036626946181058884]);
  net_h1_w[301] = new Float32Array([-0.048618875443935394]);
  net_h1_w[302] = new Float32Array([-0.0115564726293087]);
  net_h1_w[303] = new Float32Array([0.004556214902549982]);
  net_h1_w[304] = new Float32Array([0.04256071895360947]);
  net_h1_w[305] = new Float32Array([0.02259296551346779]);
  net_h1_w[306] = new Float32Array([0.007601780816912651]);
  net_h1_w[307] = new Float32Array([0.02673593908548355]);
  net_h1_w[308] = new Float32Array([-0.05073898285627365]);
  net_h1_w[309] = new Float32Array([-0.030634507536888123]);
  net_h1_w[310] = new Float32Array([0.04381251707673073]);
  net_h1_w[311] = new Float32Array([0.04356836900115013]);
  net_h1_w[312] = new Float32Array([-0.009210855700075626]);
  net_h1_w[313] = new Float32Array([-0.014180527999997139]);
  net_h1_w[314] = new Float32Array([-0.01337480265647173]);
  net_h1_w[315] = new Float32Array([-0.0248123612254858]);
  net_h1_w[316] = new Float32Array([-0.028992662206292152]);
  net_h1_w[317] = new Float32Array([-0.028275029733777046]);
  net_h1_w[318] = new Float32Array([0.019789952784776688]);
  net_h1_w[319] = new Float32Array([-0.004513960797339678]);
  net_h1_w[320] = new Float32Array([-0.010490797460079193]);
  net_h1_w[321] = new Float32Array([-0.005320477765053511]);
  net_h1_w[322] = new Float32Array([0.014068150892853737]);
  net_h1_w[323] = new Float32Array([0.026324231177568436]);
  net_h1_w[324] = new Float32Array([0.03605373203754425]);
  net_h1_w[325] = new Float32Array([0.011187257245182991]);
  net_h1_w[326] = new Float32Array([-0.0003942972107324749]);
  net_h1_w[327] = new Float32Array([-0.01344574335962534]);
  net_h1_w[328] = new Float32Array([0.024932604283094406]);
  net_h1_w[329] = new Float32Array([0.04552983120083809]);
  net_h1_w[330] = new Float32Array([0.04942119121551514]);
  net_h1_w[331] = new Float32Array([0.014440611004829407]);
  net_h1_w[332] = new Float32Array([0.03573029860854149]);
  net_h1_w[333] = new Float32Array([0.03407915309071541]);
  net_h1_w[334] = new Float32Array([-0.03426374867558479]);
  net_h1_w[335] = new Float32Array([-0.008886256255209446]);
  net_h1_w[336] = new Float32Array([-0.0022732566576451063]);
  net_h1_w[337] = new Float32Array([0.014624779112637043]);
  net_h1_w[338] = new Float32Array([-0.021043064072728157]);
  net_h1_w[339] = new Float32Array([0.00033231565612368286]);
  net_h1_w[340] = new Float32Array([-0.007748092990368605]);
  net_h1_w[341] = new Float32Array([0.030847743153572083]);
  net_h1_w[342] = new Float32Array([0.03134405240416527]);
  net_h1_w[343] = new Float32Array([0.04404037445783615]);
  net_h1_w[344] = new Float32Array([0.0004542045353446156]);
  net_h1_w[345] = new Float32Array([0.000587239395827055]);
  net_h1_w[346] = new Float32Array([-0.019832998514175415]);
  net_h1_w[347] = new Float32Array([0.0017216590931639075]);
  net_h1_w[348] = new Float32Array([-0.030090944841504097]);
  net_h1_w[349] = new Float32Array([0.017698481678962708]);
  net_h1_w[350] = new Float32Array([0.041215263307094574]);
  net_h1_w[351] = new Float32Array([0.03694101423025131]);
  net_h1_w[352] = new Float32Array([0.01579492725431919]);
  net_h1_w[353] = new Float32Array([-0.03631079941987991]);
  net_h1_w[354] = new Float32Array([-0.03744470328092575]);
  net_h1_w[355] = new Float32Array([0.04979722946882248]);
  net_h1_w[356] = new Float32Array([0.03562435880303383]);
  net_h1_w[357] = new Float32Array([0.025995980948209763]);
  net_h1_w[358] = new Float32Array([-0.0068864827044308186]);
  net_h1_w[359] = new Float32Array([0.02928318828344345]);
  net_h1_w[360] = new Float32Array([0.017650190740823746]);
  net_h1_w[361] = new Float32Array([0.0041944487020373344]);
  net_h1_w[362] = new Float32Array([-0.02402171678841114]);
  net_h1_w[363] = new Float32Array([0.037346817553043365]);
  net_h1_w[364] = new Float32Array([0.011125420220196247]);
  net_h1_w[365] = new Float32Array([-0.020615408197045326]);
  net_h1_w[366] = new Float32Array([-0.021897289901971817]);
  net_h1_w[367] = new Float32Array([0.0005698602180927992]);
  net_h1_w[368] = new Float32Array([-0.0423080138862133]);
  net_h1_w[369] = new Float32Array([-0.039548881351947784]);
  net_h1_w[370] = new Float32Array([0.04536442086100578]);
  net_h1_w[371] = new Float32Array([0.0077303070574998856]);
  net_h1_w[372] = new Float32Array([-0.04225340485572815]);
  net_h1_w[373] = new Float32Array([-0.02562563121318817]);
  net_h1_w[374] = new Float32Array([-0.03456554561853409]);
  net_h1_w[375] = new Float32Array([-0.037959031760692596]);
  net_h1_w[376] = new Float32Array([0.01744077168405056]);
  net_h1_w[377] = new Float32Array([0.045634493231773376]);
  net_h1_w[378] = new Float32Array([0.009085430763661861]);
  net_h1_w[379] = new Float32Array([0.01766911894083023]);
  net_h1_w[380] = new Float32Array([-0.00598206976428628]);
  net_h1_w[381] = new Float32Array([0.03601960837841034]);
  net_h1_w[382] = new Float32Array([0.010585875250399113]);
  net_h1_w[383] = new Float32Array([-0.02514495514333248]);
  net_h1_w[384] = new Float32Array([-0.007252498995512724]);
  net_h1_w[385] = new Float32Array([-0.03892282769083977]);
  net_h1_w[386] = new Float32Array([0.019200025126338005]);
  net_h1_w[387] = new Float32Array([-0.01645786128938198]);
  net_h1_w[388] = new Float32Array([0.0397312305867672]);
  net_h1_w[389] = new Float32Array([-0.04354318603873253]);
  net_h1_w[390] = new Float32Array([0.02775878831744194]);
  net_h1_w[391] = new Float32Array([-0.04881776124238968]);
  net_h1_w[392] = new Float32Array([0.04404360428452492]);
  net_h1_w[393] = new Float32Array([-0.008175767958164215]);
  net_h1_w[394] = new Float32Array([-0.018565205857157707]);
  net_h1_w[395] = new Float32Array([-0.03231043741106987]);
  net_h1_w[396] = new Float32Array([0.045665957033634186]);
  net_h1_w[397] = new Float32Array([0.009841502644121647]);
  net_h1_w[398] = new Float32Array([-0.046096257865428925]);
  net_h1_w[399] = new Float32Array([-0.0260890144854784]);
  net_h1_w[400] = new Float32Array([-0.026787258684635162]);
  net_h1_w[401] = new Float32Array([-0.0227045938372612]);
  net_h1_w[402] = new Float32Array([-0.03130815178155899]);
  net_h1_w[403] = new Float32Array([-0.01548730581998825]);
  net_h1_w[404] = new Float32Array([0.046790312975645065]);
  net_h1_w[405] = new Float32Array([0.045499950647354126]);
  net_h1_w[406] = new Float32Array([0.016307232901453972]);
  net_h1_w[407] = new Float32Array([0.049024563282728195]);
  net_h1_w[408] = new Float32Array([-0.038701724261045456]);
  net_h1_w[409] = new Float32Array([-0.0009111968684010208]);
  net_h1_w[410] = new Float32Array([0.018649565055966377]);
  net_h1_w[411] = new Float32Array([-0.02233114466071129]);
  net_h1_w[412] = new Float32Array([-0.047539982944726944]);
  net_h1_w[413] = new Float32Array([-0.003516418393701315]);
  net_h1_w[414] = new Float32Array([0.02036215551197529]);
  net_h1_w[415] = new Float32Array([0.048017408698797226]);
  net_h1_w[416] = new Float32Array([0.028377484530210495]);
  net_h1_w[417] = new Float32Array([-0.016632437705993652]);
  net_h1_w[418] = new Float32Array([-0.03707176446914673]);
  net_h1_w[419] = new Float32Array([-0.014175329357385635]);
  net_h1_w[420] = new Float32Array([0.0020372606813907623]);
  net_h1_w[421] = new Float32Array([0.04222872480750084]);
  net_h1_w[422] = new Float32Array([0.04773882031440735]);
  net_h1_w[423] = new Float32Array([0.04109184816479683]);
  net_h1_w[424] = new Float32Array([-0.04298574849963188]);
  net_h1_w[425] = new Float32Array([0.0387558713555336]);
  net_h1_w[426] = new Float32Array([0.04880651831626892]);
  net_h1_w[427] = new Float32Array([-0.023837974295020103]);
  net_h1_w[428] = new Float32Array([0.010578221641480923]);
  net_h1_w[429] = new Float32Array([-0.030204888433218002]);
  net_h1_w[430] = new Float32Array([0.017513765022158623]);
  net_h1_w[431] = new Float32Array([0.013814796693623066]);
  net_h1_w[432] = new Float32Array([-0.009319322183728218]);
  net_h1_w[433] = new Float32Array([0.042538248002529144]);
  net_h1_w[434] = new Float32Array([0.00039686725358478725]);
  net_h1_w[435] = new Float32Array([0.034934304654598236]);
  net_h1_w[436] = new Float32Array([-0.028311079367995262]);
  net_h1_w[437] = new Float32Array([-0.03682753071188927]);
  net_h1_w[438] = new Float32Array([0.025561263784766197]);
  net_h1_w[439] = new Float32Array([0.015061828307807446]);
  net_h1_w[440] = new Float32Array([0.012033083476126194]);
  net_h1_w[441] = new Float32Array([-0.00138246756978333]);
  net_h1_w[442] = new Float32Array([0.044376008212566376]);
  net_h1_w[443] = new Float32Array([-0.01178778987377882]);
  net_h1_w[444] = new Float32Array([-0.03366861864924431]);
  net_h1_w[445] = new Float32Array([-0.02252197451889515]);
  net_h1_w[446] = new Float32Array([-0.0061759366653859615]);
  net_h1_w[447] = new Float32Array([-0.021118266507983208]);
  net_h1_w[448] = new Float32Array([0.0017979226540774107]);
  net_h1_w[449] = new Float32Array([0.02704019844532013]);
  net_h1_w[450] = new Float32Array([0.018154295161366463]);
  net_h1_w[451] = new Float32Array([0.047535721212625504]);
  net_h1_w[452] = new Float32Array([-0.0263858363032341]);
  net_h1_w[453] = new Float32Array([-0.033867284655570984]);
  net_h1_w[454] = new Float32Array([0.014120321720838547]);
  net_h1_w[455] = new Float32Array([-0.017721550539135933]);
  net_h1_w[456] = new Float32Array([0.024474862962961197]);
  net_h1_w[457] = new Float32Array([0.018550118431448936]);
  net_h1_w[458] = new Float32Array([0.046724893152713776]);
  net_h1_w[459] = new Float32Array([-0.030996376648545265]);
  net_h1_w[460] = new Float32Array([0.049920350313186646]);
  net_h1_w[461] = new Float32Array([0.006364817731082439]);
  net_h1_w[462] = new Float32Array([-0.01871235854923725]);
  net_h1_w[463] = new Float32Array([-0.04407702386379242]);
  net_h1_w[464] = new Float32Array([-0.04957164451479912]);
  net_h1_w[465] = new Float32Array([0.01490502804517746]);
  net_h1_w[466] = new Float32Array([0.00861386489123106]);
  net_h1_w[467] = new Float32Array([-0.0018455337267369032]);
  net_h1_w[468] = new Float32Array([-0.02593953162431717]);
  net_h1_w[469] = new Float32Array([0.04800315573811531]);
  net_h1_w[470] = new Float32Array([0.012978821992874146]);
  net_h1_w[471] = new Float32Array([-0.03318753466010094]);
  net_h1_w[472] = new Float32Array([0.04998405650258064]);
  net_h1_w[473] = new Float32Array([-0.004367854446172714]);
  net_h1_w[474] = new Float32Array([-0.0011199009604752064]);
  net_h1_w[475] = new Float32Array([0.016908733174204826]);
  net_h1_w[476] = new Float32Array([-0.02619280479848385]);
  net_h1_w[477] = new Float32Array([0.013980459421873093]);
  net_h1_w[478] = new Float32Array([0.024375885725021362]);
  net_h1_w[479] = new Float32Array([0.019487814977765083]);
  net_h1_w[480] = new Float32Array([0.047739967703819275]);
  net_h1_w[481] = new Float32Array([-0.013829100877046585]);
  net_h1_w[482] = new Float32Array([-0.016815222799777985]);
  net_h1_w[483] = new Float32Array([0.03601383790373802]);
  net_h1_w[484] = new Float32Array([0.0028938977047801018]);
  net_h1_w[485] = new Float32Array([-0.0015373642090708017]);
  net_h1_w[486] = new Float32Array([0.027348635718226433]);
  net_h1_w[487] = new Float32Array([0.04714901000261307]);
  net_h1_w[488] = new Float32Array([-0.005071766208857298]);
  net_h1_w[489] = new Float32Array([-0.042441707104444504]);
  net_h1_w[490] = new Float32Array([0.009201892651617527]);
  net_h1_w[491] = new Float32Array([-0.013204584829509258]);
  net_h1_w[492] = new Float32Array([0.007541818078607321]);
  net_h1_w[493] = new Float32Array([-0.02097300812602043]);
  net_h1_w[494] = new Float32Array([0.003193556098267436]);
  net_h1_w[495] = new Float32Array([0.048429008573293686]);
  net_h1_w[496] = new Float32Array([-0.04667886346578598]);
  net_h1_w[497] = new Float32Array([0.04026319831609726]);
  net_h1_w[498] = new Float32Array([0.03230522200465202]);
  net_h1_w[499] = new Float32Array([0.045291442424058914]);
  net_h1_w[500] = new Float32Array([0.03307138383388519]);
  net_h1_w[501] = new Float32Array([0.03713235259056091]);
  net_h1_w[502] = new Float32Array([-0.050319988280534744]);
  net_h1_w[503] = new Float32Array([-0.04424206539988518]);
  net_h1_w[504] = new Float32Array([0.022524477913975716]);
  net_h1_w[505] = new Float32Array([0.012393294833600521]);
  net_h1_w[506] = new Float32Array([-0.018532518297433853]);
  net_h1_w[507] = new Float32Array([-0.0006786040612496436]);
  net_h1_w[508] = new Float32Array([0.047927211970090866]);
  net_h1_w[509] = new Float32Array([0.04418908432126045]);
  net_h1_w[510] = new Float32Array([0.014360006898641586]);
  net_h1_w[511] = new Float32Array([0.03504128381609917]);
  net_h1_w[512] = new Float32Array([0.009885288774967194]);
  net_h1_w[513] = new Float32Array([-0.04400629177689552]);
  net_h1_w[514] = new Float32Array([0.03713049367070198]);
  net_h1_w[515] = new Float32Array([0.04793365299701691]);
  net_h1_w[516] = new Float32Array([0.049239251762628555]);
  net_h1_w[517] = new Float32Array([-0.005588996689766645]);
  net_h1_w[518] = new Float32Array([-0.04486020281910896]);
  net_h1_w[519] = new Float32Array([0.03421437367796898]);
  net_h1_w[520] = new Float32Array([0.021065717563033104]);
  net_h1_w[521] = new Float32Array([-0.020037584006786346]);
  net_h1_w[522] = new Float32Array([-0.04913712292909622]);
  net_h1_w[523] = new Float32Array([0.04976006969809532]);
  net_h1_w[524] = new Float32Array([-0.01691335253417492]);
  net_h1_w[525] = new Float32Array([0.012143401429057121]);
  net_h1_w[526] = new Float32Array([-0.03197767958045006]);
  net_h1_w[527] = new Float32Array([0.04806782677769661]);
  net_h1_w[528] = new Float32Array([0.013092715293169022]);
  net_h1_w[529] = new Float32Array([-0.048157501965761185]);
  net_h1_w[530] = new Float32Array([-0.0207721795886755]);
  net_h1_w[531] = new Float32Array([0.003680815454572439]);
  net_h1_w[532] = new Float32Array([0.020034829154610634]);
  net_h1_w[533] = new Float32Array([-0.012137834914028645]);
  net_h1_w[534] = new Float32Array([0.01884937472641468]);
  net_h1_w[535] = new Float32Array([-0.043004147708415985]);
  net_h1_w[536] = new Float32Array([-0.034891705960035324]);
  net_h1_w[537] = new Float32Array([0.0035655712708830833]);
  net_h1_w[538] = new Float32Array([0.03833555057644844]);
  net_h1_w[539] = new Float32Array([0.014147065579891205]);
  net_h1_w[540] = new Float32Array([0.02204187400639057]);
  net_h1_w[541] = new Float32Array([0.0033344747498631477]);
  net_h1_w[542] = new Float32Array([0.0010760483564808965]);
  net_h1_w[543] = new Float32Array([0.00868795346468687]);
  net_h1_w[544] = new Float32Array([-0.01748155616223812]);
  net_h1_w[545] = new Float32Array([0.001037887530401349]);
  net_h1_w[546] = new Float32Array([0.03238437697291374]);
  net_h1_w[547] = new Float32Array([-0.047202423214912415]);
  net_h1_w[548] = new Float32Array([-0.040368322283029556]);
  net_h1_w[549] = new Float32Array([-0.030913392081856728]);
  net_h1_w[550] = new Float32Array([-0.04673941060900688]);
  net_h1_w[551] = new Float32Array([0.01953980326652527]);
  net_h1_w[552] = new Float32Array([0.02705753780901432]);
  net_h1_w[553] = new Float32Array([0.004705708008259535]);
  net_h1_w[554] = new Float32Array([0.008501817472279072]);
  net_h1_w[555] = new Float32Array([0.044433750212192535]);
  net_h1_w[556] = new Float32Array([0.01673399657011032]);
  net_h1_w[557] = new Float32Array([0.030656522139906883]);
  net_h1_w[558] = new Float32Array([0.044153910130262375]);
  net_h1_w[559] = new Float32Array([-0.0009687970159575343]);
  net_h1_w[560] = new Float32Array([0.011525451205670834]);
  net_h1_w[561] = new Float32Array([-0.03778703510761261]);
  net_h1_w[562] = new Float32Array([0.024500666186213493]);
  net_h1_w[563] = new Float32Array([0.017118481919169426]);
  net_h1_w[564] = new Float32Array([0.017348172143101692]);
  net_h1_w[565] = new Float32Array([0.045964159071445465]);
  net_h1_w[566] = new Float32Array([0.01390138454735279]);
  net_h1_w[567] = new Float32Array([0.014063384383916855]);
  net_h1_w[568] = new Float32Array([-0.039435140788555145]);
  net_h1_w[569] = new Float32Array([-0.021903855726122856]);
  net_h1_w[570] = new Float32Array([0.00904233567416668]);
  net_h1_w[571] = new Float32Array([-0.0013958344934508204]);
  net_h1_w[572] = new Float32Array([0.0060103293508291245]);
  net_h1_w[573] = new Float32Array([0.008839328773319721]);
  net_h1_w[574] = new Float32Array([0.03995722904801369]);
  net_h1_w[575] = new Float32Array([-0.03984391316771507]);
  net_h1_w[576] = new Float32Array([0.048445481806993484]);
  net_h1_w[577] = new Float32Array([-0.038244135677814484]);
  net_h1_w[578] = new Float32Array([-0.02634461037814617]);
  net_h1_w[579] = new Float32Array([0.028655024245381355]);
  net_h1_w[580] = new Float32Array([-0.000026991650884156115]);
  net_h1_w[581] = new Float32Array([-0.0011013488983735442]);
  net_h1_w[582] = new Float32Array([-0.007607326377183199]);
  net_h1_w[583] = new Float32Array([-0.04186572879552841]);
  net_h1_w[584] = new Float32Array([0.02763155661523342]);
  net_h1_w[585] = new Float32Array([0.040296025574207306]);
  net_h1_w[586] = new Float32Array([0.012307792901992798]);
  net_h1_w[587] = new Float32Array([-0.011167795397341251]);
  net_h1_w[588] = new Float32Array([0.0489816814661026]);
  net_h1_w[589] = new Float32Array([-0.02091510221362114]);
  net_h1_w[590] = new Float32Array([-0.04425709322094917]);
  net_h1_w[591] = new Float32Array([0.018438437953591347]);
  net_h1_w[592] = new Float32Array([0.043410323560237885]);
  net_h1_w[593] = new Float32Array([-0.017936425283551216]);
  net_h1_w[594] = new Float32Array([-0.030698593705892563]);
  net_h1_w[595] = new Float32Array([-0.022767571732401848]);
  net_h1_w[596] = new Float32Array([-0.0470036044716835]);
  net_h1_w[597] = new Float32Array([0.013475997373461723]);
  net_h1_w[598] = new Float32Array([-0.037633057683706284]);
  net_h1_w[599] = new Float32Array([0.012848232872784138]);
  net_h1_w[600] = new Float32Array([0.03835807368159294]);
  net_h1_w[601] = new Float32Array([-0.009462564252316952]);
  net_h1_w[602] = new Float32Array([0.04955447465181351]);
  net_h1_w[603] = new Float32Array([-0.04079030454158783]);
  net_h1_w[604] = new Float32Array([-0.027210433036088943]);
  net_h1_w[605] = new Float32Array([0.03741884231567383]);
  net_h1_w[606] = new Float32Array([-0.00839234795421362]);
  net_h1_w[607] = new Float32Array([0.033184051513671875]);
  net_h1_w[608] = new Float32Array([-0.022667501121759415]);
  net_h1_w[609] = new Float32Array([0.012610748410224915]);
  net_h1_w[610] = new Float32Array([0.014636238105595112]);
  net_h1_w[611] = new Float32Array([-0.021440479904413223]);
  net_h1_w[612] = new Float32Array([-0.017849935218691826]);
  net_h1_w[613] = new Float32Array([0.02051771804690361]);
  net_h1_w[614] = new Float32Array([-0.005177223589271307]);
  net_h1_w[615] = new Float32Array([-0.005756310652941465]);
  net_h1_w[616] = new Float32Array([-0.023285387083888054]);
  net_h1_w[617] = new Float32Array([-0.013205369003117085]);
  net_h1_w[618] = new Float32Array([0.04529242962598801]);
  net_h1_w[619] = new Float32Array([-0.022895166650414467]);
  net_h1_w[620] = new Float32Array([0.006736024282872677]);
  net_h1_w[621] = new Float32Array([0.04168995842337608]);
  net_h1_w[622] = new Float32Array([-0.0407264307141304]);
  net_h1_w[623] = new Float32Array([0.049934327602386475]);
  net_h1_w[624] = new Float32Array([0.024089323356747627]);
  net_h1_w[625] = new Float32Array([0.03081090748310089]);
  net_h1_w[626] = new Float32Array([-0.03548271954059601]);
  net_h1_w[627] = new Float32Array([0.02666017971932888]);
  net_h1_w[628] = new Float32Array([0.0348735973238945]);
  net_h1_w[629] = new Float32Array([-0.008143550716340542]);
  net_h1_w[630] = new Float32Array([0.037039268761873245]);
  net_h1_w[631] = new Float32Array([0.0218153428286314]);
  net_h1_w[632] = new Float32Array([0.021820135414600372]);
  net_h1_w[633] = new Float32Array([-0.04022388532757759]);
  net_h1_w[634] = new Float32Array([-0.008491638116538525]);
  net_h1_w[635] = new Float32Array([-0.03847428038716316]);
  net_h1_w[636] = new Float32Array([0.01802879385650158]);
  net_h1_w[637] = new Float32Array([0.0315915122628212]);
  net_h1_w[638] = new Float32Array([-0.004328599199652672]);
  net_h1_w[639] = new Float32Array([0.04668794944882393]);
  net_h1_w[640] = new Float32Array([0.03518887236714363]);
  net_h1_w[641] = new Float32Array([-0.019058937206864357]);
  net_h1_w[642] = new Float32Array([0.011591917835175991]);
  net_h1_w[643] = new Float32Array([-0.01695697009563446]);
  net_h1_w[644] = new Float32Array([-0.025258271023631096]);
  net_h1_w[645] = new Float32Array([-0.030515538528561592]);
  net_h1_w[646] = new Float32Array([-0.030700508505105972]);
  net_h1_w[647] = new Float32Array([-0.0035166831221431494]);
  net_h1_w[648] = new Float32Array([0.03964991495013237]);
  net_h1_w[649] = new Float32Array([-0.015184479765594006]);
  net_h1_w[650] = new Float32Array([-0.029917307198047638]);
  net_h1_w[651] = new Float32Array([0.034554433077573776]);
  net_h1_w[652] = new Float32Array([-0.050835251808166504]);
  net_h1_w[653] = new Float32Array([0.03752089664340019]);
  net_h1_w[654] = new Float32Array([-0.005787980742752552]);
  net_h1_w[655] = new Float32Array([-0.034146055579185486]);
  net_h1_w[656] = new Float32Array([0.04563908278942108]);
  net_h1_w[657] = new Float32Array([-0.0024376974906772375]);
  net_h1_w[658] = new Float32Array([0.02163027785718441]);
  net_h1_w[659] = new Float32Array([-0.04823517054319382]);
  net_h1_w[660] = new Float32Array([-0.01301929634064436]);
  net_h1_w[661] = new Float32Array([0.011846308596432209]);
  net_h1_w[662] = new Float32Array([0.032572586089372635]);
  net_h1_w[663] = new Float32Array([-0.03079281374812126]);
  net_h1_w[664] = new Float32Array([-0.045836202800273895]);
  net_h1_w[665] = new Float32Array([0.0014357459731400013]);
  net_h1_w[666] = new Float32Array([-0.03245747834444046]);
  net_h1_w[667] = new Float32Array([-0.048598676919937134]);
  net_h1_w[668] = new Float32Array([-0.007825708948075771]);
  net_h1_w[669] = new Float32Array([-0.0454111248254776]);
  net_h1_w[670] = new Float32Array([0.0447518564760685]);
  net_h1_w[671] = new Float32Array([-0.0004960200167261064]);
  net_h1_w[672] = new Float32Array([-0.01371156144887209]);
  net_h1_w[673] = new Float32Array([-0.0362471379339695]);
  net_h1_w[674] = new Float32Array([0.010433021001517773]);
  net_h1_w[675] = new Float32Array([0.03144773840904236]);
  net_h1_w[676] = new Float32Array([0.019138231873512268]);
  net_h1_w[677] = new Float32Array([0.029427574947476387]);
  net_h1_w[678] = new Float32Array([-0.03719044476747513]);
  net_h1_w[679] = new Float32Array([0.017357315868139267]);
  net_h1_w[680] = new Float32Array([0.04345850646495819]);
  net_h1_w[681] = new Float32Array([0.03369055688381195]);
  net_h1_w[682] = new Float32Array([-0.03268387168645859]);
  net_h1_w[683] = new Float32Array([-0.04024156555533409]);
  net_h1_w[684] = new Float32Array([-0.0320945642888546]);
  net_h1_w[685] = new Float32Array([-0.020801201462745667]);
  net_h1_w[686] = new Float32Array([0.006825240328907967]);
  net_h1_w[687] = new Float32Array([0.03246668726205826]);
  net_h1_w[688] = new Float32Array([0.009826119057834148]);
  net_h1_w[689] = new Float32Array([0.03409821540117264]);
  net_h1_w[690] = new Float32Array([-0.03534606099128723]);
  net_h1_w[691] = new Float32Array([0.019220421090722084]);
  net_h1_w[692] = new Float32Array([-0.023168543353676796]);
  net_h1_w[693] = new Float32Array([0.04446069151163101]);
  net_h1_w[694] = new Float32Array([0.042868927121162415]);
  net_h1_w[695] = new Float32Array([-0.00038221251452341676]);
  net_h1_w[696] = new Float32Array([-0.03930506110191345]);
  net_h1_w[697] = new Float32Array([-0.016813481226563454]);
  net_h1_w[698] = new Float32Array([-0.012719359248876572]);
  net_h1_w[699] = new Float32Array([-0.02173152007162571]);
  net_h1_w[700] = new Float32Array([0.046411577612161636]);
  net_h1_w[701] = new Float32Array([-0.04432172328233719]);
  net_h1_w[702] = new Float32Array([0.005689334124326706]);
  net_h1_w[703] = new Float32Array([0.0033196129370480776]);
  net_h1_w[704] = new Float32Array([0.032703302800655365]);
  net_h1_w[705] = new Float32Array([0.04958289489150047]);
  net_h1_w[706] = new Float32Array([0.018098358064889908]);
  net_h1_w[707] = new Float32Array([0.010261517018079758]);
  net_h1_w[708] = new Float32Array([-0.0283641554415226]);
  net_h1_w[709] = new Float32Array([0.03950352221727371]);
  net_h1_w[710] = new Float32Array([0.03530976176261902]);
  net_h1_w[711] = new Float32Array([-0.04050268605351448]);
  net_h1_w[712] = new Float32Array([0.03131791204214096]);
  net_h1_w[713] = new Float32Array([0.038146596401929855]);
  net_h1_w[714] = new Float32Array([-0.01746058091521263]);
  net_h1_w[715] = new Float32Array([-0.04545897617936134]);
  net_h1_w[716] = new Float32Array([-0.012414885684847832]);
  net_h1_w[717] = new Float32Array([-0.04066826030611992]);
  net_h1_w[718] = new Float32Array([0.029344158247113228]);
  net_h1_w[719] = new Float32Array([-0.03281983733177185]);
  net_h1_w[720] = new Float32Array([-0.0012888527708128095]);
  net_h1_w[721] = new Float32Array([0.028188729658722878]);
  net_h1_w[722] = new Float32Array([0.04324629157781601]);
  net_h1_w[723] = new Float32Array([0.024861015379428864]);
  net_h1_w[724] = new Float32Array([0.039625998586416245]);
  net_h1_w[725] = new Float32Array([-0.04237568378448486]);
  net_h1_w[726] = new Float32Array([0.04401634633541107]);
  net_h1_w[727] = new Float32Array([0.02102295123040676]);
  net_h1_w[728] = new Float32Array([-0.01430254615843296]);
  net_h1_w[729] = new Float32Array([0.023886030539870262]);
  net_h1_w[730] = new Float32Array([-0.0023353630676865578]);
  net_h1_w[731] = new Float32Array([-0.0037448066286742687]);
  net_h1_w[732] = new Float32Array([0.046081457287073135]);
  net_h1_w[733] = new Float32Array([-0.0047984072007238865]);
  net_h1_w[734] = new Float32Array([0.029055729508399963]);
  net_h1_w[735] = new Float32Array([-0.0485708974301815]);
  net_h1_w[736] = new Float32Array([0.028179865330457687]);
  net_h1_w[737] = new Float32Array([0.018485940992832184]);
  net_h1_w[738] = new Float32Array([0.008825819008052349]);
  net_h1_w[739] = new Float32Array([-0.04700765013694763]);
  net_h1_w[740] = new Float32Array([0.01064524706453085]);
  net_h1_w[741] = new Float32Array([-0.043564748018980026]);
  net_h1_w[742] = new Float32Array([0.010536951012909412]);
  net_h1_w[743] = new Float32Array([-0.030381551012396812]);
  net_h1_w[744] = new Float32Array([0.006061012856662273]);
  net_h1_w[745] = new Float32Array([-0.031488750129938126]);
  net_h1_w[746] = new Float32Array([0.050568241626024246]);
  net_h1_w[747] = new Float32Array([-0.011472589336335659]);
  net_h1_w[748] = new Float32Array([0.022454828023910522]);
  net_h1_w[749] = new Float32Array([-0.022584298625588417]);
  net_h1_w[750] = new Float32Array([-0.03241010010242462]);
  net_h1_w[751] = new Float32Array([-0.012169971130788326]);
  net_h1_w[752] = new Float32Array([0.003654924686998129]);
  net_h1_w[753] = new Float32Array([-0.021418528631329536]);
  net_h1_w[754] = new Float32Array([-0.0245942585170269]);
  net_h1_w[755] = new Float32Array([0.027240443974733353]);
  net_h1_w[756] = new Float32Array([0.002464630175381899]);
  net_h1_w[757] = new Float32Array([0.01894712820649147]);
  net_h1_w[758] = new Float32Array([0.022470809519290924]);
  net_h1_w[759] = new Float32Array([0.024788588285446167]);
  net_h1_w[760] = new Float32Array([0.04924999549984932]);
  net_h1_w[761] = new Float32Array([-0.03432459011673927]);
  net_h1_w[762] = new Float32Array([-0.00876232422888279]);
  net_h1_w[763] = new Float32Array([-0.017256218940019608]);
  net_h1_w[764] = new Float32Array([0.019379857927560806]);
  net_h1_w[765] = new Float32Array([-0.008992143906652927]);
  net_h1_w[766] = new Float32Array([0.05091132968664169]);
  net_h1_w[767] = new Float32Array([0.04795138165354729]);
  const net_h1_b = new Float32Array([0]);
  const net_o_w = new Float32Array([0.0416615754365921]);
  const net_o_b = 0;
  
  //}}}
  
  //}}}

  const cwtch = new(cwtchStruct);

  cwtch.initOnce();
  cwtch.uciArgv();

  //{{{  connect to stdio
  
  process.stdin.setEncoding('utf8');
  
  process.stdin.on('readable', function() {
    let chunk = process.stdin.read();
    process.stdin.resume();
    if (chunk !== null) {
      cwtch.uciExec(chunk);
    }
  });
  
  process.stdin.on('end', function() {
    process.exit();
  });
  
  //}}}

})();

