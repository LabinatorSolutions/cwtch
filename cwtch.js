
(function() {

  //{{{  constants
  
  const IMAP = Array(16);
  
  const MAX_PLY = 128;
  const MATE    = 30000;
  
  const WHITE = 0x0;
  const BLACK = 0x8;
  
  const PIECE_MASK  = 0x7;
  const COLOUR_MASK = 0x8;
  
  const PAWN   = 1;
  const KNIGHT = 2;
  const BISHOP = 3;
  const ROOK   = 4;
  const QUEEN  = 5;
  const KING   = 6;
  const EDGE   = 7;
  
  const W_PAWN   = PAWN;
  const W_KNIGHT = KNIGHT;
  const W_BISHOP = BISHOP;
  const W_ROOK   = ROOK;
  const W_QUEEN  = QUEEN;
  const W_KING   = KING;
  
  const B_PAWN   = PAWN   | BLACK;
  const B_KNIGHT = KNIGHT | BLACK;
  const B_BISHOP = BISHOP | BLACK;
  const B_ROOK   = ROOK   | BLACK;
  const B_QUEEN  = QUEEN  | BLACK;
  const B_KING   = KING   | BLACK;
  
  const PPHASE = 0;
  const NPHASE = 1;
  const BPHASE = 1;
  const RPHASE = 2;
  const QPHASE = 4;
  const KPHASE = 0;
  const TPHASE = PPHASE*16 + NPHASE*4 + BPHASE*4 + RPHASE*4 + QPHASE*2 + KPHASE*2;
  const VPHASE = [PPHASE,NPHASE,BPHASE,RPHASE,QPHASE,KPHASE];
  
  const TT_SIZE  = 1 << 20;
  const TT_MASK  = TT_SIZE - 1;
  const TT_EXACT = 0x01;
  const TT_ALPHA = 0x02;
  const TT_BETA  = 0x04;
  
  const ADJACENT = [1,1,0,0,0,0,0,0,0,0,0,1,1,1];
  
  //
  // E == EMPTY, X = OFF BOARD, - == CANNOT HAPPEN
  //
  //                  0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15
  //                  E  W  W  W  W  W  W  X  -  B  B  B  B  B  B  -
  //                  E  P  N  B  R  Q  K  X  -  P  N  B  R  Q  K  -
  //
  const IS_O       = [0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0];
  const IS_E       = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  const IS_OE      = [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0];
  
  const IS_P       = [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0];
  const IS_N       = [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0];
  const IS_NBRQ    = [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0];
  const IS_NBRQKE  = [1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0];
  const IS_RQKE    = [1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0];
  const IS_Q       = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0];
  const IS_QKE     = [1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0];
  const IS_K       = [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0];
  const IS_KN      = [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0];
  const IS_SLIDER  = [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0];
  
  const IS_W       = [0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  const IS_WE      = [1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  const IS_WP      = [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  const IS_WN      = [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  const IS_WNBRQ   = [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  const IS_WPNBRQ  = [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  const IS_WPNBRQE = [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  const IS_WB      = [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  const IS_WR      = [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  const IS_WBQ     = [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  const IS_WRQ     = [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  const IS_WQ      = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  const IS_WK      = [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  
  const IS_B       = [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0];
  const IS_BE      = [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0];
  const IS_BP      = [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0];
  const IS_BN      = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0];
  const IS_BNBRQ   = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0];
  const IS_BPNBRQ  = [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0];
  const IS_BPNBRQE = [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0];
  const IS_BB      = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0];
  const IS_BR      = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0];
  const IS_BBQ     = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0];
  const IS_BRQ     = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0];
  const IS_BQ      = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0];
  const IS_BK      = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0];
  
  const OBJ_CHAR = ['.','P','N','B','R','Q','K','x','y','p','n','b','r','q','k','z'];
  
  const A1 = 110;
  const B1 = 111;
  const C1 = 112;
  const D1 = 113;
  const E1 = 114;
  const F1 = 115;
  const G1 = 116;
  const H1 = 117;
  const B2 = 99;
  const C2 = 100;
  const G2 = 104;
  const H2 = 105;
  const B7 = 39;
  const C7 = 40;
  const G7 = 44;
  const H7 = 45;
  const A8 = 26;
  const B8 = 27;
  const C8 = 28;
  const D8 = 29;
  const E8 = 30;
  const F8 = 31;
  const G8 = 32;
  const H8 = 33;
  
  const B88 = [26, 27, 28, 29, 30, 31, 32, 33,
               38, 39, 40, 41, 42, 43, 44, 45,
               50, 51, 52, 53, 54, 55, 56, 57,
               62, 63, 64, 65, 66, 67, 68, 69,
               74, 75, 76, 77, 78, 79, 80, 81,
               86, 87, 88, 89, 90, 91, 92, 93,
               98, 99, 100,101,102,103,104,105,
               110,111,112,113,114,115,116,117];
  
  const B144 = [0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0, 0,
                0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0, 0,
                0, 0, 0,  1,  2,  3,  4,  5,  6,  7,  0, 0,
                0, 0, 8,  9,  10, 11, 12, 13, 14, 15, 0, 0,
                0, 0, 16, 17, 18, 19, 20, 21, 22, 23, 0, 0,
                0, 0, 24, 25, 26, 27, 28, 29, 30, 31, 0, 0,
                0, 0, 32, 33, 34, 35, 36, 37, 38, 39, 0, 0,
                0, 0, 40, 41, 42, 43, 44, 45, 46, 47, 0, 0,
                0, 0, 48, 49, 50, 51, 52, 53, 54, 55, 0, 0,
                0, 0, 56, 57, 58, 59, 60, 61, 62, 63, 0, 0,
                0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0, 0,
                0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0, 0];
  
  
  const COORDS = ['??', '??', '??', '??', '??', '??', '??', '??', '??', '??', '??', '??',
                  '??', '??', '??', '??', '??', '??', '??', '??', '??', '??', '??', '??',
                  '??', '??', 'a8', 'b8', 'c8', 'd8', 'e8', 'f8', 'g8', 'h8', '??', '??',
                  '??', '??', 'a7', 'b7', 'c7', 'd7', 'e7', 'f7', 'g7', 'h7', '??', '??',
                  '??', '??', 'a6', 'b6', 'c6', 'd6', 'e6', 'f6', 'g6', 'h6', '??', '??',
                  '??', '??', 'a5', 'b5', 'c5', 'd5', 'e5', 'f5', 'g5', 'h5', '??', '??',
                  '??', '??', 'a4', 'b4', 'c4', 'd4', 'e4', 'f4', 'g4', 'h4', '??', '??',
                  '??', '??', 'a3', 'b3', 'c3', 'd3', 'e3', 'f3', 'g3', 'h3', '??', '??',
                  '??', '??', 'a2', 'b2', 'c2', 'd2', 'e2', 'f2', 'g2', 'h2', '??', '??',
                  '??', '??', 'a1', 'b1', 'c1', 'd1', 'e1', 'f1', 'g1', 'h1', '??', '??',
                  '??', '??', '??', '??', '??', '??', '??', '??', '??', '??', '??', '??',
                  '??', '??', '??', '??', '??', '??', '??', '??', '??', '??', '??', '??'];
  
  const RANK = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0,
                0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0,
                0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0,
                0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0,
                0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0,
                0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0,
                0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0,
                0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  
  const FILE = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0,
                0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0,
                0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0,
                0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0,
                0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0,
                0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0,
                0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0,
                0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  
  const CENTRE = [0, 0, 0, 0,  0,  0,  0,  0,  0,  0, 0, 0,
                  0, 0, 0, 0,  0,  0,  0,  0,  0,  0, 0, 0,
                  0, 0, 1, 2,  3,  4,  4,  3,  2,  1, 0, 0,
                  0, 0, 2, 6,  8,  10, 10, 8,  6,  2, 0, 0,
                  0, 0, 3, 8,  15, 18, 18, 15, 8,  3, 0, 0,
                  0, 0, 4, 10, 18, 28, 28, 18, 10, 4, 0, 0,
                  0, 0, 4, 10, 18, 28, 28, 19, 10, 4, 0, 0,
                  0, 0, 3, 8,  15, 18, 18, 15, 8,  3, 0, 0,
                  0, 0, 2, 6,  8,  10, 10, 8,  6,  2, 0, 0,
                  0, 0, 1, 2,  3,  4,  4,  3,  2,  1, 0, 0,
                  0, 0, 0, 0,  0,  0,  0,  0,  0,  0, 0, 0,
                  0, 0, 0, 0,  0,  0,  0,  0,  0,  0, 0, 0];
  
  const MAX_MOVES = 256;
  
  const ALL_MOVES        = 0;
  const NOISY_MOVES_ONLY = 1;
  
  const MOVE_TO_BITS     = 0;
  const MOVE_FR_BITS     = 8;
  const MOVE_TOOBJ_BITS  = 16;
  const MOVE_FROBJ_BITS  = 20;
  const MOVE_PROMAS_BITS = 29;
  
  const MOVE_TO_MASK       = 0x000000FF;
  const MOVE_FR_MASK       = 0x0000FF00;
  const MOVE_TOOBJ_MASK    = 0x000F0000;
  const MOVE_FROBJ_MASK    = 0x00F00000;
  const MOVE_KINGMOVE_MASK = 0x01000000;
  const MOVE_EPTAKE_MASK   = 0x02000000;
  const MOVE_EPMAKE_MASK   = 0x04000000;
  const MOVE_CASTLE_MASK   = 0x08000000;
  const MOVE_PROMOTE_MASK  = 0x10000000;
  const MOVE_PROMAS_MASK   = 0x60000000;  // NBRQ.
  const MOVE_LEGAL_MASK    = 0x80000000;
  
  const MOVE_CLEAN_MASK    = ~MOVE_LEGAL_MASK & 0xFFFFFFFF;
  const MOVE_NOISY_MASK    = MOVE_TOOBJ_MASK | MOVE_EPTAKE_MASK;
  const MOVE_IKKY_MASK     = MOVE_KINGMOVE_MASK | MOVE_CASTLE_MASK | MOVE_PROMOTE_MASK | MOVE_EPTAKE_MASK | MOVE_EPMAKE_MASK;
  const MOVE_REPRESET_MASK = MOVE_TOOBJ_MASK | MOVE_CASTLE_MASK | MOVE_PROMOTE_MASK | MOVE_EPTAKE_MASK;
  
  const MOVE_E1G1 = MOVE_KINGMOVE_MASK | MOVE_CASTLE_MASK | (W_KING << MOVE_FROBJ_BITS) | (E1 << MOVE_FR_BITS) | G1;
  const MOVE_E1C1 = MOVE_KINGMOVE_MASK | MOVE_CASTLE_MASK | (W_KING << MOVE_FROBJ_BITS) | (E1 << MOVE_FR_BITS) | C1;
  const MOVE_E8G8 = MOVE_KINGMOVE_MASK | MOVE_CASTLE_MASK | (B_KING << MOVE_FROBJ_BITS) | (E8 << MOVE_FR_BITS) | G8;
  const MOVE_E8C8 = MOVE_KINGMOVE_MASK | MOVE_CASTLE_MASK | (B_KING << MOVE_FROBJ_BITS) | (E8 << MOVE_FR_BITS) | C8;
  
  const QPRO = (QUEEN-2)  << MOVE_PROMAS_BITS | MOVE_PROMOTE_MASK;
  const RPRO = (ROOK-2)   << MOVE_PROMAS_BITS | MOVE_PROMOTE_MASK;
  const BPRO = (BISHOP-2) << MOVE_PROMAS_BITS | MOVE_PROMOTE_MASK;
  const NPRO = (KNIGHT-2) << MOVE_PROMAS_BITS | MOVE_PROMOTE_MASK;
  
  const WHITE_RIGHTS_KING  = 0x00000001;
  const WHITE_RIGHTS_QUEEN = 0x00000002;
  const BLACK_RIGHTS_KING  = 0x00000004;
  const BLACK_RIGHTS_QUEEN = 0x00000008;
  const WHITE_RIGHTS       = WHITE_RIGHTS_QUEEN | WHITE_RIGHTS_KING;
  const BLACK_RIGHTS       = BLACK_RIGHTS_QUEEN | BLACK_RIGHTS_KING;
  
  const MASK_RIGHTS = [15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
                       15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
                       15, 15, ~8, 15, 15, 15, ~12,15, 15, ~4, 15, 15,
                       15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
                       15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
                       15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
                       15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
                       15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
                       15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
                       15, 15, ~2, 15, 15, 15, ~3, 15, 15, ~1, 15, 15,
                       15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
                       15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15];
  
  const W_OFFSET_ORTH  = -12;
  const W_OFFSET_DIAG1 = -13;
  const W_OFFSET_DIAG2 = -11;
  
  const B_OFFSET_ORTH  = 12;
  const B_OFFSET_DIAG1 = 13;
  const B_OFFSET_DIAG2 = 11;
  
  const KNIGHT_OFFSETS  = [25,-25,23,-23,14,-14,10,-10];
  const BISHOP_OFFSETS  = [11,-11,13,-13];
  const ROOK_OFFSETS    = [1,-1,12,-12];
  const QUEEN_OFFSETS   = [11,-11,13,-13,1,-1,12,-12];
  const KING_OFFSETS    = [11,-11,13,-13,1,-1,12,-12];
  
  const SLIDER_OFFSETS = [0, 0, 0, BISHOP_OFFSETS, ROOK_OFFSETS, QUEEN_OFFSETS];
  
  const WB_CAN_CAPTURE  = [IS_BPNBRQ,      IS_WPNBRQ];
  const WB_OUR_PIECE    = [IS_W,           IS_B];
  const WB_OFFSET_ORTH  = [W_OFFSET_ORTH,  B_OFFSET_ORTH];
  const WB_OFFSET_DIAG1 = [W_OFFSET_DIAG1, B_OFFSET_DIAG1];
  const WB_OFFSET_DIAG2 = [W_OFFSET_DIAG2, B_OFFSET_DIAG2];
  const WB_HOME_RANK    = [2,              7];
  const WB_PROMOTE_RANK = [7,              2];
  const WB_EP_RANK      = [5,              4];
  const WB_RQ           = [IS_WRQ,         IS_BRQ];
  const WB_BQ           = [IS_WBQ,         IS_BBQ];
  const WB_PAWN         = [W_PAWN,         B_PAWN];
  
  //{{{  ALIGNED
  
  const ALIGNED = [
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,1,1,1,1,1,1,1,7,7,7,7,12,13,0,0,0,0,0,0,7,7,7,7,12,0,13,0,0,0,0,0,7,7,7,7,12,0,0,13,0,0,0,0,7,7,7,7,12,0,0,0,13,0,0,0,7,7,7,7,12,0,0,0,0,13,0,0,7,7,7,7,12,0,0,0,0,0,13,0,7,7,7,7,12,0,0,0,0,0,0,13,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-1,0,1,1,1,1,1,1,7,7,7,7,11,12,13,0,0,0,0,0,7,7,7,7,0,12,0,13,0,0,0,0,7,7,7,7,0,12,0,0,13,0,0,0,7,7,7,7,0,12,0,0,0,13,0,0,7,7,7,7,0,12,0,0,0,0,13,0,7,7,7,7,0,12,0,0,0,0,0,13,7,7,7,7,0,12,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-1,-1,0,1,1,1,1,1,7,7,7,7,0,11,12,13,0,0,0,0,7,7,7,7,11,0,12,0,13,0,0,0,7,7,7,7,0,0,12,0,0,13,0,0,7,7,7,7,0,0,12,0,0,0,13,0,7,7,7,7,0,0,12,0,0,0,0,13,7,7,7,7,0,0,12,0,0,0,0,0,7,7,7,7,0,0,12,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-1,-1,-1,0,1,1,1,1,7,7,7,7,0,0,11,12,13,0,0,0,7,7,7,7,0,11,0,12,0,13,0,0,7,7,7,7,11,0,0,12,0,0,13,0,7,7,7,7,0,0,0,12,0,0,0,13,7,7,7,7,0,0,0,12,0,0,0,0,7,7,7,7,0,0,0,12,0,0,0,0,7,7,7,7,0,0,0,12,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-1,-1,-1,-1,0,1,1,1,7,7,7,7,0,0,0,11,12,13,0,0,7,7,7,7,0,0,11,0,12,0,13,0,7,7,7,7,0,11,0,0,12,0,0,13,7,7,7,7,11,0,0,0,12,0,0,0,7,7,7,7,0,0,0,0,12,0,0,0,7,7,7,7,0,0,0,0,12,0,0,0,7,7,7,7,0,0,0,0,12,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-1,-1,-1,-1,-1,0,1,1,7,7,7,7,0,0,0,0,11,12,13,0,7,7,7,7,0,0,0,11,0,12,0,13,7,7,7,7,0,0,11,0,0,12,0,0,7,7,7,7,0,11,0,0,0,12,0,0,7,7,7,7,11,0,0,0,0,12,0,0,7,7,7,7,0,0,0,0,0,12,0,0,7,7,7,7,0,0,0,0,0,12,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-1,-1,-1,-1,-1,-1,0,1,7,7,7,7,0,0,0,0,0,11,12,13,7,7,7,7,0,0,0,0,11,0,12,0,7,7,7,7,0,0,0,11,0,0,12,0,7,7,7,7,0,0,11,0,0,0,12,0,7,7,7,7,0,11,0,0,0,0,12,0,7,7,7,7,11,0,0,0,0,0,12,0,7,7,7,7,0,0,0,0,0,0,12,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-1,-1,-1,-1,-1,-1,-1,0,7,7,7,7,0,0,0,0,0,0,11,12,7,7,7,7,0,0,0,0,0,11,0,12,7,7,7,7,0,0,0,0,11,0,0,12,7,7,7,7,0,0,0,11,0,0,0,12,7,7,7,7,0,0,11,0,0,0,0,12,7,7,7,7,0,11,0,0,0,0,0,12,7,7,7,7,11,0,0,0,0,0,0,12,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-12,-11,0,0,0,0,0,0,7,7,7,7,0,1,1,1,1,1,1,1,7,7,7,7,12,13,0,0,0,0,0,0,7,7,7,7,12,0,13,0,0,0,0,0,7,7,7,7,12,0,0,13,0,0,0,0,7,7,7,7,12,0,0,0,13,0,0,0,7,7,7,7,12,0,0,0,0,13,0,0,7,7,7,7,12,0,0,0,0,0,13,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-13,-12,-11,0,0,0,0,0,7,7,7,7,-1,0,1,1,1,1,1,1,7,7,7,7,11,12,13,0,0,0,0,0,7,7,7,7,0,12,0,13,0,0,0,0,7,7,7,7,0,12,0,0,13,0,0,0,7,7,7,7,0,12,0,0,0,13,0,0,7,7,7,7,0,12,0,0,0,0,13,0,7,7,7,7,0,12,0,0,0,0,0,13,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,-13,-12,-11,0,0,0,0,7,7,7,7,-1,-1,0,1,1,1,1,1,7,7,7,7,0,11,12,13,0,0,0,0,7,7,7,7,11,0,12,0,13,0,0,0,7,7,7,7,0,0,12,0,0,13,0,0,7,7,7,7,0,0,12,0,0,0,13,0,7,7,7,7,0,0,12,0,0,0,0,13,7,7,7,7,0,0,12,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,-13,-12,-11,0,0,0,7,7,7,7,-1,-1,-1,0,1,1,1,1,7,7,7,7,0,0,11,12,13,0,0,0,7,7,7,7,0,11,0,12,0,13,0,0,7,7,7,7,11,0,0,12,0,0,13,0,7,7,7,7,0,0,0,12,0,0,0,13,7,7,7,7,0,0,0,12,0,0,0,0,7,7,7,7,0,0,0,12,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,-13,-12,-11,0,0,7,7,7,7,-1,-1,-1,-1,0,1,1,1,7,7,7,7,0,0,0,11,12,13,0,0,7,7,7,7,0,0,11,0,12,0,13,0,7,7,7,7,0,11,0,0,12,0,0,13,7,7,7,7,11,0,0,0,12,0,0,0,7,7,7,7,0,0,0,0,12,0,0,0,7,7,7,7,0,0,0,0,12,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,-13,-12,-11,0,7,7,7,7,-1,-1,-1,-1,-1,0,1,1,7,7,7,7,0,0,0,0,11,12,13,0,7,7,7,7,0,0,0,11,0,12,0,13,7,7,7,7,0,0,11,0,0,12,0,0,7,7,7,7,0,11,0,0,0,12,0,0,7,7,7,7,11,0,0,0,0,12,0,0,7,7,7,7,0,0,0,0,0,12,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,-13,-12,-11,7,7,7,7,-1,-1,-1,-1,-1,-1,0,1,7,7,7,7,0,0,0,0,0,11,12,13,7,7,7,7,0,0,0,0,11,0,12,0,7,7,7,7,0,0,0,11,0,0,12,0,7,7,7,7,0,0,11,0,0,0,12,0,7,7,7,7,0,11,0,0,0,0,12,0,7,7,7,7,11,0,0,0,0,0,12,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,-13,-12,7,7,7,7,-1,-1,-1,-1,-1,-1,-1,0,7,7,7,7,0,0,0,0,0,0,11,12,7,7,7,7,0,0,0,0,0,11,0,12,7,7,7,7,0,0,0,0,11,0,0,12,7,7,7,7,0,0,0,11,0,0,0,12,7,7,7,7,0,0,11,0,0,0,0,12,7,7,7,7,0,11,0,0,0,0,0,12,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-12,0,-11,0,0,0,0,0,7,7,7,7,-12,-11,0,0,0,0,0,0,7,7,7,7,0,1,1,1,1,1,1,1,7,7,7,7,12,13,0,0,0,0,0,0,7,7,7,7,12,0,13,0,0,0,0,0,7,7,7,7,12,0,0,13,0,0,0,0,7,7,7,7,12,0,0,0,13,0,0,0,7,7,7,7,12,0,0,0,0,13,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,-12,0,-11,0,0,0,0,7,7,7,7,-13,-12,-11,0,0,0,0,0,7,7,7,7,-1,0,1,1,1,1,1,1,7,7,7,7,11,12,13,0,0,0,0,0,7,7,7,7,0,12,0,13,0,0,0,0,7,7,7,7,0,12,0,0,13,0,0,0,7,7,7,7,0,12,0,0,0,13,0,0,7,7,7,7,0,12,0,0,0,0,13,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-13,0,-12,0,-11,0,0,0,7,7,7,7,0,-13,-12,-11,0,0,0,0,7,7,7,7,-1,-1,0,1,1,1,1,1,7,7,7,7,0,11,12,13,0,0,0,0,7,7,7,7,11,0,12,0,13,0,0,0,7,7,7,7,0,0,12,0,0,13,0,0,7,7,7,7,0,0,12,0,0,0,13,0,7,7,7,7,0,0,12,0,0,0,0,13,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,-13,0,-12,0,-11,0,0,7,7,7,7,0,0,-13,-12,-11,0,0,0,7,7,7,7,-1,-1,-1,0,1,1,1,1,7,7,7,7,0,0,11,12,13,0,0,0,7,7,7,7,0,11,0,12,0,13,0,0,7,7,7,7,11,0,0,12,0,0,13,0,7,7,7,7,0,0,0,12,0,0,0,13,7,7,7,7,0,0,0,12,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,-13,0,-12,0,-11,0,7,7,7,7,0,0,0,-13,-12,-11,0,0,7,7,7,7,-1,-1,-1,-1,0,1,1,1,7,7,7,7,0,0,0,11,12,13,0,0,7,7,7,7,0,0,11,0,12,0,13,0,7,7,7,7,0,11,0,0,12,0,0,13,7,7,7,7,11,0,0,0,12,0,0,0,7,7,7,7,0,0,0,0,12,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,-13,0,-12,0,-11,7,7,7,7,0,0,0,0,-13,-12,-11,0,7,7,7,7,-1,-1,-1,-1,-1,0,1,1,7,7,7,7,0,0,0,0,11,12,13,0,7,7,7,7,0,0,0,11,0,12,0,13,7,7,7,7,0,0,11,0,0,12,0,0,7,7,7,7,0,11,0,0,0,12,0,0,7,7,7,7,11,0,0,0,0,12,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,-13,0,-12,0,7,7,7,7,0,0,0,0,0,-13,-12,-11,7,7,7,7,-1,-1,-1,-1,-1,-1,0,1,7,7,7,7,0,0,0,0,0,11,12,13,7,7,7,7,0,0,0,0,11,0,12,0,7,7,7,7,0,0,0,11,0,0,12,0,7,7,7,7,0,0,11,0,0,0,12,0,7,7,7,7,0,11,0,0,0,0,12,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,-13,0,-12,7,7,7,7,0,0,0,0,0,0,-13,-12,7,7,7,7,-1,-1,-1,-1,-1,-1,-1,0,7,7,7,7,0,0,0,0,0,0,11,12,7,7,7,7,0,0,0,0,0,11,0,12,7,7,7,7,0,0,0,0,11,0,0,12,7,7,7,7,0,0,0,11,0,0,0,12,7,7,7,7,0,0,11,0,0,0,0,12,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-12,0,0,-11,0,0,0,0,7,7,7,7,-12,0,-11,0,0,0,0,0,7,7,7,7,-12,-11,0,0,0,0,0,0,7,7,7,7,0,1,1,1,1,1,1,1,7,7,7,7,12,13,0,0,0,0,0,0,7,7,7,7,12,0,13,0,0,0,0,0,7,7,7,7,12,0,0,13,0,0,0,0,7,7,7,7,12,0,0,0,13,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,-12,0,0,-11,0,0,0,7,7,7,7,0,-12,0,-11,0,0,0,0,7,7,7,7,-13,-12,-11,0,0,0,0,0,7,7,7,7,-1,0,1,1,1,1,1,1,7,7,7,7,11,12,13,0,0,0,0,0,7,7,7,7,0,12,0,13,0,0,0,0,7,7,7,7,0,12,0,0,13,0,0,0,7,7,7,7,0,12,0,0,0,13,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,-12,0,0,-11,0,0,7,7,7,7,-13,0,-12,0,-11,0,0,0,7,7,7,7,0,-13,-12,-11,0,0,0,0,7,7,7,7,-1,-1,0,1,1,1,1,1,7,7,7,7,0,11,12,13,0,0,0,0,7,7,7,7,11,0,12,0,13,0,0,0,7,7,7,7,0,0,12,0,0,13,0,0,7,7,7,7,0,0,12,0,0,0,13,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-13,0,0,-12,0,0,-11,0,7,7,7,7,0,-13,0,-12,0,-11,0,0,7,7,7,7,0,0,-13,-12,-11,0,0,0,7,7,7,7,-1,-1,-1,0,1,1,1,1,7,7,7,7,0,0,11,12,13,0,0,0,7,7,7,7,0,11,0,12,0,13,0,0,7,7,7,7,11,0,0,12,0,0,13,0,7,7,7,7,0,0,0,12,0,0,0,13,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,-13,0,0,-12,0,0,-11,7,7,7,7,0,0,-13,0,-12,0,-11,0,7,7,7,7,0,0,0,-13,-12,-11,0,0,7,7,7,7,-1,-1,-1,-1,0,1,1,1,7,7,7,7,0,0,0,11,12,13,0,0,7,7,7,7,0,0,11,0,12,0,13,0,7,7,7,7,0,11,0,0,12,0,0,13,7,7,7,7,11,0,0,0,12,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,-13,0,0,-12,0,0,7,7,7,7,0,0,0,-13,0,-12,0,-11,7,7,7,7,0,0,0,0,-13,-12,-11,0,7,7,7,7,-1,-1,-1,-1,-1,0,1,1,7,7,7,7,0,0,0,0,11,12,13,0,7,7,7,7,0,0,0,11,0,12,0,13,7,7,7,7,0,0,11,0,0,12,0,0,7,7,7,7,0,11,0,0,0,12,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,-13,0,0,-12,0,7,7,7,7,0,0,0,0,-13,0,-12,0,7,7,7,7,0,0,0,0,0,-13,-12,-11,7,7,7,7,-1,-1,-1,-1,-1,-1,0,1,7,7,7,7,0,0,0,0,0,11,12,13,7,7,7,7,0,0,0,0,11,0,12,0,7,7,7,7,0,0,0,11,0,0,12,0,7,7,7,7,0,0,11,0,0,0,12,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,-13,0,0,-12,7,7,7,7,0,0,0,0,0,-13,0,-12,7,7,7,7,0,0,0,0,0,0,-13,-12,7,7,7,7,-1,-1,-1,-1,-1,-1,-1,0,7,7,7,7,0,0,0,0,0,0,11,12,7,7,7,7,0,0,0,0,0,11,0,12,7,7,7,7,0,0,0,0,11,0,0,12,7,7,7,7,0,0,0,11,0,0,0,12,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-12,0,0,0,-11,0,0,0,7,7,7,7,-12,0,0,-11,0,0,0,0,7,7,7,7,-12,0,-11,0,0,0,0,0,7,7,7,7,-12,-11,0,0,0,0,0,0,7,7,7,7,0,1,1,1,1,1,1,1,7,7,7,7,12,13,0,0,0,0,0,0,7,7,7,7,12,0,13,0,0,0,0,0,7,7,7,7,12,0,0,13,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,-12,0,0,0,-11,0,0,7,7,7,7,0,-12,0,0,-11,0,0,0,7,7,7,7,0,-12,0,-11,0,0,0,0,7,7,7,7,-13,-12,-11,0,0,0,0,0,7,7,7,7,-1,0,1,1,1,1,1,1,7,7,7,7,11,12,13,0,0,0,0,0,7,7,7,7,0,12,0,13,0,0,0,0,7,7,7,7,0,12,0,0,13,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,-12,0,0,0,-11,0,7,7,7,7,0,0,-12,0,0,-11,0,0,7,7,7,7,-13,0,-12,0,-11,0,0,0,7,7,7,7,0,-13,-12,-11,0,0,0,0,7,7,7,7,-1,-1,0,1,1,1,1,1,7,7,7,7,0,11,12,13,0,0,0,0,7,7,7,7,11,0,12,0,13,0,0,0,7,7,7,7,0,0,12,0,0,13,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,-12,0,0,0,-11,7,7,7,7,-13,0,0,-12,0,0,-11,0,7,7,7,7,0,-13,0,-12,0,-11,0,0,7,7,7,7,0,0,-13,-12,-11,0,0,0,7,7,7,7,-1,-1,-1,0,1,1,1,1,7,7,7,7,0,0,11,12,13,0,0,0,7,7,7,7,0,11,0,12,0,13,0,0,7,7,7,7,11,0,0,12,0,0,13,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-13,0,0,0,-12,0,0,0,7,7,7,7,0,-13,0,0,-12,0,0,-11,7,7,7,7,0,0,-13,0,-12,0,-11,0,7,7,7,7,0,0,0,-13,-12,-11,0,0,7,7,7,7,-1,-1,-1,-1,0,1,1,1,7,7,7,7,0,0,0,11,12,13,0,0,7,7,7,7,0,0,11,0,12,0,13,0,7,7,7,7,0,11,0,0,12,0,0,13,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,-13,0,0,0,-12,0,0,7,7,7,7,0,0,-13,0,0,-12,0,0,7,7,7,7,0,0,0,-13,0,-12,0,-11,7,7,7,7,0,0,0,0,-13,-12,-11,0,7,7,7,7,-1,-1,-1,-1,-1,0,1,1,7,7,7,7,0,0,0,0,11,12,13,0,7,7,7,7,0,0,0,11,0,12,0,13,7,7,7,7,0,0,11,0,0,12,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,-13,0,0,0,-12,0,7,7,7,7,0,0,0,-13,0,0,-12,0,7,7,7,7,0,0,0,0,-13,0,-12,0,7,7,7,7,0,0,0,0,0,-13,-12,-11,7,7,7,7,-1,-1,-1,-1,-1,-1,0,1,7,7,7,7,0,0,0,0,0,11,12,13,7,7,7,7,0,0,0,0,11,0,12,0,7,7,7,7,0,0,0,11,0,0,12,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,-13,0,0,0,-12,7,7,7,7,0,0,0,0,-13,0,0,-12,7,7,7,7,0,0,0,0,0,-13,0,-12,7,7,7,7,0,0,0,0,0,0,-13,-12,7,7,7,7,-1,-1,-1,-1,-1,-1,-1,0,7,7,7,7,0,0,0,0,0,0,11,12,7,7,7,7,0,0,0,0,0,11,0,12,7,7,7,7,0,0,0,0,11,0,0,12,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-12,0,0,0,0,-11,0,0,7,7,7,7,-12,0,0,0,-11,0,0,0,7,7,7,7,-12,0,0,-11,0,0,0,0,7,7,7,7,-12,0,-11,0,0,0,0,0,7,7,7,7,-12,-11,0,0,0,0,0,0,7,7,7,7,0,1,1,1,1,1,1,1,7,7,7,7,12,13,0,0,0,0,0,0,7,7,7,7,12,0,13,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,-12,0,0,0,0,-11,0,7,7,7,7,0,-12,0,0,0,-11,0,0,7,7,7,7,0,-12,0,0,-11,0,0,0,7,7,7,7,0,-12,0,-11,0,0,0,0,7,7,7,7,-13,-12,-11,0,0,0,0,0,7,7,7,7,-1,0,1,1,1,1,1,1,7,7,7,7,11,12,13,0,0,0,0,0,7,7,7,7,0,12,0,13,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,-12,0,0,0,0,-11,7,7,7,7,0,0,-12,0,0,0,-11,0,7,7,7,7,0,0,-12,0,0,-11,0,0,7,7,7,7,-13,0,-12,0,-11,0,0,0,7,7,7,7,0,-13,-12,-11,0,0,0,0,7,7,7,7,-1,-1,0,1,1,1,1,1,7,7,7,7,0,11,12,13,0,0,0,0,7,7,7,7,11,0,12,0,13,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,-12,0,0,0,0,7,7,7,7,0,0,0,-12,0,0,0,-11,7,7,7,7,-13,0,0,-12,0,0,-11,0,7,7,7,7,0,-13,0,-12,0,-11,0,0,7,7,7,7,0,0,-13,-12,-11,0,0,0,7,7,7,7,-1,-1,-1,0,1,1,1,1,7,7,7,7,0,0,11,12,13,0,0,0,7,7,7,7,0,11,0,12,0,13,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,-12,0,0,0,7,7,7,7,-13,0,0,0,-12,0,0,0,7,7,7,7,0,-13,0,0,-12,0,0,-11,7,7,7,7,0,0,-13,0,-12,0,-11,0,7,7,7,7,0,0,0,-13,-12,-11,0,0,7,7,7,7,-1,-1,-1,-1,0,1,1,1,7,7,7,7,0,0,0,11,12,13,0,0,7,7,7,7,0,0,11,0,12,0,13,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-13,0,0,0,0,-12,0,0,7,7,7,7,0,-13,0,0,0,-12,0,0,7,7,7,7,0,0,-13,0,0,-12,0,0,7,7,7,7,0,0,0,-13,0,-12,0,-11,7,7,7,7,0,0,0,0,-13,-12,-11,0,7,7,7,7,-1,-1,-1,-1,-1,0,1,1,7,7,7,7,0,0,0,0,11,12,13,0,7,7,7,7,0,0,0,11,0,12,0,13,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,-13,0,0,0,0,-12,0,7,7,7,7,0,0,-13,0,0,0,-12,0,7,7,7,7,0,0,0,-13,0,0,-12,0,7,7,7,7,0,0,0,0,-13,0,-12,0,7,7,7,7,0,0,0,0,0,-13,-12,-11,7,7,7,7,-1,-1,-1,-1,-1,-1,0,1,7,7,7,7,0,0,0,0,0,11,12,13,7,7,7,7,0,0,0,0,11,0,12,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,-13,0,0,0,0,-12,7,7,7,7,0,0,0,-13,0,0,0,-12,7,7,7,7,0,0,0,0,-13,0,0,-12,7,7,7,7,0,0,0,0,0,-13,0,-12,7,7,7,7,0,0,0,0,0,0,-13,-12,7,7,7,7,-1,-1,-1,-1,-1,-1,-1,0,7,7,7,7,0,0,0,0,0,0,11,12,7,7,7,7,0,0,0,0,0,11,0,12,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-12,0,0,0,0,0,-11,0,7,7,7,7,-12,0,0,0,0,-11,0,0,7,7,7,7,-12,0,0,0,-11,0,0,0,7,7,7,7,-12,0,0,-11,0,0,0,0,7,7,7,7,-12,0,-11,0,0,0,0,0,7,7,7,7,-12,-11,0,0,0,0,0,0,7,7,7,7,0,1,1,1,1,1,1,1,7,7,7,7,12,13,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,-12,0,0,0,0,0,-11,7,7,7,7,0,-12,0,0,0,0,-11,0,7,7,7,7,0,-12,0,0,0,-11,0,0,7,7,7,7,0,-12,0,0,-11,0,0,0,7,7,7,7,0,-12,0,-11,0,0,0,0,7,7,7,7,-13,-12,-11,0,0,0,0,0,7,7,7,7,-1,0,1,1,1,1,1,1,7,7,7,7,11,12,13,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,-12,0,0,0,0,0,7,7,7,7,0,0,-12,0,0,0,0,-11,7,7,7,7,0,0,-12,0,0,0,-11,0,7,7,7,7,0,0,-12,0,0,-11,0,0,7,7,7,7,-13,0,-12,0,-11,0,0,0,7,7,7,7,0,-13,-12,-11,0,0,0,0,7,7,7,7,-1,-1,0,1,1,1,1,1,7,7,7,7,0,11,12,13,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,-12,0,0,0,0,7,7,7,7,0,0,0,-12,0,0,0,0,7,7,7,7,0,0,0,-12,0,0,0,-11,7,7,7,7,-13,0,0,-12,0,0,-11,0,7,7,7,7,0,-13,0,-12,0,-11,0,0,7,7,7,7,0,0,-13,-12,-11,0,0,0,7,7,7,7,-1,-1,-1,0,1,1,1,1,7,7,7,7,0,0,11,12,13,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,-12,0,0,0,7,7,7,7,0,0,0,0,-12,0,0,0,7,7,7,7,-13,0,0,0,-12,0,0,0,7,7,7,7,0,-13,0,0,-12,0,0,-11,7,7,7,7,0,0,-13,0,-12,0,-11,0,7,7,7,7,0,0,0,-13,-12,-11,0,0,7,7,7,7,-1,-1,-1,-1,0,1,1,1,7,7,7,7,0,0,0,11,12,13,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,-12,0,0,7,7,7,7,-13,0,0,0,0,-12,0,0,7,7,7,7,0,-13,0,0,0,-12,0,0,7,7,7,7,0,0,-13,0,0,-12,0,0,7,7,7,7,0,0,0,-13,0,-12,0,-11,7,7,7,7,0,0,0,0,-13,-12,-11,0,7,7,7,7,-1,-1,-1,-1,-1,0,1,1,7,7,7,7,0,0,0,0,11,12,13,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-13,0,0,0,0,0,-12,0,7,7,7,7,0,-13,0,0,0,0,-12,0,7,7,7,7,0,0,-13,0,0,0,-12,0,7,7,7,7,0,0,0,-13,0,0,-12,0,7,7,7,7,0,0,0,0,-13,0,-12,0,7,7,7,7,0,0,0,0,0,-13,-12,-11,7,7,7,7,-1,-1,-1,-1,-1,-1,0,1,7,7,7,7,0,0,0,0,0,11,12,13,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,-13,0,0,0,0,0,-12,7,7,7,7,0,0,-13,0,0,0,0,-12,7,7,7,7,0,0,0,-13,0,0,0,-12,7,7,7,7,0,0,0,0,-13,0,0,-12,7,7,7,7,0,0,0,0,0,-13,0,-12,7,7,7,7,0,0,0,0,0,0,-13,-12,7,7,7,7,-1,-1,-1,-1,-1,-1,-1,0,7,7,7,7,0,0,0,0,0,0,11,12,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-12,0,0,0,0,0,0,-11,7,7,7,7,-12,0,0,0,0,0,-11,0,7,7,7,7,-12,0,0,0,0,-11,0,0,7,7,7,7,-12,0,0,0,-11,0,0,0,7,7,7,7,-12,0,0,-11,0,0,0,0,7,7,7,7,-12,0,-11,0,0,0,0,0,7,7,7,7,-12,-11,0,0,0,0,0,0,7,7,7,7,0,1,1,1,1,1,1,1,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,-12,0,0,0,0,0,0,7,7,7,7,0,-12,0,0,0,0,0,-11,7,7,7,7,0,-12,0,0,0,0,-11,0,7,7,7,7,0,-12,0,0,0,-11,0,0,7,7,7,7,0,-12,0,0,-11,0,0,0,7,7,7,7,0,-12,0,-11,0,0,0,0,7,7,7,7,-13,-12,-11,0,0,0,0,0,7,7,7,7,-1,0,1,1,1,1,1,1,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,-12,0,0,0,0,0,7,7,7,7,0,0,-12,0,0,0,0,0,7,7,7,7,0,0,-12,0,0,0,0,-11,7,7,7,7,0,0,-12,0,0,0,-11,0,7,7,7,7,0,0,-12,0,0,-11,0,0,7,7,7,7,-13,0,-12,0,-11,0,0,0,7,7,7,7,0,-13,-12,-11,0,0,0,0,7,7,7,7,-1,-1,0,1,1,1,1,1,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,-12,0,0,0,0,7,7,7,7,0,0,0,-12,0,0,0,0,7,7,7,7,0,0,0,-12,0,0,0,0,7,7,7,7,0,0,0,-12,0,0,0,-11,7,7,7,7,-13,0,0,-12,0,0,-11,0,7,7,7,7,0,-13,0,-12,0,-11,0,0,7,7,7,7,0,0,-13,-12,-11,0,0,0,7,7,7,7,-1,-1,-1,0,1,1,1,1,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,-12,0,0,0,7,7,7,7,0,0,0,0,-12,0,0,0,7,7,7,7,0,0,0,0,-12,0,0,0,7,7,7,7,-13,0,0,0,-12,0,0,0,7,7,7,7,0,-13,0,0,-12,0,0,-11,7,7,7,7,0,0,-13,0,-12,0,-11,0,7,7,7,7,0,0,0,-13,-12,-11,0,0,7,7,7,7,-1,-1,-1,-1,0,1,1,1,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,-12,0,0,7,7,7,7,0,0,0,0,0,-12,0,0,7,7,7,7,-13,0,0,0,0,-12,0,0,7,7,7,7,0,-13,0,0,0,-12,0,0,7,7,7,7,0,0,-13,0,0,-12,0,0,7,7,7,7,0,0,0,-13,0,-12,0,-11,7,7,7,7,0,0,0,0,-13,-12,-11,0,7,7,7,7,-1,-1,-1,-1,-1,0,1,1,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,-12,0,7,7,7,7,-13,0,0,0,0,0,-12,0,7,7,7,7,0,-13,0,0,0,0,-12,0,7,7,7,7,0,0,-13,0,0,0,-12,0,7,7,7,7,0,0,0,-13,0,0,-12,0,7,7,7,7,0,0,0,0,-13,0,-12,0,7,7,7,7,0,0,0,0,0,-13,-12,-11,7,7,7,7,-1,-1,-1,-1,-1,-1,0,1,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-13,0,0,0,0,0,0,-12,7,7,7,7,0,-13,0,0,0,0,0,-12,7,7,7,7,0,0,-13,0,0,0,0,-12,7,7,7,7,0,0,0,-13,0,0,0,-12,7,7,7,7,0,0,0,0,-13,0,0,-12,7,7,7,7,0,0,0,0,0,-13,0,-12,7,7,7,7,0,0,0,0,0,0,-13,-12,7,7,7,7,-1,-1,-1,-1,-1,-1,-1,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7]
  ];
  
  //}}}
  
  //}}}

  //{{{  prng primitives
  //
  // https://en.wikipedia.org/wiki/Mersenne_Twister
  //
  
  let twisterList  = new Uint32Array(624);
  let twisterIndex = 0;
  
  function twisterInit(seed) {
  
    const mt = twisterList;
  
    mt[0] = seed >>> 0;
  
    for (let i = 1; i < 624; i++) {
      mt[i] = (0x6C078965 * (mt[i - 1] ^ (mt[i - 1] >>> 30)) + i) >>> 0;
    }
  }
  
  function twisterFill() {
  
    const mt = twisterList;
  
    for (let i = 0; i < 624; i++) {
      let y = (mt[i] & 0x80000000) + (mt[(i + 1) % 624] & 0x7FFFFFFF);
      mt[i] = mt[(i + 397) % 624] ^ (y >>> 1);
      if (y % 2 !== 0) {
        mt[i] ^= 0x9908B0DF;
      }
    }
  }
  
  function twisterRand() {
  
    const mt = twisterList;
  
    if (twisterIndex === 0)
      twisterFill();
  
    let y = mt[twisterIndex];
    y ^= y >>> 11;
    y ^= (y << 7)  & 0x9D2C5680;
    y ^= (y << 15) & 0xEFC60000;
    y ^= y >>> 18;
  
    twisterIndex = (twisterIndex + 1) % 624;
  
    return y >>> 0;
  }
  
  twisterInit(123456789);
  
  //}}}
  //{{{  move primitives
  
  function moveClean (move) {
    return move & MOVE_CLEAN_MASK;
  }
  
  function moveIsNoisy (move) {
    return (move & MOVE_NOISY_MASK) != 0;
  }
  
  function moveIsQuiet (move) {
    return (move & MOVE_NOISY_MASK) == 0;
  }
  
  function moveEq (m1,m2) {
    return (m1 & MOVE_CLEAN_MASK) == (m2 & MOVE_CLEAN_MASK);
  }
  
  function moveFromSq (move) {
    return (move & MOVE_FR_MASK) >>> MOVE_FR_BITS;
  }
  
  function moveToSq (move) {
    return (move & MOVE_TO_MASK) >>> MOVE_TO_BITS;
  }
  
  function moveToObj (move) {
    return (move & MOVE_TOOBJ_MASK) >>> MOVE_TOOBJ_BITS;
  }
  
  function moveFromObj (move) {
    return (move & MOVE_FROBJ_MASK) >>> MOVE_FROBJ_BITS;
  }
  
  function movePromotePiece (move) {
    return ((move & MOVE_PROMAS_MASK) >>> MOVE_PROMAS_BITS) + 2;
  }
  
  function formatMove (move) {
  
    if (move == 0)
      return 'NaM';
  
    const fr = moveFromSq(move);
    const to = moveToSq(move);
  
    const frCoord = COORDS[fr];
    const toCoord = COORDS[to];
  
    const pro = (move & MOVE_PROMOTE_MASK) ? OBJ_CHAR[movePromotePiece(move)|BLACK] : '';
  
    return frCoord + toCoord + pro;
  }
  
  //}}}
  //{{{  board primitives
  
  function objColour (obj) {
    return obj & COLOUR_MASK;
  }
  
  function objPiece (obj) {
    return obj & PIECE_MASK;
  }
  
  function colourIndex (c) {
    return c >>> 3;
  }
  
  function colourIndexToggle (i) {
    return Math.abs(i-1);
  }
  
  function colourMultiplier (c) {
    return (-c >> 31) | 1;
  }
  
  function colourToggle (c) {
    return ~c & COLOUR_MASK;
  }
  
  function flip (sq) {
    let m = (143 - sq) / 12 | 0;
    return 12*m + sq%12;
  }
  
  //}}}
  //{{{  net primitives
  
  function relu(x) {
    return Math.max(0, x);
  }
  
  function inputIndex(obj, sq) {
    return IMAP[obj][sq];
  }
  
  //}}}

  //{{{  nodeStruct
  
  //{{{  struct
  
  function nodeStruct () {
  
    this.cwtch    = null;
    this.child  = null;
    this.parent = null;
    this.granny = null;
  
    this.ply = 0;
  
    this.quietNum   = 0;
    this.quietMoves = Array(MAX_MOVES).fill(0);
    this.quietRanks = Array(MAX_MOVES).fill(0);
  
    this.noisyNum   = 0;
    this.noisyMoves = Array(MAX_MOVES).fill(0);
    this.noisyRanks = Array(MAX_MOVES).fill(0);
  
    this.killer    = 0;
    this.killerNum = 0;
  
    this.nextMove = 0;
    this.stage    = 0;
    this.flags    = 0;
    this.inCheck  = 0;
  
    this.ttMove = 0;
  
    this.hHistoryLimit = 0;
    this.rights        = 0;
    this.ep            = 0;
    this.hLo           = new Uint32Array(1);
    this.hHi           = new Uint32Array(1);
    this.net_h1_a      = Array(net_h1_size);
  }
  
  //}}}
  
  //{{{  initMoveGen
  
  nodeStruct.prototype.initMoveGen = function (flags, inCheck) {
  
    this.stage     = 0;
    this.flags     = flags;
    this.inCheck   = inCheck;
  
  }
  
  //}}}
  
  //{{{  getNextMove
  
  nodeStruct.prototype.getNextMove = function () {
  
    const l      = this.cwtch;
    const ttMove = this.ttMove;
  
    switch (this.stage) {
  
      case 0:
  
        this.stage++;
  
        if (ttMove && l.ttValidate(ttMove)) {
          return ttMove;
        }
  
        if (ttMove)
          console.log('info invalid tt move', formatMove(ttMove), l.fen(), this.ply); //hack
  
      case 1:
  
        this.noisyNum    = 0;
        this.quietNum    = 0;
        this.killerNum   = 0;
  
        this.genNonCastlingMoves();
  
        this.nextMove = 0;
        this.stage++;
  
      case 2:
  
        if (this.nextMove < this.noisyNum)
          return this.nextStagedNoisy();
  
        if (this.flags & NOISY_MOVES_ONLY)
          return 0;
  
        this.genCastlingMoves();
  
        this.stage++;
  
      case 3:
  
        this.stage++;
  
        if (this.killerNum)
          return this.killer;
  
      case 4:
  
        this.rankQuiets();
  
        this.stage++;
        this.nextMove = 0;
  
      case 5:
  
        if (this.nextMove < this.quietNum)
          return this.nextStagedQuiet();
  
        return 0;
    }
  }
  
  //}}}
  //{{{  nextStagedNoisy
  
  nodeStruct.prototype.nextStagedNoisy = function () {
  
    let maxR = -100000;
    let maxI = 0;
  
    for (let i=this.nextMove; i < this.noisyNum; i++) {
      if (this.noisyRanks[i] > maxR) {
        maxR = this.noisyRanks[i];
        maxI = i;
      }
    }
  
    const maxM = this.noisyMoves[maxI]
  
    this.noisyMoves[maxI] = this.noisyMoves[this.nextMove];
    this.noisyRanks[maxI] = this.noisyRanks[this.nextMove];
  
    this.nextMove++;
  
    return maxM;
  }
  
  //}}}
  //{{{  nextStagedQuiet
  
  nodeStruct.prototype.nextStagedQuiet = function () {
  
    let maxR = -100000;
    let maxI = 0;
  
    for (let i=this.nextMove; i < this.quietNum; i++) {
      if (this.quietRanks[i] > maxR) {
        maxR = this.quietRanks[i];
        maxI = i;
      }
    }
  
    const maxM = this.quietMoves[maxI]
  
    this.quietMoves[maxI] = this.quietMoves[this.nextMove];
    this.quietRanks[maxI] = this.quietRanks[this.nextMove];
  
    this.nextMove++;
  
    return maxM;
  }
  
  //}}}
  
  //{{{  genNonCastlingMoves
  
  nodeStruct.prototype.genNonCastlingMoves = function () {
  
    const l = this.cwtch;
    const b = l.board;
  
    const cx           = colourIndex(l.turn);
    const OUR_PIECE    = WB_OUR_PIECE[cx];
    const HOME_RANK    = WB_HOME_RANK[cx];
    const PROMOTE_RANK = WB_PROMOTE_RANK[cx];
    const EP_RANK      = WB_EP_RANK[cx];
    const aligned      = ALIGNED[l.kings[cx]];
  
    for (let i=0; i<64; i++) {
  
      const fr    = B88[i];
      const frObj = b[fr];
  
      if (!OUR_PIECE[frObj])
        continue;
  
      const frPiece   = objPiece(frObj);
      const frMove    = (frObj << MOVE_FROBJ_BITS) | (fr << MOVE_FR_BITS);
      const legalMask = !this.inCheck && !aligned[fr] ? MOVE_LEGAL_MASK : 0;
  
      switch (frPiece) {
  
        case KING:
          this.genKingMoves(frMove);
          break;
  
        case PAWN:
          const frRank = RANK[fr];
          switch (frRank) {
            case HOME_RANK:
              this.genHomePawnMoves(frMove | legalMask);
              break;
            case PROMOTE_RANK:
              this.genPromotePawnMoves(frMove | legalMask);
              break;
            case EP_RANK:
              this.genPawnMoves(frMove | legalMask);
              if (l.ep)
                this.genEnPassPawnMoves(frMove);
              break;
            default:
              this.genPawnMoves(frMove | legalMask);
              break;
          }
          break;
  
        case KNIGHT:
          this.genKnightMoves(frMove | legalMask);
          break;
  
        default:
          this.genSliderMoves(frMove | legalMask);
          break;
      }
    }
  }
  
  //}}}
  //{{{  genCastlingMoves
  
  nodeStruct.prototype.genCastlingMoves = function () {
  
    if (this.inCheck)
      return;
  
    const l = this.cwtch;
    const b = l.board;
  
    if (l.turn == WHITE && (l.rights & WHITE_RIGHTS)) {
      //{{{  white
      
      if ((l.rights & WHITE_RIGHTS_KING) && !b[F1]
                                         && !b[G1]
                                         && b[G2] != B_KING
                                         && b[H2] != B_KING
                                         && !l.isKingAttacked(F1,BLACK)) {
        this.addQuiet(MOVE_E1G1);
      }
      
      if ((l.rights & WHITE_RIGHTS_QUEEN) && !b[B1]
                                          && !b[C1]
                                          && !b[D1]
                                          && b[B2] != B_KING
                                          && b[C2] != B_KING
                                          && !l.isKingAttacked(D1,BLACK)) {
        this.addQuiet(MOVE_E1C1);
      }
      
      //}}}
    }
  
    else if (l.turn == BLACK && (l.rights & BLACK_RIGHTS)) {
      //{{{  black
      
      if ((l.rights & BLACK_RIGHTS_KING) && b[F8] == 0
                                         && b[G8] == 0
                                         && b[G7] != W_KING
                                         && b[H7] != W_KING
                                         && !l.isKingAttacked(F8,WHITE)) {
        this.addQuiet(MOVE_E8G8);
      }
      
      if ((l.rights & BLACK_RIGHTS_QUEEN) && b[B8] == 0
                                          && b[C8] == 0
                                          && b[D8] == 0
                                          && b[B7] != W_KING
                                          && b[C7] != W_KING
                                          && !l.isKingAttacked(D8,WHITE)) {
        this.addQuiet(MOVE_E8C8);
      }
      
      //}}}
    }
  }
  
  //}}}
  
  //{{{  addNoisy
  
  //              E  P  N  B  R  Q  K  X  -  P  N  B  R  Q  K
  const MVVLVA = [1, 1, 2, 3, 4, 5, 6, 0, 0, 1, 2, 3, 4, 5, 6];
  
  nodeStruct.prototype.addNoisy = function (move) {
  
    if (moveEq(this.ttMove,move))
      return;
  
    this.noisyMoves[this.noisyNum]   = move;
    this.noisyRanks[this.noisyNum++] = 10 * MVVLVA[moveToObj(move)] - MVVLVA[moveFromObj(move)];
  }
  
  //}}}
  //{{{  addQuiet
  
  nodeStruct.prototype.addQuiet = function (move) {
  
    if (moveEq(this.ttMove,move))
      return;
  
    if (moveEq(this.killer,move)) {
      this.killerNum = 1;
      return;
    }
  
    this.quietMoves[this.quietNum++] = move;
  
  }
  
  //}}}
  //{{{  rankQuiets
  
  nodeStruct.prototype.rankQuiets = function () {
  
    const l = this.cwtch;
  
    for (let i=0; i < this.quietNum; i++) {
  
      const move    = this.quietMoves[i];
      const fr      = moveFromSq(move);
      const to      = moveToSq(move);
      const frObj   = moveFromObj(move);
      const frPiece = objPiece(frObj) - 1;
      const cx      = colourIndex(l.turn);
      const pst     = WB_MID_PST[cx][frPiece];
      const val     = pst[to] - pst[fr];
  
      this.quietRanks[i] = 1000 + val;
    }
  }
  
  //}}}
  
  //{{{  genPawnMoves
  
  nodeStruct.prototype.genPawnMoves = function (frMove) {
  
    const l = this.cwtch;
    const b = l.board;
  
    const fr           = moveFromSq(frMove);
    const cx           = colourIndex(l.turn);
    const CAN_CAPTURE  = WB_CAN_CAPTURE[cx];
    const OFFSET_ORTH  = WB_OFFSET_ORTH[cx];
    const OFFSET_DIAG1 = WB_OFFSET_DIAG1[cx];
    const OFFSET_DIAG2 = WB_OFFSET_DIAG2[cx];
  
    let to    = 0;
    let toObj = 0;
  
    to = fr + OFFSET_ORTH;
    if (!b[to])
      this.addQuiet(frMove | to);
  
    to = fr + OFFSET_DIAG1;
    toObj = b[to];
    if (CAN_CAPTURE[toObj])
      this.addNoisy(frMove | (toObj << MOVE_TOOBJ_BITS) | to);
  
    to = fr + OFFSET_DIAG2;
    toObj = b[to];
    if (CAN_CAPTURE[toObj])
      this.addNoisy(frMove | (toObj << MOVE_TOOBJ_BITS) | to);
  }
  
  //}}}
  //{{{  genEnPassPawnMoves
  
  nodeStruct.prototype.genEnPassPawnMoves = function (frMove) {
  
    const l = this.cwtch;
    const b = l.board;
  
    const fr           = moveFromSq(frMove);
    const cx           = colourIndex(l.turn);
    const OFFSET_DIAG1 = WB_OFFSET_DIAG1[cx];
    const OFFSET_DIAG2 = WB_OFFSET_DIAG2[cx];
  
    let to = 0;
  
    to = fr + OFFSET_DIAG1;
    if (to == l.ep && !b[to])
      this.addNoisy(frMove | to | MOVE_EPTAKE_MASK);
  
    to = fr + OFFSET_DIAG2;
    if (to == l.ep && !b[to])
      this.addNoisy(frMove | to | MOVE_EPTAKE_MASK);
  }
  
  //}}}
  //{{{  genHomePawnMoves
  
  nodeStruct.prototype.genHomePawnMoves = function (frMove) {
  
    const l = this.cwtch;
    const b = l.board;
  
    const fr           = moveFromSq(frMove);
    const cx           = colourIndex(l.turn);
    const CAN_CAPTURE  = WB_CAN_CAPTURE[cx];
    const OFFSET_ORTH  = WB_OFFSET_ORTH[cx];
    const OFFSET_DIAG1 = WB_OFFSET_DIAG1[cx];
    const OFFSET_DIAG2 = WB_OFFSET_DIAG2[cx];
  
    let to    = 0;
    let toObj = 0;
  
    to = fr + OFFSET_ORTH;
    if (!b[to]) {
      this.addQuiet(frMove | to);
      to += OFFSET_ORTH;
      if (!b[to])
        this.addQuiet(frMove | to | MOVE_EPMAKE_MASK);
    }
  
    to    = fr + OFFSET_DIAG1;
    toObj = b[to];
    if (CAN_CAPTURE[toObj])
      this.addNoisy(frMove | (toObj << MOVE_TOOBJ_BITS) | to);
  
    to    = fr + OFFSET_DIAG2;
    toObj = b[to];
    if (CAN_CAPTURE[toObj])
      this.addNoisy(frMove | (toObj << MOVE_TOOBJ_BITS) | to);
  }
  
  //}}}
  //{{{  genPromotePawnMoves
  
  nodeStruct.prototype.genPromotePawnMoves = function (frMove) {
  
    const l = this.cwtch;
    const b = l.board;
  
    const fr           = moveFromSq(frMove);
    const cx           = colourIndex(l.turn);
    const CAN_CAPTURE  = WB_CAN_CAPTURE[cx];
    const OFFSET_ORTH  = WB_OFFSET_ORTH[cx];
    const OFFSET_DIAG1 = WB_OFFSET_DIAG1[cx];
    const OFFSET_DIAG2 = WB_OFFSET_DIAG2[cx];
  
    let to    = 0;
    let toObj = 0;
  
    to = fr + OFFSET_ORTH;
    if (!b[to]) {
      this.addQuiet(frMove | to | QPRO);
      this.addQuiet(frMove | to | RPRO);
      this.addQuiet(frMove | to | BPRO);
      this.addQuiet(frMove | to | NPRO);
    }
  
    to    = fr + OFFSET_DIAG1;
    toObj = b[to];
    if (CAN_CAPTURE[toObj]) {
      this.addNoisy(frMove | (toObj << MOVE_TOOBJ_BITS) | to | QPRO);
      this.addNoisy(frMove | (toObj << MOVE_TOOBJ_BITS) | to | RPRO);
      this.addNoisy(frMove | (toObj << MOVE_TOOBJ_BITS) | to | BPRO);
      this.addNoisy(frMove | (toObj << MOVE_TOOBJ_BITS) | to | NPRO);
    }
  
    to    = fr + OFFSET_DIAG2;
    toObj = b[to];
    if (CAN_CAPTURE[toObj]) {
      this.addNoisy(frMove | (toObj << MOVE_TOOBJ_BITS) | to | QPRO);
      this.addNoisy(frMove | (toObj << MOVE_TOOBJ_BITS) | to | RPRO);
      this.addNoisy(frMove | (toObj << MOVE_TOOBJ_BITS) | to | BPRO);
      this.addNoisy(frMove | (toObj << MOVE_TOOBJ_BITS) | to | NPRO);
    }
  }
  
  //}}}
  
  //{{{  genKingMoves
  
  nodeStruct.prototype.genKingMoves = function (frMove) {
  
    const l = this.cwtch;
    const b = l.board;
  
    const fr          = moveFromSq(frMove);
    const cx          = colourIndex(l.turn);
    const cy          = colourIndexToggle(cx);
    const CAN_CAPTURE = WB_CAN_CAPTURE[cx];
    const theirKingSq = l.kings[cy];
  
    let dir = 0;
  
    while (dir < 8) {
  
      const to = fr + KING_OFFSETS[dir++];
  
      if (!ADJACENT[Math.abs(to-theirKingSq)]) {
  
        const toObj = b[to];
  
        if (!toObj)
          this.addQuiet(frMove | to | MOVE_KINGMOVE_MASK);
  
        else if (CAN_CAPTURE[toObj])
          this.addNoisy(frMove | (toObj << MOVE_TOOBJ_BITS) | to | MOVE_KINGMOVE_MASK);
      }
    }
  }
  
  //}}}
  //{{{  genKnightMoves
  
  nodeStruct.prototype.genKnightMoves = function (frMove) {
  
    const l = this.cwtch;
    const b = l.board;
  
    const fr          = moveFromSq(frMove);
    const cx          = colourIndex(l.turn);
    const CAN_CAPTURE = WB_CAN_CAPTURE[cx];
  
    let dir = 0;
  
    while (dir < 8) {
  
      const to    = fr + KNIGHT_OFFSETS[dir++];
      const toObj = b[to];
  
      if (!toObj)
        this.addQuiet(frMove | to);
  
      else if (CAN_CAPTURE[toObj])
        this.addNoisy(frMove | (toObj << MOVE_TOOBJ_BITS) | to);
    }
  }
  
  //}}}
  //{{{  genSliderMoves
  
  nodeStruct.prototype.genSliderMoves = function (frMove) {
  
    const l = this.cwtch;
    const b = l.board;
  
    const fr          = moveFromSq(frMove);
    const frObj       = moveFromObj(frMove);
    const frPiece     = objPiece(frObj);
    const cx          = colourIndex(l.turn);
    const CAN_CAPTURE = WB_CAN_CAPTURE[cx];
    const OFFSETS     = SLIDER_OFFSETS[frPiece];
    const len         = OFFSETS.length;
  
    let dir = 0;
  
    while (dir < len) {
  
      const offset = OFFSETS[dir++];
  
      let to = fr + offset;
      while (!b[to]) {
        this.addQuiet(frMove | to);
        to += offset;
      }
  
      const toObj = b[to];
      if (CAN_CAPTURE[toObj])
        this.addNoisy(frMove | (toObj << MOVE_TOOBJ_BITS) | to);
    }
  }
  
  //}}}
  
  //{{{  cacheSave
  
  nodeStruct.prototype.cacheSave = function () {
  
    const l = this.cwtch;
  
    this.hHistoryLimit = l.hHistoryLimit;
    this.rights        = l.rights;
    this.ep            = l.ep;
    this.hLo[0]        = l.hLo[0];
    this.hHi[0]        = l.hHi[0];
  
    for (let i=0; i < net_h1_size; i++)
      this.net_h1_a[i] = l.net_h1_a[i];
  }
  
  //}}}
  //{{{  cacheUnSave
  
  nodeStruct.prototype.cacheUnsave = function () {
  
    const l = this.cwtch;
  
    l.hHistoryLimit = this.hHistoryLimit;
    l.rights        = this.rights;
    l.ep            = this.ep;
    l.hLo[0]        = this.hLo[0];
    l.hHi[0]        = this.hHi[0];
  
    for (let i=0; i < net_h1_size; i++)
      l.net_h1_a[i] = this.net_h1_a[i];
  
  }
  
  //}}}
  
  //}}}
  //{{{  cwtchStruct
  
  //{{{  struct
  
  function cwtchStruct () {
  
    this.board  = Array(144).fill(0);
    this.rights = 0;
    this.ep     = 0;
    this.turn   = 0;
    this.kings  = [0,0];
  
    this.bestMove    = 0;
    this.outOfTime   = 0;
    this.nodeCount   = 0;
    this.targetDepth = 0;
    this.targetNodes = 0;
    this.finishTime  = 0;
  
    this.nodes = Array(MAX_PLY).fill(null);
  
    this.hLo = new Uint32Array(1);
    this.hHi = new Uint32Array(1);
  
    this.hHistoryLo = new Uint32Array(MAX_PLY * 8);
    this.hHistoryHi = new Uint32Array(MAX_PLY * 8);
  
    this.hHistoryLimit = 0;
    this.hHistoryNext  = 0;
  
    this.hLoTurn   = new Uint32Array(9);
    this.hHiTurn   = new Uint32Array(9);
    this.hLoRights = new Uint32Array(16);
    this.hHiRights = new Uint32Array(16);
    this.hLoEP     = new Uint32Array(144);
    this.hHiEP     = new Uint32Array(144);
    this.hLoObj    = Array(16).fill(null);
    this.hHiObj    = Array(16).fill(null);
  
    this.ttLo    = new Uint32Array(TT_SIZE);
    this.ttHi    = new Uint32Array(TT_SIZE);
    this.ttFlags = new Uint8Array(TT_SIZE);
    this.ttScore = new Int16Array(TT_SIZE);
    this.ttDepth = new Uint8Array(TT_SIZE);
    this.ttMove  = new Uint32Array(TT_SIZE);
  
    this.net_h1_a = Array(net_h1_size);
  
  }
  
  //}}}
  
  //{{{  initOnce
  
  cwtchStruct.prototype.initOnce = function () {
  
    //{{{  nodes
    
    for (let i=0; i < MAX_PLY; i++) {
      this.nodes[i]     = new(nodeStruct);
      this.nodes[i].cwtch = this;
      this.nodes[i].ply = i + 1;
    }
    
    for (let i=0; i < MAX_PLY-1; i++) {
      this.nodes[i].child = this.nodes[i+1];
    }
    
    for (let i=1; i < MAX_PLY; i++) {
      this.nodes[i].parent = this.nodes[i-1];
    }
    
    for (let i=2; i < MAX_PLY; i++) {
      this.nodes[i].granny = this.nodes[i-2];
    }
    
    //}}}
    //{{{  hash
    //
    // https://en.wikipedia.org/wiki/Zobrist_hashing
    //
    
    for (let i=0; i < this.hLoTurn.length; i++) {
      this.hLoTurn[i] = twisterRand();
      this.hHiTurn[i] = twisterRand();
    }
    
    for (let i=0; i < this.hLoRights.length; i++) {
      this.hLoRights[i] = twisterRand();
      this.hHiRights[i] = twisterRand();
    }
    
    for (let i=0; i < this.hLoEP.length; i++) {
      this.hLoEP[i] = twisterRand();
      this.hHiEP[i] = twisterRand();
    }
    
    for (let i=1; i < this.hLoObj.length; i++) {
      this.hLoObj[i] = new Uint32Array(144);
      this.hHiObj[i] = new Uint32Array(144);
      for (let j=0; j < 144; j++) {
        this.hLoObj[i][j] = twisterRand();
        this.hHiObj[i][j] = twisterRand();
      }
    }
    this.hLoObj[0] = new Uint32Array(144);
    this.hHiObj[0] = new Uint32Array(144);
    for (let j=0; j < 144; j++) {
      this.hLoObj[0][j] = 0;
      this.hHiObj[0][j] = 0;
    }
    
    //}}}
    //{{{  PSTs
    
    for (let i=0; i < 144; i++) {
    
      let j = flip(i);
    
      BPAWN_MID[j]   = WPAWN_MID[i];
      BKNIGHT_MID[j] = WKNIGHT_MID[i];
      BBISHOP_MID[j] = WBISHOP_MID[i];
      BROOK_MID[j]   = WROOK_MID[i];
      BQUEEN_MID[j]  = WQUEEN_MID[i];
      BKING_MID[j]   = WKING_MID[i];
    
      BPAWN_END[j]   = WPAWN_END[i];
      BKNIGHT_END[j] = WKNIGHT_END[i];
      BBISHOP_END[j] = WBISHOP_END[i];
      BROOK_END[j]   = WROOK_END[i];
      BQUEEN_END[j]  = WQUEEN_END[i];
      BKING_END[j]   = WKING_END[i];
    }
    
    //}}}
    //{{{  IMAP
    
    for (var i=0; i < 16; i++) {
      IMAP[i] = Array(144).fill(0);
    }
    
    for (var i=0; i < 64; i++) {
      const j = B88[i];
      IMAP[W_PAWN][j]   = 0   + (PAWN-1)   * 64 + i;
      IMAP[W_KNIGHT][j] = 0   + (KNIGHT-1) * 64 + i;
      IMAP[W_BISHOP][j] = 0   + (BISHOP-1) * 64 + i;
      IMAP[W_ROOK][j]   = 0   + (ROOK-1)   * 64 + i;
      IMAP[W_QUEEN][j]  = 0   + (QUEEN-1)  * 64 + i;
      IMAP[W_KING][j]   = 0   + (KING-1)   * 64 + i;
      IMAP[B_PAWN][j]   = 384 + (PAWN-1)   * 64 + i;
      IMAP[B_KNIGHT][j] = 384 + (KNIGHT-1) * 64 + i;
      IMAP[B_BISHOP][j] = 384 + (BISHOP-1) * 64 + i;
      IMAP[B_ROOK][j]   = 384 + (ROOK-1)   * 64 + i;
      IMAP[B_QUEEN][j]  = 384 + (QUEEN-1)  * 64 + i;
      IMAP[B_KING][j]   = 384 + (KING-1)   * 64 + i;
    }
    
    //}}}
  
    //{{{  sanity check
    
    if (net_h1_w[0].length != net_h1_size)
      console.log('h1 w size', net_h1_w[0].length)
    
    if (net_h1_b.length != net_h1_size)
      console.log('h1 b size', net_h1_b.length)
    
    if (net_o_w.length != net_h1_size)
      console.log('o w size', net_o_w.length)
    
    //}}}
  }
  
  //}}}
  
  //{{{  go
  //
  // https://github.com/AndyGrant/Ethereal/blob/master/src/search.c#L274
  //
  
  cwtchStruct.prototype.go = function () {
  
    this.bestMove  = 0;
    this.outOfTime = 0;
    this.nodeCount = 0;
  
    let score = 0;
    let alpha = 0;
    let beta  = 0;
    let delta = 0;
  
    for (let depth=1; depth <= this.targetDepth; depth++) {
  
      alpha = -MATE;
      beta  = MATE;
      delta = 10;
  
      if (depth >= 4) {
        alpha = Math.max(-MATE, score - delta);
        beta  = Math.min(MATE,  score + delta);
      }
  
      while (1) {
  
        score = this.search(this.nodes[0], alpha, beta, depth);
  
        if (this.outOfTime)
          break;
  
        if (score > alpha && score < beta) {
          console.log('info', 'depth', depth, 'nodes', this.nodeCount, 'score', score, 'pv', formatMove(this.bestMove));
          break;
        }
  
        delta += delta / 2 | 0;
  
        if (score <= alpha) {
          console.log('info', 'depth', depth, 'nodes', this.nodeCount, 'lowerbound', score);
          beta  = Math.min(MATE, ((alpha + beta) / 2) | 0);
          alpha = Math.max(-MATE, score - delta);
        }
        else if (score >= beta) {
          console.log('info', 'depth', depth, 'nodes', this.nodeCount, 'upperbound', score);
          alpha = Math.max(-MATE, ((alpha + beta) / 2) | 0);
          beta  = Math.min(MATE,  score + delta);
        }
      }
  
      if (this.outOfTime)
        break;
    }
  
    console.log('bestmove', formatMove(this.bestMove));
  }
  
  //}}}
  //{{{  search
  //
  // https://en.wikipedia.org/wiki/Principal_variation_search
  //
  
  cwtchStruct.prototype.search = function (node, alpha, beta, depth) {
  
    //{{{  housekeeping
    
    if (this.areWeOutOfTime() || !node.child) {
    
      this.outOfTime = 1;
    
      return 0;
    }
    
    //}}}
  
    const turn     = this.turn;
    const nextTurn = colourToggle(turn);
    const cx       = colourIndex(turn);
    const inCheck  = this.isKingAttacked(this.kings[cx], nextTurn);
  
    if (depth <= 0 && !inCheck)
      return this.qsearch(node.child, alpha, beta, depth);
  
    this.nodeCount++;
  
    depth = Math.max(0, depth);
  
    const rootNode = !node.parent;
    const pvNode   = alpha != (beta - 1);
    const oAlpha   = alpha;
  
    if (!rootNode && this.isDraw())
      return 0;
  
    //{{{  check tt
    
    const i = this.ttIndex();
    
    node.ttMove = 0;
    
    if (i) {
    
      const ttFlags = this.ttFlags[i];
      const ttScore = this.ttScore[i];
    
      if (this.ttDepth[i] >= depth && (depth == 0 || !pvNode)) {
        if (ttFlags == TT_EXACT ||
           (ttFlags == TT_BETA  && ttScore >= beta) ||
           (ttFlags == TT_ALPHA && ttScore <= alpha)) {
          return ttScore;
        }
      }
    
      node.ttMove = this.ttMove[i];
    }
    
    //{{{  no tt move
    //
    // https://www.talkchess.com/forum3/viewtopic.php?f=7&t=74769
    //
    
    if (!node.ttMove && depth > 3)
      depth -= 1;
    
    //}}}
    
    //}}}
  
    let bestScore = -MATE;
    let bestMove  = 0;
  
    let move   = 0;
    let score  = 0;
    let played = 0;
  
    node.cacheSave();
    node.initMoveGen(ALL_MOVES, inCheck);
  
    while (move = node.getNextMove()) {
  
      //{{{  make move
      
      if (!(move & MOVE_LEGAL_MASK)) {
      
        this.makeMoveBare(move);
      
        if (this.isKingAttacked(this.kings[cx], nextTurn)) {
          this.unmakeMoveBare(move);
          node.cacheUnsave();
          continue;
        }
      
        this.unmakeMoveBare(move);
        this.makeMove(move);
      }
      
      else {
        this.makeMove(move);
      }
      
      //}}}
  
      played++;
  
      score = alpha;
  
      if (pvNode && played > 1)
        score = -this.search(node.child, -alpha-1, -alpha, depth-1);
  
      if (score > alpha || played == 1 || !pvNode)
        score = -this.search(node.child, -beta, -alpha, depth-1);
  
      this.unmakeMove(move);
      node.cacheUnsave();
  
      if (this.outOfTime)
        return 0;
  
      if (score > bestScore) {
        bestScore = score;
        bestMove  = move;
        if (bestScore > alpha) {
          alpha = bestScore;
          if (rootNode) {
            this.bestMove = bestMove;
          }
          if (bestScore >= beta) {
            if (moveIsQuiet(move))
              node.killer = moveClean(move);
            this.ttPut(TT_BETA, depth, bestScore, bestMove);
            return bestScore;
          }
        }
      }
    }
  
    if (!played)
      return inCheck ? -MATE + node.ply : 0;
  
    if (alpha > oAlpha)
      this.ttPut(TT_EXACT, depth, bestScore, bestMove);
    else
      this.ttPut(TT_ALPHA, depth, bestScore, bestMove);
  
    return bestScore;
  }
  
  //}}}
  //{{{  qsearch
  
  cwtchStruct.prototype.qsearch = function (node, alpha, beta, depth) {
  
    //{{{  housekeeping
    
    this.nodeCount++;
    
    if (this.areWeOutOfTime() || !node.child) {
    
      this.outOfTime = 1;
    
      return this.netFastEval();
    }
    
    //}}}
  
    //{{{  check TT
    
    node.ttMove = 0;
    
    const i = this.ttIndex();
    
    if (i) {
    
      const ttFlags = this.ttFlags[i];
      const ttScore = this.ttScore[i];
      const ttMove  = this.ttMove[i];
    
      if (ttFlags == TT_EXACT ||
         (ttFlags == TT_BETA  && ttScore >= beta) ||
         (ttFlags == TT_ALPHA && ttScore <= alpha)) {
        return ttScore;
      }
    
      if (moveIsNoisy(ttMove))
        node.ttMove = ttMove;
    
    }
    
    //}}}
  
    const e = this.netFastEval();
  
    if (e >= beta)
      return e;
  
    if (alpha < e)
      alpha = e;
  
    const turn     = this.turn;
    const nextTurn = colourToggle(turn);
    const cx       = colourIndex(turn);
    const inCheck  = this.isKingAttacked(this.kings[cx], nextTurn);
  
    let move   = 0;
    let score  = 0;
    let played = 0;
  
    node.cacheSave();
    node.initMoveGen(NOISY_MOVES_ONLY, inCheck);
  
    while (move = node.getNextMove()) {
  
      if (moveIsQuiet(move))
        console.log('quiet q move', formatMove(move)); //hack
  
      //{{{  make move
      
      if (!(move & MOVE_LEGAL_MASK)) {
      
        this.makeMoveBare(move);
      
        if (this.isKingAttacked(this.kings[cx], nextTurn)) {
          this.unmakeMoveBare(move);
          node.cacheUnsave();
          continue;
        }
      
        this.unmakeMoveBare(move);
        this.makeMove(move);
      }
      
      else {
        this.makeMove(move);
      }
      
      //}}}
  
      played++;
  
      score = -this.qsearch(node.child, -beta, -alpha, depth-1);
  
      this.unmakeMove(move);
      node.cacheUnsave();
  
      if (this.outOfTime)
        return alpha;
  
      if (score > alpha) {
        alpha = score;
        if (score >= beta) {
          return score;
        }
      }
    }
  
    return alpha;
  }
  
  //}}}
  //{{{  perft
  
  cwtchStruct.prototype.perft = function (node, depth) {
  
    if (depth == 0)
      return 1;
  
    const turn     = this.turn;
    const nextTurn = colourToggle(turn);
    const cx       = colourIndex(turn);
    const inCheck  = this.isKingAttacked(this.kings[cx], nextTurn);
  
    let count = 0;
    let move  = 0;
  
    node.ttMove = 0;
  
    node.cacheSave();
    node.initMoveGen(ALL_MOVES, inCheck);
  
    while (move = node.getNextMove()) {
  
      //{{{  make move
      
      if (!(move & MOVE_LEGAL_MASK)) {
      
        this.makeMoveBare(move);
      
        if (this.isKingAttacked(this.kings[cx], nextTurn)) {
          this.unmakeMoveBare(move);
          node.cacheUnsave();
          continue;
        }
      
        this.unmakeMoveBare(move);
        this.makeMove(move);
      }
      
      else {
        this.makeMove(move);
      }
      
      //}}}
  
      count += this.perft(node.child, depth-1);
  
      this.unmakeMove(move);
      node.cacheUnsave();
    }
  
    return count;
  }
  
  //}}}
  
  //{{{  position
  
  cwtchStruct.prototype.position = function (sb, st, sr, sep) {
  
    const b = this.board;
  
    this.netReset();
  
    b.fill(EDGE);
  
    for (let i=0; i < 64; i++)
      b[B88[i]] = 0;
  
    //{{{  board board
    
    let sq   = 0;
    let rank = 7;
    let file = 0;
    
    for (let i=0; i < sb.length; i++) {
    
      const ch   = sb.charAt(i);
      const sq88 = (7-rank) * 8 + file;
      const sq   = B88[sq88];
    
      switch (ch) {
        //{{{  1-8
        
        case '1':
          file += 1;
          break;
        case '2':
          file += 2;
          break;
        case '3':
          file += 3;
          break;
        case '4':
          file += 4;
          break;
        case '5':
          file += 5;
          break;
        case '6':
          file += 6;
          break;
        case '7':
          file += 7;
          break;
        case '8':
          break;
        
        //}}}
        //{{{  /
        
        case '/':
          rank--;
          file = 0;
          break;
        
        //}}}
        //{{{  black
        
        case 'p':
          b[sq] = B_PAWN;
          this.netAdd(B_PAWN, sq);
          file++;
          break;
        case 'n':
          b[sq] = B_KNIGHT;
          this.netAdd(B_KNIGHT, sq);
          file++;
          break;
        case 'b':
          b[sq] = B_BISHOP;
          this.netAdd(B_BISHOP, sq);
          file++;
          break;
        case 'r':
          b[sq] = B_ROOK;
          this.netAdd(B_ROOK, sq);
          file++;
          break;
        case 'q':
          b[sq] = B_QUEEN;
          this.netAdd(B_QUEEN, sq);
          file++;
          break;
        case 'k':
          b[sq] = B_KING;
          this.netAdd(B_KING, sq);
          this.kings[1] = sq;
          file++;
          break;
        
        //}}}
        //{{{  white
        
        case 'P':
          b[sq] = W_PAWN;
          this.netAdd(W_PAWN, sq);
          file++;
          break;
        case 'N':
          b[sq] = W_KNIGHT;
          this.netAdd(W_KNIGHT, sq);
          file++;
          break;
        case 'B':
          b[sq] = W_BISHOP;
          this.netAdd(W_BISHOP, sq);
          file++;
          break;
        case 'R':
          b[sq] = W_ROOK;
          this.netAdd(W_ROOK, sq);
          file++;
          break;
        case 'Q':
          b[sq] = W_QUEEN;
          this.netAdd(W_QUEEN, sq);
          file++;
          break;
        case 'K':
          b[sq] = W_KING;
          this.netAdd(W_KING, sq);
          this.kings[0] = sq;
          file++;
          break;
        
        //}}}
        default:
          console.log('unknown board char','|'+ch+'|');
      }
    }
    
    //}}}
    //{{{  board turn
    
    if (st == 'w')
      this.turn = WHITE;
    
    else if (st == 'b')
      this.turn = BLACK;
    
    else
      console.log('unknown board colour', st)
    
    //}}}
    //{{{  board rights
    
    this.rights = 0;
    
    for (let i=0; i < sr.length; i++) {
    
      const ch = sr.charAt(i);
    
      if (ch == 'K') this.rights |= WHITE_RIGHTS_KING;
      if (ch == 'Q') this.rights |= WHITE_RIGHTS_QUEEN;
      if (ch == 'k') this.rights |= BLACK_RIGHTS_KING;
      if (ch == 'q') this.rights |= BLACK_RIGHTS_QUEEN;
    }
    
    //}}}
    //{{{  board ep
    
    if (sep.length == 2)
      this.ep = COORDS.indexOf(sep)
    
    else
      this.ep = 0;
    
    //}}}
  
    this.hashCalc()
  
  }
  
  //}}}
  
  //{{{  netSlowEval
  
  cwtchStruct.prototype.netSlowEval = function () {
  
    const b  = this.board;
    const cx = colourMultiplier(this.turn)
  
    let h1 = Array(net_h1_size);
    for (let j=0; j < net_h1_size; j++) {
      h1[j] = net_h1_b[j];
    }
  
    for (let sq=0; sq<64; sq++) {
  
      const fr    = B88[sq];
      const frObj = b[fr];
  
      if (!frObj)
        continue;
  
      const index = inputIndex(frObj, fr);
  
      for (let i=0; i < net_h1_size; i++) {
        h1[i] += net_h1_w[index][i];
      }
    }
  
    let e = net_o_b;
  
    for (let i=0; i < net_h1_size; i++) {
      e += net_o_w[i] * relu(h1[i]);
    }
  
    e = e * net_scale;
  
    return e * cx | 0;
  }
  
  //}}}
  //{{{  netFastEval
  
  cwtchStruct.prototype.netFastEval = function () {
  
    const cx = colourMultiplier(this.turn)
  
    let e = net_o_b;
  
    for (let i=0; i < net_h1_size; i++) {
      e += net_o_w[i] * relu(this.net_h1_a[i]);
    }
  
    e = e * net_scale;
  
    return e * cx | 0;
  }
  
  //}}}
  //{{{  pstEval
  
  cwtchStruct.prototype.pstEval = function () {
  
    const b  = this.board;
    const cx = colourMultiplier(this.turn)
  
    let p = TPHASE;
  
    let pst_mid = 0;
    let pst_end = 0;
    let mat_mid = 0;
    let mat_end = 0;
  
    for (let sq=0; sq<64; sq++) {
  
      const fr    = B88[sq];
      const frObj = b[fr];
  
      if (!frObj)
        continue;
  
      const frPiece  = objPiece(frObj) - 1;
      const frColour = objColour(frObj);
      const frIndex  = colourIndex(frColour);
      const frMult   = colourMultiplier(frColour);
  
      p -= VPHASE[frPiece];
  
      mat_mid += MATERIAL_MID[frPiece] * frMult;
      mat_end += MATERIAL_END[frPiece] * frMult;
  
      pst_mid += WB_MID_PST[frIndex][frPiece][fr] * frMult;
      pst_end += WB_END_PST[frIndex][frPiece][fr] * frMult;
    }
  
    p = Math.max(p,0);
  
    const mid = mat_mid + pst_mid;
    const end = mat_end + pst_end;
  
    const e = ((mid * (TPHASE - p) + end * p) / TPHASE) | 0;
  
    return e * cx;
  }
  
  //}}}
  
  //{{{  makeMove
  
  cwtchStruct.prototype.makeMove = function (move) {
  
    const b = this.board;
  
    const fr    = moveFromSq(move);
    const to    = moveToSq(move);
    const frObj = moveFromObj(move);
    const toObj = moveToObj(move);
  
    //this.netDel(frObj,fr);
    //this.netDel(toObj,to);
    //this.netAdd(frObj,to);
  
    if (toObj) {
      this.netCapture(frObj,fr,toObj,to);
    }
    else {
      this.netMove(frObj,fr,to);
    }
  
    this.hashObj(frObj,fr);
    b[fr] = 0;
    //this.hashObj(0,fr);
  
    this.hashObj(toObj,to);
    b[to] = frObj;
    this.hashObj(frObj,to);
  
    this.hashEP();
    this.ep = 0;
    this.hashEP();
  
    if (move & MOVE_IKKY_MASK) {
      //{{{  ikky stuff
      
      const frCol = objColour(frObj);
      
      if (frCol == WHITE) {
        //{{{  white
        
        if (move & MOVE_KINGMOVE_MASK)
        
          this.kings[0] = to;
        
        if (move & MOVE_EPMAKE_MASK) {
        
          this.hashEP();
          this.ep = to+12;
          this.hashEP();
        
        }
        
        else if (move & MOVE_EPTAKE_MASK) {
        
          this.netDel(B_PAWN,to+12);
        
          this.hashObj(B_PAWN,to+12);
          b[to+12] = 0;
          //this.hashObj(0,to+12);
        
        }
        
        else if (move & MOVE_PROMOTE_MASK) {
        
          const pp = movePromotePiece(move) | WHITE;
        
          //this.netDel(W_PAWN,to);
          //this.netAdd(pp,to);
        
          this.netPromote(W_PAWN,pp,to);
        
          this.hashObj(W_PAWN,to);
          b[to] = pp;
          this.hashObj(pp,to);
        
        }
        
        else if (moveEq(move,MOVE_E1G1)) {
        
          //this.netDel(W_ROOK,H1);
          //this.netAdd(W_ROOK,F1);
        
          this.netMove(W_ROOK,H1,F1);
        
          this.hashObj(W_ROOK,H1);
          b[H1] = 0;
          //this.hashObj(0,H1);
        
          //this.hashObj(0,F1);
          b[F1] = W_ROOK;
          this.hashObj(W_ROOK,F1);
        
        }
        
        else if (moveEq(move,MOVE_E1C1)) {
        
          //this.netDel(W_ROOK,A1);
          //this.netAdd(W_ROOK,D1);
        
          this.netMove(W_ROOK,A1,D1);
        
          this.hashObj(W_ROOK,A1);
          b[A1] = 0;
          //this.hashObj(0,A1);
        
          //this.hashObj(0,D1);
          b[D1] = W_ROOK;
          this.hashObj(W_ROOK,D1);
        
        }
        
        //}}}
      }
      
      else {
        //{{{  black
        
        if (move & MOVE_KINGMOVE_MASK)
        
          this.kings[1] = to;
        
        if (move & MOVE_EPMAKE_MASK) {
        
          this.hashEP();
          this.ep = to-12;
          this.hashEP();
        
        }
        
        else if (move & MOVE_EPTAKE_MASK) {
        
          this.netDel(W_PAWN,to-12);
        
          this.hashObj(W_PAWN,to-12);
          b[to-12] = 0;
          //this.hashObj(0,to-12);
        
        }
        
        else if (move & MOVE_PROMOTE_MASK) {
        
          const pp = movePromotePiece(move) | BLACK;
        
          //this.netDel(B_PAWN,to);
          //this.netAdd(pp,to);
        
          this.netPromote(B_PAWN,pp,to);
        
          this.hashObj(B_PAWN,to);
          b[to] = pp;
          this.hashObj(pp,to);
        
        }
        
        else if (moveEq(move,MOVE_E8G8)) {
        
          //this.netDel(B_ROOK,H8);
          //this.netAdd(B_ROOK,F8);
        
          this.netMove(B_ROOK,H8,F8);
        
          this.hashObj(B_ROOK,H8);
          b[H8] = 0;
          //this.hashObj(0,H8);
        
          //this.hashObj(0,F8);
          b[F8] = B_ROOK;
          this.hashObj(B_ROOK,F8);
        
        }
        
        else if (moveEq(move,MOVE_E8C8)) {
        
          //this.netDel(B_ROOK,A8);
          //this.netAdd(B_ROOK,D8);
        
          this.netMove(B_ROOK,A8,D8);
        
          this.hashObj(B_ROOK,A8);
          b[A8] = 0;
          //this.hashObj(0,A8);
        
          //this.hashObj(0,D8);
          b[D8] = B_ROOK;
          this.hashObj(B_ROOK,D8);
        
        }
        
        //}}}
      }
      
      //}}}
    }
  
    this.hashTurn();
    this.turn = colourToggle(this.turn);
    this.hashTurn();
  
    this.hashRights();
    this.rights &= MASK_RIGHTS[fr] & MASK_RIGHTS[to];
    this.hashRights();
  
    this.hHistoryLo[this.hHistoryNext] = this.hLo[0];
    this.hHistoryHi[this.hHistoryNext] = this.hHi[0];
  
    if ((move & MOVE_REPRESET_MASK) || IS_P[frObj])
      this.hHistoryLimit = this.hHistoryNext;
  
    this.hHistoryNext++;
  
  }
  
  //}}}
  //{{{  unmakeMove
  
  cwtchStruct.prototype.unmakeMove = function (move) {
  
    const b = this.board;
  
    const fr    = moveFromSq(move);
    const to    = moveToSq(move);
    const toObj = moveToObj(move);
    const frObj = moveFromObj(move);
  
    //this.netDel(frObj,to);
    //this.netAdd(toObj,to);
    //this.netAdd(frObj,fr);
  
    b[fr] = frObj;
    b[to] = toObj;
  
    if (move & MOVE_IKKY_MASK) {
      //{{{  ikky stuff
      
      const frCol = objColour(frObj);
      
      if (frCol == WHITE) {
        //{{{  white
        
        if (move & MOVE_KINGMOVE_MASK)
        
          this.kings[0] = fr;
        
        if (move & MOVE_EPTAKE_MASK) {
        
          //this.netAdd(B_PAWN,to+12);
        
          b[to+12] = B_PAWN;
        
        }
        
        //else if (move & MOVE_PROMOTE_MASK) {
        
          //this.netDel(movePromotePiece(move) | WHITE, to);
          //this.netAdd(W_PAWN,to);
        
        //}
        
        
        else if (moveEq(move,MOVE_E1G1)) {
        
          //this.netAdd(W_ROOK,H1);
          //this.netDel(W_ROOK,F1);
        
          b[H1] = W_ROOK;
          b[F1] = 0;
        
        }
        
        else if (moveEq(move,MOVE_E1C1)) {
        
          //this.netAdd(W_ROOK,A1);
          //this.netDel(W_ROOK,D1);
        
          b[A1] = W_ROOK;
          b[D1] = 0;
        
        }
        
        //}}}
      }
      
      else {
        //{{{  black
        
        if (move & MOVE_KINGMOVE_MASK)
        
          this.kings[1] = fr;
        
        if (move & MOVE_EPTAKE_MASK) {
        
          //this.netAdd(W_PAWN,to-12);
        
          b[to-12] = W_PAWN;
        
        }
        
        //else if (move & MOVE_PROMOTE_MASK) {
        
          //this.netDel(movePromotePiece(move) | BLACK, to);
          //this.netAdd(B_PAWN,to);
        
        //}
        
        else if (moveEq(move,MOVE_E8G8)) {
        
          //this.netAdd(B_ROOK,H8);
          //this.netDel(B_ROOK,F8);
        
          b[H8] = B_ROOK;
          b[F8] = 0;
        
        }
        
        else if (moveEq(move,MOVE_E8C8)) {
        
          //this.netAdd(B_ROOK,A8);
          //this.netDel(B_ROOK,D8);
        
          b[A8] = B_ROOK;
          b[D8] = 0;
        
        }
        
        //}}}
      }
      
      //}}}
    }
  
    this.turn = colourToggle(this.turn);
  
    this.hHistoryNext--;
  }
  
  //}}}
  
  //{{{  makeMoveBare
  
  cwtchStruct.prototype.makeMoveBare = function (move) {
  
    const b = this.board;
  
    const fr    = moveFromSq(move);
    const to    = moveToSq(move);
    const frObj = moveFromObj(move);
    //const toObj = moveToObj(move);
  
    b[fr] = 0;
    b[to] = frObj;
  
    if (move & MOVE_IKKY_MASK) {
      //{{{  ikky stuff
      
      const frCol = objColour(frObj);
      
      if (frCol == WHITE) {
        //{{{  white
        
        if (move & MOVE_KINGMOVE_MASK)
        
          this.kings[0] = to;
        
        if (move & MOVE_EPTAKE_MASK) {
        
          b[to+12] = 0;
        
        }
        
        else if (move & MOVE_PROMOTE_MASK) {
        
          b[to] = movePromotePiece(move) | WHITE;
        }
        
        else if (moveEq(move,MOVE_E1G1)) {
        
          b[H1] = 0;
          b[F1] = W_ROOK;
        
        }
        
        else if (moveEq(move,MOVE_E1C1)) {
        
          b[A1] = 0;
          b[D1] = W_ROOK;
        
        }
        
        //}}}
      }
      
      else {
        //{{{  black
        
        if (move & MOVE_KINGMOVE_MASK)
        
          this.kings[1] = to;
        
        if (move & MOVE_EPTAKE_MASK) {
        
          b[to-12] = 0;
        
        }
        
        else if (move & MOVE_PROMOTE_MASK) {
        
          b[to] = movePromotePiece(move) | BLACK;
        
        }
        
        else if (moveEq(move,MOVE_E8G8)) {
        
          b[H8] = 0;
          b[F8] = B_ROOK;
        
        }
        
        else if (moveEq(move,MOVE_E8C8)) {
        
          b[A8] = 0;
          b[D8] = B_ROOK;
        
        }
        
        //}}}
      }
      
      //}}}
    }
  }
  
  //}}}
  //{{{  unmakeMoveBare
  
  cwtchStruct.prototype.unmakeMoveBare = function (move) {
  
    const b = this.board;
  
    const fr    = moveFromSq(move);
    const to    = moveToSq(move);
    const toObj = moveToObj(move);
    const frObj = moveFromObj(move);
  
    b[fr] = frObj;
    b[to] = toObj;
  
    if (move & MOVE_IKKY_MASK) {
      //{{{  ikky stuff
      
      const frCol = objColour(frObj);
      
      if (frCol == WHITE) {
        //{{{  white
        
        if (move & MOVE_KINGMOVE_MASK)
        
          this.kings[0] = fr;
        
        if (move & MOVE_EPTAKE_MASK) {
        
          b[to+12] = B_PAWN;
        
        }
        
        else if (moveEq(move,MOVE_E1G1)) {
        
          b[H1] = W_ROOK;
          b[F1] = 0;
        
        }
        
        else if (moveEq(move,MOVE_E1C1)) {
        
          b[A1] = W_ROOK;
          b[D1] = 0;
        
        }
        
        //}}}
      }
      
      else {
        //{{{  black
        
        if (move & MOVE_KINGMOVE_MASK)
        
          this.kings[1] = fr;
        
        if (move & MOVE_EPTAKE_MASK) {
        
          b[to-12] = W_PAWN;
        
        }
        
        else if (moveEq(move,MOVE_E8G8)) {
        
          b[H8] = B_ROOK;
          b[F8] = 0;
        
        }
        
        else if (moveEq(move,MOVE_E8C8)) {
        
          b[A8] = B_ROOK;
          b[D8] = 0;
        
        }
        
        //}}}
      }
      
      //}}}
    }
  }
  
  //}}}
  
  //{{{  netReset
  
  cwtchStruct.prototype.netReset = function () {
  
    for (let h=0; h < net_h1_size; h++)
      this.net_h1_a[h] = net_h1_b[h];
  
  }
  
  //}}}
  //{{{  netAdd
  
  cwtchStruct.prototype.netAdd = function (obj, sq) {
  
    //if (!obj) {
      //console.log('netaddnull');
      //return;
    //}
  
    const i   = inputIndex(obj, sq);
    const h1i = net_h1_w[i];
  
    for (let h=0; h < net_h1_size; h++)
      this.net_h1_a[h] += h1i[h];
  }
  
  //}}}
  //{{{  netDel
  
  cwtchStruct.prototype.netDel = function (obj, sq) {
  
    //if (!obj) {
      //console.log('netdelnull');
      //return;
    //}
  
    const i   = inputIndex(obj, sq);
    const h1i = net_h1_w[i];
  
    for (let h=0; h < net_h1_size; h++)
      this.net_h1_a[h] -= h1i[h];
  }
  
  //}}}
  //{{{  netMove
  
  cwtchStruct.prototype.netMove = function (frObj,fr,to) {
  
    const i1 = inputIndex(frObj, fr);
    const i2 = inputIndex(frObj, to);
  
    const h1 = net_h1_w[i1];
    const h2 = net_h1_w[i2];
  
    for (let h=0; h < net_h1_size; h++) {
      this.net_h1_a[h] += h2[h] - h1[h];
    }
  }
  
  //}}}
  //{{{  netCapture
  
  cwtchStruct.prototype.netCapture = function (frObj,fr,toObj,to) {
  
    const i1 = inputIndex(frObj, fr);
    const i2 = inputIndex(toObj, to);
    const i3 = inputIndex(frObj, to);
  
    const h1 = net_h1_w[i1];
    const h2 = net_h1_w[i2];
    const h3 = net_h1_w[i3];
  
    for (let h=0; h < net_h1_size; h++) {
      this.net_h1_a[h] += h3[h] - h2[h] - h1[h];
    }
  }
  
  //}}}
  //{{{  netPromote
  
  cwtchStruct.prototype.netPromote = function (pawnObj,promoteObj,sq) {
  
    const i1 = inputIndex(pawnObj,    sq);
    const i2 = inputIndex(promoteObj, sq);
  
    const h1 = net_h1_w[i1];
    const h2 = net_h1_w[i2];
  
    for (let h=0; h < net_h1_size; h++) {
      this.net_h1_a[h] += h2[h] - h1[h];
    }
  }
  
  //}}}
  
  //{{{  ttInit
  
  cwtchStruct.prototype.ttInit = function () {
    this.ttFlags.fill(0);
  }
  
  //}}}
  //{{{  ttPut
  
  cwtchStruct.prototype.ttPut = function (flags, depth, score, move) {
  
    const i = this.hLo[0] & TT_MASK;
  
    this.ttLo[i] = this.hLo[0];
    this.ttHi[i] = this.hHi[0];
  
    this.ttFlags[i] = flags;
    this.ttDepth[i] = depth;
    this.ttScore[i] = score;
    this.ttMove[i]  = move;
  }
  
  //}}}
  //{{{  ttIndex
  
  cwtchStruct.prototype.ttIndex = function () {
  
    const i = this.hLo[0] & TT_MASK;
  
    if (this.ttFlags[i] && this.hashEq(this.ttLo[i],this.ttHi[i]))
      return i;
    else
      return 0;
  }
  
  //}}}
  //{{{  ttValidate
  
  cwtchStruct.prototype.ttValidate = function (move) {
  
    const b = this.board;
  
    const frObj = moveFromObj(move);
    const fr    = moveFromSq(move);
  
    if (b[fr] != frObj)
      return false;
  
    const toObj = moveToObj(move);
    const to    = moveToSq(move);
  
    if (b[to] != toObj)
      return false;
  
    return true;
  }
  
  //}}}
  
  //{{{  hashEq
  
  cwtchStruct.prototype.hashEq = function (lo, hi) {
  
    return this.hLo[0] == lo && this.hHi[0] == hi;
  
  }
  
  //}}}
  //{{{  hashCalc
  
  cwtchStruct.prototype.hashCalc = function () {
  
    this.hLo[0] = 0;
    this.hHi[0] = 0;
  
    this.hHistoryLimit = 0;
    this.hHistoryNext  = 0;
  
    for (let i=0; i < 64; i++) {
      let sq  = B88[i];
      let obj = this.board[sq];
      this.hashObj(obj,sq);
    }
  
    this.hashTurn();
    this.hashRights();
    this.hashEP();
  
    this.hHistoryLo[0] = this.hLo[0];
    this.hHistoryHi[0] = this.hHi[0];
  
    this.hHistoryNext++;
  }
  
  //}}}
  //{{{  hashTurn
  
  cwtchStruct.prototype.hashTurn = function () {
    this.hLo[0] ^= this.hLoTurn[this.turn];
    this.hHi[0] ^= this.hHiTurn[this.turn];
  }
  
  //}}}
  //{{{  hashRights
  
  cwtchStruct.prototype.hashRights = function () {
    this.hLo[0] ^= this.hLoRights[this.rights];
    this.hHi[0] ^= this.hHiRights[this.rights];
  }
  
  //}}}
  //{{{  hashEP
  
  cwtchStruct.prototype.hashEP = function () {
    this.hLo[0] ^= this.hLoEP[this.ep];
    this.hHi[0] ^= this.hHiEP[this.ep];
  }
  
  //}}}
  //{{{  hashObj
  
  cwtchStruct.prototype.hashObj = function (obj, sq) {
    this.hLo[0] ^= this.hLoObj[obj][sq];
    this.hHi[0] ^= this.hHiObj[obj][sq];
  }
  
  //}}}
  
  //{{{  uciExec
  
  //{{{  bench fens
  
  const bFens = [
    "r3k2r/2pb1ppp/2pp1q2/p7/1nP1B3/1P2P3/P2N1PPP/R2QK2R w KQkq a6 0 14",
    "4rrk1/2p1b1p1/p1p3q1/4p3/2P2n1p/1P1NR2P/PB3PP1/3R1QK1 b - - 2 24",
    "r3qbrk/6p1/2b2pPp/p3pP1Q/PpPpP2P/3P1B2/2PB3K/R5R1 w - - 16 42",
    "6k1/1R3p2/6p1/2Bp3p/3P2q1/P7/1P2rQ1K/5R2 b - - 4 44",
    "8/8/1p2k1p1/3p3p/1p1P1P1P/1P2PK2/8/8 w - - 3 54",
    "7r/2p3k1/1p1p1qp1/1P1Bp3/p1P2r1P/P7/4R3/Q4RK1 w - - 0 36",
    "r1bq1rk1/pp2b1pp/n1pp1n2/3P1p2/2P1p3/2N1P2N/PP2BPPP/R1BQ1RK1 b - - 2 10",
    "3r3k/2r4p/1p1b3q/p4P2/P2Pp3/1B2P3/3BQ1RP/6K1 w - - 3 87",
    "2r4r/1p4k1/1Pnp4/3Qb1pq/8/4BpPp/5P2/2RR1BK1 w - - 0 42",
    "4q1bk/6b1/7p/p1p4p/PNPpP2P/KN4P1/3Q4/4R3 b - - 0 37",
    "2q3r1/1r2pk2/pp3pp1/2pP3p/P1Pb1BbP/1P4Q1/R3NPP1/4R1K1 w - - 2 34",
    "1r2r2k/1b4q1/pp5p/2pPp1p1/P3Pn2/1P1B1Q1P/2R3P1/4BR1K b - - 1 37",
    "r3kbbr/pp1n1p1P/3ppnp1/q5N1/1P1pP3/P1N1B3/2P1QP2/R3KB1R b KQkq b3 0 17",
    "8/6pk/2b1Rp2/3r4/1R1B2PP/P5K1/8/2r5 b - - 16 42",
    "1r4k1/4ppb1/2n1b1qp/pB4p1/1n1BP1P1/7P/2PNQPK1/3RN3 w - - 8 29",
    "8/p2B4/PkP5/4p1pK/4Pb1p/5P2/8/8 w - - 29 68",
    "3r4/ppq1ppkp/4bnp1/2pN4/2P1P3/1P4P1/PQ3PBP/R4K2 b - - 2 20",
    "5rr1/4n2k/4q2P/P1P2n2/3B1p2/4pP2/2N1P3/1RR1K2Q w - - 1 49",
    "1r5k/2pq2p1/3p3p/p1pP4/4QP2/PP1R3P/6PK/8 w - - 1 51",
    "q5k1/5ppp/1r3bn1/1B6/P1N2P2/BQ2P1P1/5K1P/8 b - - 2 34",
    "r1b2k1r/5n2/p4q2/1ppn1Pp1/3pp1p1/NP2P3/P1PPBK2/1RQN2R1 w - - 0 22",
    "r1bqk2r/pppp1ppp/5n2/4b3/4P3/P1N5/1PP2PPP/R1BQKB1R w KQkq - 0 5",
    "r1bqr1k1/pp1p1ppp/2p5/8/3N1Q2/P2BB3/1PP2PPP/R3K2n b Q - 1 12",
    "r1bq2k1/p4r1p/1pp2pp1/3p4/1P1B3Q/P2B1N2/2P3PP/4R1K1 b - - 2 19",
    "r4qk1/6r1/1p4p1/2ppBbN1/1p5Q/P7/2P3PP/5RK1 w - - 2 25",
    "r7/6k1/1p6/2pp1p2/7Q/8/p1P2K1P/8 w - - 0 32",
    "r3k2r/ppp1pp1p/2nqb1pn/3p4/4P3/2PP4/PP1NBPPP/R2QK1NR w KQkq - 1 5",
    "3r1rk1/1pp1pn1p/p1n1q1p1/3p4/Q3P3/2P5/PP1NBPPP/4RRK1 w - - 0 12",
    "5rk1/1pp1pn1p/p3Brp1/8/1n6/5N2/PP3PPP/2R2RK1 w - - 2 20",
    "8/1p2pk1p/p1p1r1p1/3n4/8/5R2/PP3PPP/4R1K1 b - - 3 27",
    "8/4pk2/1p1r2p1/p1p4p/Pn5P/3R4/1P3PP1/4RK2 w - - 1 33",
    "8/5k2/1pnrp1p1/p1p4p/P6P/4R1PK/1P3P2/4R3 b - - 1 38",
    "8/8/1p1kp1p1/p1pr1n1p/P6P/1R4P1/1P3PK1/1R6 b - - 15 45",
    "8/8/1p1k2p1/p1prp2p/P2n3P/6P1/1P1R1PK1/4R3 b - - 5 49",
    "8/8/1p4p1/p1p2k1p/P2npP1P/4K1P1/1P6/3R4 w - - 6 54",
    "8/8/1p4p1/p1p2k1p/P2n1P1P/4K1P1/1P6/6R1 b - - 6 59",
    "8/5k2/1p4p1/p1pK3p/P2n1P1P/6P1/1P6/4R3 b - - 14 63",
    "8/1R6/1p1K1kp1/p6p/P1p2P1P/6P1/1Pn5/8 w - - 0 67",
    "1rb1rn1k/p3q1bp/2p3p1/2p1p3/2P1P2N/PP1RQNP1/1B3P2/4R1K1 b - - 4 23",
    "4rrk1/pp1n1pp1/q5p1/P1pP4/2n3P1/7P/1P3PB1/R1BQ1RK1 w - - 3 22",
    "r2qr1k1/pb1nbppp/1pn1p3/2ppP3/3P4/2PB1NN1/PP3PPP/R1BQR1K1 w - - 4 12",
    "2r2k2/8/4P1R1/1p6/8/P4K1N/7b/2B5 b - - 0 55",
    "6k1/5pp1/8/2bKP2P/2P5/p4PNb/B7/8 b - - 1 44",
    "2rqr1k1/1p3p1p/p2p2p1/P1nPb3/2B1P3/5P2/1PQ2NPP/R1R4K w - - 3 25",
    "r1b2rk1/p1q1ppbp/6p1/2Q5/8/4BP2/PPP3PP/2KR1B1R b - - 2 14",
    "6r1/5k2/p1b1r2p/1pB1p1p1/1Pp3PP/2P1R1K1/2P2P2/3R4 w - - 1 36",
    "rnbqkb1r/pppppppp/5n2/8/2PP4/8/PP2PPPP/RNBQKBNR b KQkq c3 0 2",
    "2rr2k1/1p4bp/p1q1p1p1/4Pp1n/2PB4/1PN3P1/P3Q2P/2RR2K1 w - f6 0 20",
    "3br1k1/p1pn3p/1p3n2/5pNq/2P1p3/1PN3PP/P2Q1PB1/4R1K1 w - - 0 23",
    "2r2b2/5p2/5k2/p1r1pP2/P2pB3/1P3P2/K1P3R1/7R w - - 23 93"
  ];
  
  //}}}
  //{{{  perft fens
  
  const pFens = [
    ['fen rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR             w KQkq -  0 1', 2, 400,       'cpw-pos1-2'],
    ['fen 4k3/8/8/8/8/8/R7/R3K2R                                  w Q    -  0 1', 3, 4729,      'castling-2'],
    ['fen 4k3/8/8/8/8/8/R7/R3K2R                                  w K    -  0 1', 3, 4686,      'castling-3'],
    ['fen 4k3/8/8/8/8/8/R7/R3K2R                                  w -    -  0 1', 3, 4522,      'castling-4'],
    ['fen r3k2r/r7/8/8/8/8/8/4K3                                  b kq   -  0 1', 3, 4893,      'castling-5'],
    ['fen r3k2r/r7/8/8/8/8/8/4K3                                  b q    -  0 1', 3, 4729,      'castling-6'],
    ['fen r3k2r/r7/8/8/8/8/8/4K3                                  b k    -  0 1', 3, 4686,      'castling-7'],
    ['fen r3k2r/r7/8/8/8/8/8/4K3                                  b -    -  0 1', 3, 4522,      'castling-8'],
    ['fen rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR             w KQkq -  0 1', 0, 1,         'cpw-pos1-0'],
    ['fen rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR             w KQkq -  0 1', 1, 20,        'cpw-pos1-1'],
    ['fen rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR             w KQkq -  0 1', 3, 8902,      'cpw-pos1-3'],
    ['fen rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR             w KQkq -  0 1', 4, 197281,    'cpw-pos1-4'],
    ['fen rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR             w KQkq -  0 1', 5, 4865609,   'cpw-pos1-5'],
    ['fen rnbqkb1r/pp1p1ppp/2p5/4P3/2B5/8/PPP1NnPP/RNBQK2R        w KQkq -  0 1', 1, 42,        'cpw-pos5-1'],
    ['fen rnbqkb1r/pp1p1ppp/2p5/4P3/2B5/8/PPP1NnPP/RNBQK2R        w KQkq -  0 1', 2, 1352,      'cpw-pos5-2'],
    ['fen rnbqkb1r/pp1p1ppp/2p5/4P3/2B5/8/PPP1NnPP/RNBQK2R        w KQkq -  0 1', 3, 53392,     'cpw-pos5-3'],
    ['fen r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq -  0 1', 1, 48,        'cpw-pos2-1'],
    ['fen r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq -  0 1', 2, 2039,      'cpw-pos2-2'],
    ['fen r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq -  0 1', 3, 97862,     'cpw-pos2-3'],
    ['fen 8/2p5/3p4/KP5r/1R3p1k/8/4P1P1/8                         w -    -  0 1', 5, 674624,    'cpw-pos3-5'],
    ['fen n1n5/PPPk4/8/8/8/8/4Kppp/5N1N                           b -    -  0 1', 1, 24,        'prom-1    '],
    ['fen 8/5bk1/8/2Pp4/8/1K6/8/8                                 w -    d6 0 1', 6, 824064,    'ccc-1     '],
    ['fen 8/8/1k6/8/2pP4/8/5BK1/8                                 b -    d3 0 1', 6, 824064,    'ccc-2     '],
    ['fen 8/8/1k6/2b5/2pP4/8/5K2/8                                b -    d3 0 1', 6, 1440467,   'ccc-3     '],
    ['fen 8/5k2/8/2Pp4/2B5/1K6/8/8                                w -    d6 0 1', 6, 1440467,   'ccc-4     '],
    ['fen 5k2/8/8/8/8/8/8/4K2R                                    w K    -  0 1', 6, 661072,    'ccc-5     '],
    ['fen 4k2r/8/8/8/8/8/8/5K2                                    b k    -  0 1', 6, 661072,    'ccc-6     '],
    ['fen 3k4/8/8/8/8/8/8/R3K3                                    w Q    -  0 1', 6, 803711,    'ccc-7     '],
    ['fen r3k3/8/8/8/8/8/8/3K4                                    b q    -  0 1', 6, 803711,    'ccc-8     '],
    ['fen r3k2r/1b4bq/8/8/8/8/7B/R3K2R                            w KQkq -  0 1', 4, 1274206,   'ccc-9     '],
    ['fen r3k2r/7b/8/8/8/8/1B4BQ/R3K2R                            b KQkq -  0 1', 4, 1274206,   'ccc-10    '],
    ['fen r3k2r/8/3Q4/8/8/5q2/8/R3K2R                             b KQkq -  0 1', 4, 1720476,   'ccc-11    '],
    ['fen r3k2r/8/5Q2/8/8/3q4/8/R3K2R                             w KQkq -  0 1', 4, 1720476,   'ccc-12    '],
    ['fen 2K2r2/4P3/8/8/8/8/8/3k4                                 w -    -  0 1', 6, 3821001,   'ccc-13    '],
    ['fen 3K4/8/8/8/8/8/4p3/2k2R2                                 b -    -  0 1', 6, 3821001,   'ccc-14    '],
    ['fen 8/8/1P2K3/8/2n5/1q6/8/5k2                               b -    -  0 1', 5, 1004658,   'ccc-15    '],
    ['fen 5K2/8/1Q6/2N5/8/1p2k3/8/8                               w -    -  0 1', 5, 1004658,   'ccc-16    '],
    ['fen 4k3/1P6/8/8/8/8/K7/8                                    w -    -  0 1', 6, 217342,    'ccc-17    '],
    ['fen 8/k7/8/8/8/8/1p6/4K3                                    b -    -  0 1', 6, 217342,    'ccc-18    '],
    ['fen 8/P1k5/K7/8/8/8/8/8                                     w -    -  0 1', 6, 92683,     'ccc-19    '],
    ['fen 8/8/8/8/8/k7/p1K5/8                                     b -    -  0 1', 6, 92683,     'ccc-20    '],
    ['fen K1k5/8/P7/8/8/8/8/8                                     w -    -  0 1', 6, 2217,      'ccc-21    '],
    ['fen 8/8/8/8/8/p7/8/k1K5                                     b -    -  0 1', 6, 2217,      'ccc-22    '],
    ['fen 8/k1P5/8/1K6/8/8/8/8                                    w -    -  0 1', 7, 567584,    'ccc-23    '],
    ['fen 8/8/8/8/1k6/8/K1p5/8                                    b -    -  0 1', 7, 567584,    'ccc-24    '],
    ['fen 8/8/2k5/5q2/5n2/8/5K2/8                                 b -    -  0 1', 4, 23527,     'ccc-25    '],
    ['fen 8/5k2/8/5N2/5Q2/2K5/8/8                                 w -    -  0 1', 4, 23527,     'ccc-26    '],
    ['fen rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR             w KQkq -  0 1', 6, 119060324, 'cpw-pos1-6'],
    ['fen 8/p7/8/1P6/K1k3p1/6P1/7P/8                              w -    -  0 1', 8, 8103790,   'jvm-7     '],
    ['fen n1n5/PPPk4/8/8/8/8/4Kppp/5N1N                           b -    -  0 1', 6, 71179139,  'jvm-8     '],
    ['fen r3k2r/p6p/8/B7/1pp1p3/3b4/P6P/R3K2R                     w KQkq -  0 1', 6, 77054993,  'jvm-9     '],
    ['fen 8/5p2/8/2k3P1/p3K3/8/1P6/8                              b -    -  0 1', 8, 64451405,  'jvm-11    '],
    ['fen r3k2r/pb3p2/5npp/n2p4/1p1PPB2/6P1/P2N1PBP/R3K2R         w KQkq -  0 1', 5, 29179893,  'jvm-12    '],
    ['fen 8/2p5/3p4/KP5r/1R3p1k/8/4P1P1/8                         w -    -  0 1', 7, 178633661, 'jvm-10    '],
    ['fen r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq -  0 1', 5, 193690690, 'jvm-6     '],
    ['fen 8/2pkp3/8/RP3P1Q/6B1/8/2PPP3/rb1K1n1r                   w -    -  0 1', 6, 181153194, 'ob1       '],
    ['fen rnbqkb1r/ppppp1pp/7n/4Pp2/8/8/PPPP1PPP/RNBQKBNR         w KQkq f6 0 1', 6, 244063299, 'jvm-5     '],
    ['fen 8/2ppp3/8/RP1k1P1Q/8/8/2PPP3/rb1K1n1r                   w -    -  0 1', 6, 205552081, 'ob2       '],
    ['fen 8/8/3q4/4r3/1b3n2/8/3PPP2/2k1K2R                        w K    -  0 1', 6, 207139531, 'ob3       '],
    ['fen 4r2r/RP1kP1P1/3P1P2/8/8/3ppp2/1p4p1/4K2R                b K    -  0 1', 6, 314516438, 'ob4       '],
    ['fen r3k2r/8/8/8/3pPp2/8/8/R3K1RR                            b KQkq e3 0 1', 6, 485647607, 'jvm-1     '],
    ['fen 8/3K4/2p5/p2b2r1/5k2/8/8/1q6                            b -    -  0 1', 7, 493407574, 'jvm-4     '],
    ['fen r3k2r/Pppp1ppp/1b3nbN/nP6/BBP1P3/q4N2/Pp1P2PP/R2Q1RK1   w kq   -  0 1', 6, 706045033, 'jvm-2     '],
    ['fen r6r/1P4P1/2kPPP2/8/8/3ppp2/1p4p1/R3K2R                  w KQ   -  0 1', 6, 975944981, 'ob5       ']
  ];
  
  //}}}
  
  cwtchStruct.prototype.uciExec = function (e) {
  
    const messageList = e.split('\n');
  
    for (let messageNum=0; messageNum < messageList.length; messageNum++ ) {
  
      let message = messageList[messageNum].replace(/(\r\n|\n|\r)/gm,"");
  
      message = message.trim();
      message = message.replace(/\s+/g,' ');
  
      const tokens  = message.split(' ');
      const command = tokens[0];
  
      if (!command)
        continue;
  
      switch (command) {
  
        case 'position':
        case 'p': {
          //{{{  position
          
          switch (tokens[1]) {
          
            case 'startpos':
            case 's':
          
              this.position('rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR', 'w', 'KQkq', '-');
              if (tokens[2] == 'moves') {
                for (let i=3; i < tokens.length; i++)
                  this.playMove(tokens[i]);
              }
              break;
          
            case 'fen':
            case 'f':
          
              this.position(tokens[2], tokens[3], tokens[4], tokens[5]);
              if (tokens[8] == 'moves') {
                for (let i=9; i < tokens.length; i++)
                  this.playMove(tokens[i]);
              }
              break;
          
            default:
          
              console.log(command, tokens[1], 'not implemented');
              break;
          }
          
          break;
          
          //}}}
        }
  
        case 'go':
        case 'g': {
          //{{{  go
          
          const slop = 1;
          
          let wTime     = 0;
          let bTime     = 0;
          let wInc      = 0;
          let bInc      = 0;
          let moveTime  = 0;
          let movesToGo = 0;
          let depth     = 0;
          let nodes     = 0;
          
          let i = 1;
          
          while (i < tokens.length) {
            switch (tokens[i]) {
              case 'depth':
              case 'd': {
                depth = parseInt(tokens[i+1]);
                i += 2;
                break;
              }
              case 'nodes': {
                nodes = parseInt(tokens[i+1]);
                i += 2;
                break;
              }
              case 'movestogo': {
                movesToGo = parseInt(tokens[i+1]);
                i += 2;
                break;
              }
              case 'movetime':
              case 'mt': {
                moveTime = parseInt(tokens[i+1]);
                i += 2;
                break;
              }
              case 'winc': {
                wInc = parseInt(tokens[i+1]);
                i += 2;
                break;
              }
              case 'binc': {
                bInc = parseInt(tokens[i+1]);
                i += 2;
                break;
              }
              case 'wtime': {
                wTime = parseInt(tokens[i+1]);
                i += 2;
                break;
              }
              case 'btime': {
                bTime = parseInt(tokens[i+1]);
                i += 2;
                break;
              }
              default: {
                console.log('unknown go token', tokens[i]);
                i++;
              }
            }
          }
          
          if (depth)
            this.targetDepth = depth;
          else
            this.targetDepth = MAX_PLY - 1;
          
          if (nodes)
            this.targetNodes = nodes;
          else
            this.targetNodes = 0;
          
          if (moveTime > 0)
            this.finishTime = Date.now() + moveTime + slop;
          
          else {
          
            if (movesToGo)
              movesToGo += 2;
            else
              movesToGo = 30;
          
            if (wTime && this.turn == WHITE)
              this.finishTime = Date.now() + 0.95 * (wTime/movesToGo + wInc) + slop;
            else if (bTime && this.turn == BLACK)
              this.finishTime = Date.now() + 0.95 * (bTime/movesToGo + bInc) + slop;
            else
              this.finishTime = 0;
          }
          
          this.go();
          
          break;
          
          //}}}
        }
  
        case 'uci': {
          //{{{  uci
          
          console.log('id name cwtch 0');
          console.log('id author Colin Jenkins');
          console.log('uciok');
          
          break;
          
          //}}}
        }
  
        case 'isready': {
          //{{{  isready
          
          console.log('readyok');
          
          break;
          
          //}}}
        }
  
        case 'stop': {
          //{{{  stop
          
          break;
          
          //}}}
        }
  
        case 'ucinewgame':
        case 'u': {
          //{{{  ucinewgame
          
          this.newGame();
          
          break;
          
          //}}}
        }
  
        case 'board':
        case 'b': {
          //{{{  board
          
          this.printBoard();
          
          break;
          
          //}}}
        }
  
        case 'draw':
        case 'd': {
          //{{{  draw
          
          console.log(this.isDraw());
          
          break;
          
          //}}}
        }
  
        case 'fen':
        case 'f': {
          //{{{  fen
          
          console.log(this.fen());
          
          break;
          
          //}}}
        }
  
        case 'hash':
        case 'h': {
          //{{{  hash
          
          console.log(this.hHi[0],this.hLo[0]);
          console.log(this.hHistoryLimit,this.hHistoryNext);
          
          break;
          
          //}}}
        }
  
        case 'eval':
        case 'e': {
          //{{{  eval
          
          const e1 = this.netSlowEval();
          const e2 = this.netFastEval();
          const e3 = this.pstEval();
          
          let w = '';
          
          if (e1 != e2)
            w += '!';
          
          if (e1 < 0 && e3 > 0)
            w += '+';
          
          if (e1 > 0 && e3 < 0)
            w += '-';
          
          if (w)
            w += ' ' + this.fen();
          
          console.log('slow',e1,'fast',e2,'pst',e3,w);
          
          break;
          
          //}}}
        }
  
        case 'n': {
          //{{{  net info
          
          console.log('h1',net_h1_size);
          console.log('scale',net_scale);
          
          break;
          
          //}}}
        }
  
        case 'quit':
        case 'q': {
          //{{{  quit
          
          process.exit();
          
          break;
          
          //}}}
        }
  
        case 'perft': {
          //{{{  perft
          
          const depth  = parseInt(tokens[1]);
          const t      = Date.now();
          const pmoves = perft(depth);
          
          console.log(pmoves,'moves ',Date.now()-t,'ms');
          
          break;
          
          //}}}
        }
  
        case 'bench': {
          //{{{  bench
          
          let nodes = 0;
          
          const t1 = Date.now();
          
          for (let i=0; i < bFens.length; i++) {
          
            const fen = bFens[i];
          
            this.uciExec('ucinewgame');
            this.uciExec('position fen ' + fen);
            this.uciExec('go depth 6');
          
            nodes += this.nodeCount;
          }
          
          const t2  = Date.now();
          const sec = (Math.round((t2-t1)/100)/10);
          
          console.log(sec,nodes);
          
          break;
          
          //}}}
        }
  
        case 'et': {
          //{{{  eval tests
          
          for (let i=0; i < bFens.length; i++) {
          
            const fen = bFens[i];
          
            this.uciExec('ucinewgame');
            this.uciExec('position fen ' + fen);
            this.uciExec('e');
          
          }
          
          break;
          
          //}}}
        }
  
        case 'pt': {
          //{{{  perft tests
          
          let num = 0;
          
          if (tokens.length > 1)
            num = parseInt(tokens[1]);
          else
            num = pFens.length;
          
          let errs = 0;
          
          const t1 = Date.now();
          
          for (let i=0; i < num; i++) {
          
            const p = pFens[i];
          
            const fen   = p[0];
            const depth = p[1];
            const moves = p[2];
            const id    = p[3];
          
            this.uciExec('ucinewgame');
            this.uciExec('position ' + fen);
          
            const pmoves = this.perft(this.nodes[0], depth);
            const err    = pmoves - moves;
          
            errs += err;
          
            const t2  = Date.now();
            const sec = (''+Math.round((t2-t1)/100)/10).padEnd(6);
          
            console.log(sec,id,fen,depth,moves,pmoves,err,errs);
          }
          
          const t2  = Date.now();
          const sec = Math.round((t2-t1)/100)/10;
          
          console.log(sec, 'sec', errs, 'perft errors');
          
          break;
          
          //}}}
        }
  
        default:
          //{{{  ?
          
          console.log(command, '?');
          
          break;
          
          //}}}
      }
    }
  }
  
  //}}}
  //{{{  uciArgv
  
  cwtchStruct.prototype.uciArgv = function () {
  
    if (process.argv.length > 2) {
      for (let i=2; i < process.argv.length; i++)
        this.uciExec(process.argv[i]);
    }
  
  }
  
  //}}}
  //{{{  newGame
  
  cwtchStruct.prototype.newGame = function () {
  
    this.ttInit();
  
    for (let i=0; i < MAX_PLY; i++) {
      this.nodes[i].killer = 0;
    }
  
  }
  
  //}}}
  //{{{  areWeOutOfTime
  
  cwtchStruct.prototype.areWeOutOfTime = function () {
  
    return this.bestMove && ((this.finishTime  && (Date.now()     >  this.finishTime)) ||
                             (this.targetNodes && (this.nodeCount >= this.targetNodes)));
  
  }
  
  //}}}
  //{{{  printBoard
  
  cwtchStruct.prototype.printBoard = function () {
  
    const b = this.board;
  
    for (let rank=7; rank >= 0; rank--) {
      process.stdout.write((rank+1)+' ');
      for (let file=0; file <= 7; file++) {
        process.stdout.write(OBJ_CHAR[b[B88[(7-rank)*8+file]]] + ' ');
      }
      process.stdout.write('\r\n');
    }
  
    console.log('  a b c d e f g h');
  
    if (this.turn == WHITE)
      process.stdout.write('w');
    else
      process.stdout.write('b');
    process.stdout.write(' ');
  
    if (this.rights) {
      if (this.rights & WHITE_RIGHTS_KING)
        process.stdout.write('K');
     if (this.rights & WHITE_RIGHTS_QUEEN)
        process.stdout.write('Q');
     if (this.rights & BLACK_RIGHTS_KING)
        process.stdout.write('k');
     if (this.rights & BLACK_RIGHTS_QUEEN)
        process.stdout.write('q');
      process.stdout.write(' ');
    }
    else
      process.stdout.write('- ');
  
    if (this.ep)
      process.stdout.write(COORDS[this.ep]);
    else
      process.stdout.write('-');
  
    console.log();
  
    console.log(this.fen());
    console.log(this.hHi[0],this.hLo[0]);
  }
  
  //}}}
  //{{{  fen
  
  cwtchStruct.prototype.fen = function () {
  
    let fen = '';
    let n   = 0;
  
    for (let i=0; i < 8; i++) {
      for (let j=0; j < 8; j++) {
        const sq  = B88[i*8 + j]
        const obj = this.board[sq];
        if (obj == 0)
          n++;
        else {
          if (n) {
            fen += '' + n;
            n = 0;
          }
          fen += OBJ_CHAR[obj];
        }
      }
      if (n) {
        fen += '' + n;
        n = 0;
      }
      if (i < 7)
        fen += '/';
    }
  
    if (this.turn == WHITE)
      fen += ' w';
    else
      fen += ' b';
  
    if (this.rights) {
      fen += ' ';
      if (this.rights & WHITE_RIGHTS_KING)
        fen += 'K';
      if (this.rights & WHITE_RIGHTS_QUEEN)
        fen += 'Q';
      if (this.rights & BLACK_RIGHTS_KING)
        fen += 'k';
      if (this.rights & BLACK_RIGHTS_QUEEN)
        fen += 'Q';
    }
    else
      fen += ' -';
  
    if (this.ep)
      fen += ' ' + COORDS[this.ep];
    else
      fen += ' -';
  
    fen += ' 0 1';
  
    return fen;
  }
  
  //}}}
  //{{{  isKingAttacked
  
  cwtchStruct.prototype.isKingAttacked = function (to, byCol) {
  
    const b = this.board;
  
    const cx = colourIndex(byCol);
  
    const OFFSET_DIAG1 = -WB_OFFSET_DIAG1[cx];
    const OFFSET_DIAG2 = -WB_OFFSET_DIAG2[cx];
    const RQ           = WB_RQ[cx];
    const BQ           = WB_BQ[cx];
    const BY_PAWN      = WB_PAWN[cx];
    const N            = KNIGHT | byCol;
  
    let fr = 0;
  
    //{{{  pawns
    
    if (b[to+OFFSET_DIAG1] == BY_PAWN || b[to+OFFSET_DIAG2] == BY_PAWN)
      return 1;
    
    //}}}
    //{{{  knights
    
    if ((b[to + -10] == N) ||
        (b[to + -23] == N) ||
        (b[to + -14] == N) ||
        (b[to + -25] == N) ||
        (b[to +  10] == N) ||
        (b[to +  23] == N) ||
        (b[to +  14] == N) ||
        (b[to +  25] == N)) return 1;
    
    //}}}
    //{{{  queen, bishop, rook
    
    fr = to + 1;  while (!b[fr]) fr += 1;  if (RQ[b[fr]]) return 1;
    fr = to - 1;  while (!b[fr]) fr -= 1;  if (RQ[b[fr]]) return 1;
    fr = to + 12; while (!b[fr]) fr += 12; if (RQ[b[fr]]) return 1;
    fr = to - 12; while (!b[fr]) fr -= 12; if (RQ[b[fr]]) return 1;
    
    fr = to + 11; while (!b[fr]) fr += 11; if (BQ[b[fr]]) return 1;
    fr = to - 11; while (!b[fr]) fr -= 11; if (BQ[b[fr]]) return 1;
    fr = to + 13; while (!b[fr]) fr += 13; if (BQ[b[fr]]) return 1;
    fr = to - 13; while (!b[fr]) fr -= 13; if (BQ[b[fr]]) return 1;
    
    //}}}
  
    return 0;
  }
  
  //}}}
  //{{{  isDraw
  
  cwtchStruct.prototype.isDraw = function () {
  
    if (this.hHistoryNext - this.hHistoryLimit > 100)
      return true;
  
    let count = 0;
  
    for (let i=this.hHistoryNext-5; i >= this.hHistoryLimit; i -= 2) {
  
      if (this.hashEq(this.hHistoryLo[i],this.hHistoryHi[i])) {
        count++;
        if (count == 2) {
          return true;
        }
      }
    }
  
    return false;
  }
  
  //}}}
  //{{{  playMove
  
  cwtchStruct.prototype.playMove = function (uciMove) {
  
    const node = this.nodes[0];
  
    const turn     = this.turn;
    const nextTurn = colourToggle(turn);
    const cx       = colourIndex(turn);
    const inCheck  = this.isKingAttacked(this.kings[cx], nextTurn);
  
    node.ttMove = 0;
  
    node.initMoveGen(ALL_MOVES,inCheck);
  
    let move = 0;
  
    while (move = node.getNextMove()) {
  
      if (formatMove(move) == uciMove) {
        this.makeMove(move);
        return;
      }
    }
  
    console.log('info cannot play uci move', uciMove);
    process.exit();
  }
  
  //}}}
  
  //}}}

  //{{{  PSTs
  
  const MATERIAL_MID = [100,341,363,483,1023,20000];
  const MATERIAL_END = [142,270,296,474,887,20000];
  
  const WPAWN_MID = [
       0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       0,    0,   76,  131,   63,  105,   87,  135,   17,  -34,    0,    0,
       0,    0,  -34,  -18,    6,   12,   55,   48,    1,  -44,    0,    0,
       0,    0,  -43,   -9,  -14,    2,    5,   -6,    0,  -45,    0,    0,
       0,    0,  -56,  -23,  -24,   -6,   -1,  -11,   -6,  -46,    0,    0,
       0,    0,  -54,  -25,  -24,  -29,  -15,  -13,   17,  -34,    0,    0,
       0,    0,  -63,  -22,  -40,  -43,  -35,    7,   21,  -44,    0,    0,
       0,    0,  -15,   -5,    0,    5,    5,    0,   -5,  -15,    0,    0,
       0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0
  ];
  const WPAWN_END = [
       0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       0,    0,  129,  113,  101,   71,   85,   69,  117,  145,    0,    0,
       0,    0,   50,   53,   35,   17,   -2,   -5,   33,   38,    0,    0,
       0,    0,  -13,  -26,  -37,  -48,  -55,  -48,  -36,  -31,    0,    0,
       0,    0,  -31,  -40,  -53,  -59,  -60,  -61,  -50,  -50,    0,    0,
       0,    0,  -41,  -42,  -57,  -48,  -51,  -57,  -56,  -58,    0,    0,
       0,    0,  -30,  -41,  -40,  -40,  -39,  -53,  -53,  -56,    0,    0,
       0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0
  ];
  const WKNIGHT_MID = [
       0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       0,    0, -189,  -95,  -44,  -36,   90,  -92,  -10, -113,    0,    0,
       0,    0,  -69,  -37,   79,   41,   33,   73,    9,   -4,    0,    0,
       0,    0,  -39,   71,   46,   74,  104,  139,   86,   56,    0,    0,
       0,    0,   -3,   26,   27,   63,   47,   83,   28,   31,    0,    0,
       0,    0,   -4,   14,   23,   21,   36,   29,   29,    2,    0,    0,
       0,    0,  -13,    0,   22,   19,   28,   28,   33,   -6,    0,    0,
       0,    0,  -22,  -49,   -4,    6,    8,   27,   -7,   -8,    0,    0,
       0,    0, -113,  -10,  -52,  -28,   -7,  -20,   -7,  -14,    0,    0,
       0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0
  ];
  const WKNIGHT_END = [
       0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       0,    0,  -45,  -36,  -11,  -36,  -48,  -29,  -68,  -94,    0,    0,
       0,    0,  -27,  -12,  -34,  -11,  -17,  -37,  -29,  -57,    0,    0,
       0,    0,  -30,  -32,    1,   -3,  -20,  -25,  -33,  -53,    0,    0,
       0,    0,  -23,   -5,   15,   11,   12,   -2,   -3,  -26,    0,    0,
       0,    0,  -25,  -13,    9,   17,    7,    9,   -3,  -29,    0,    0,
       0,    0,  -31,  -10,  -11,    5,    1,  -14,  -29,  -31,    0,    0,
       0,    0,  -46,  -22,  -17,  -14,  -11,  -29,  -29,  -53,    0,    0,
       0,    0,  -26,  -62,  -27,  -20,  -29,  -25,  -61,  -69,    0,    0,
       0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0
  ];
  const WBISHOP_MID = [
       0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       0,    0,  -19,   14,  -97,  -52,  -33,  -31,    2,    5,    0,    0,
       0,    0,  -11,   28,   -5,  -15,   46,   69,   31,  -34,    0,    0,
       0,    0,   -1,   48,   55,   54,   48,   71,   46,   14,    0,    0,
       0,    0,    9,   21,   31,   63,   52,   54,   22,   12,    0,    0,
       0,    0,    8,   29,   27,   38,   48,   26,   23,   17,    0,    0,
       0,    0,   14,   30,   27,   30,   27,   42,   31,   22,    0,    0,
       0,    0,   18,   31,   29,   14,   23,   33,   48,   18,    0,    0,
       0,    0,  -24,   10,    1,  -10,   -2,    3,  -29,  -12,    0,    0,
       0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0
  ];
  const WBISHOP_END = [
       0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       0,    0,  -32,  -38,  -17,  -19,  -18,  -25,  -28,  -41,    0,    0,
       0,    0,  -25,  -23,  -10,  -24,  -23,  -33,  -23,  -28,    0,    0,
       0,    0,  -17,  -28,  -20,  -22,  -22,  -19,  -18,  -15,    0,    0,
       0,    0,  -21,  -10,   -7,  -11,   -7,  -12,  -17,  -17,    0,    0,
       0,    0,  -23,  -18,   -6,   -1,  -12,  -10,  -21,  -26,    0,    0,
       0,    0,  -30,  -22,  -10,   -9,   -6,  -18,  -24,  -33,    0,    0,
       0,    0,  -32,  -38,  -25,  -18,  -15,  -28,  -36,  -47,    0,    0,
       0,    0,  -37,  -26,  -44,  -21,  -25,  -36,  -20,  -32,    0,    0,
       0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0
  ];
  const WROOK_MID = [
       0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       0,    0,   37,   56,   34,   81,   76,    0,   19,   34,    0,    0,
       0,    0,   33,   32,   75,   75,   96,   89,   23,   47,    0,    0,
       0,    0,  -11,   17,   24,   31,    9,   59,   71,   13,    0,    0,
       0,    0,  -32,  -15,    2,   22,   16,   34,   -6,  -25,    0,    0,
       0,    0,  -45,  -33,  -16,   -5,    0,  -13,    7,  -27,    0,    0,
       0,    0,  -52,  -28,  -19,  -23,   -4,   -8,   -7,  -37,    0,    0,
       0,    0,  -51,  -19,  -25,  -16,   -6,    3,   -9,  -74,    0,    0,
       0,    0,  -25,  -19,   -6,    4,    6,   -8,  -35,  -25,    0,    0,
       0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0
  ];
  const WROOK_END = [
       0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       0,    0,   28,   21,   34,   21,   21,   34,   27,   23,    0,    0,
       0,    0,   25,   29,   20,   21,    2,    9,   26,   17,    0,    0,
       0,    0,   29,   27,   24,   24,   25,    7,    6,   16,    0,    0,
       0,    0,   29,   25,   33,   20,   22,   17,   19,   27,    0,    0,
       0,    0,   29,   30,   30,   25,   18,   17,   11,   14,    0,    0,
       0,    0,   23,   23,   17,   22,   14,   10,   12,    9,    0,    0,
       0,    0,   21,   16,   23,   25,   13,   13,   10,   26,    0,    0,
       0,    0,   17,   26,   27,   23,   19,   16,   26,    0,    0,    0,
       0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0
  ];
  const WQUEEN_MID = [
       0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       0,    0,  -23,    0,   23,   20,  119,  105,   69,   52,    0,    0,
       0,    0,  -12,  -31,    2,    6,  -21,   83,   34,   64,    0,    0,
       0,    0,   -1,   -6,   18,    8,   33,   80,   56,   68,    0,    0,
       0,    0,  -23,  -20,   -8,   -9,    5,   20,    3,    6,    0,    0,
       0,    0,    1,  -23,   -1,   -3,    3,    5,    8,    6,    0,    0,
       0,    0,  -10,   14,   -3,    7,    3,   10,   21,   10,    0,    0,
       0,    0,  -26,    0,   22,   10,   17,   23,   10,   12,    0,    0,
       0,    0,    7,   -6,    1,   21,   -8,  -21,  -24,  -40,    0,    0,
       0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0
  ];
  const WQUEEN_END = [
       0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       0,    0,    3,   36,   35,   37,  -11,  -13,   -5,   22,    0,    0,
       0,    0,  -11,   31,   42,   52,   79,   12,   32,   -6,    0,    0,
       0,    0,  -16,   12,   11,   64,   59,   21,   21,    4,    0,    0,
       0,    0,   20,   34,   32,   56,   70,   51,   75,   49,    0,    0,
       0,    0,  -15,   45,   29,   60,   44,   41,   48,   30,    0,    0,
       0,    0,    1,  -30,   24,   12,   20,   25,   15,   16,    0,    0,
       0,    0,  -12,  -14,  -28,  -10,  -10,  -19,  -36,  -31,    0,    0,
       0,    0,  -28,  -25,  -18,  -49,    2,  -19,  -11,  -33,    0,    0,
       0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0
  ];
  const WKING_MID = [
       0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       0,    0,  -28,  106,   87,   49, -106,  -55,   60,   46,    0,    0,
       0,    0,  108,   71,   52,   76,   38,   42,  -20, -102,    0,    0,
       0,    0,   76,   79,   94,   24,   49,   90,  111,    6,    0,    0,
       0,    0,   17,    6,   34,  -15,   -9,  -18,   13,  -50,    0,    0,
       0,    0,  -52,   36,  -31,  -79,  -78,  -48,  -38,  -59,    0,    0,
       0,    0,   31,   14,  -16,  -50,  -48,  -39,    6,  -12,    0,    0,
       0,    0,   35,   36,    5,  -55,  -36,   -8,   37,   43,    0,    0,
       0,    0,   14,   69,   37,  -50,   26,  -16,   56,   54,    0,    0,
       0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0
  ];
  const WKING_END = [
       0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       0,    0,  -88,  -70,  -52,  -49,  -13,    4,  -25,  -38,    0,    0,
       0,    0,  -49,  -18,  -20,  -18,  -12,    7,    4,    9,    0,    0,
       0,    0,  -27,  -14,  -15,  -11,  -12,    8,    4,  -10,    0,    0,
       0,    0,  -34,   -3,   -3,    7,    3,   14,    3,  -11,    0,    0,
       0,    0,  -35,  -32,    4,   16,   18,    9,   -5,  -23,    0,    0,
       0,    0,  -48,  -27,   -8,    6,    9,    3,  -15,  -27,    0,    0,
       0,    0,  -56,  -39,  -16,   -3,   -2,  -13,  -32,  -48,    0,    0,
       0,    0,  -82,  -70,  -50,  -27,  -55,  -31,  -58,  -82,    0,    0,
       0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0
  ];
  
  const BPAWN_MID   = Array(144).fill(0);
  const BKNIGHT_MID = Array(144).fill(0);
  const BBISHOP_MID = Array(144).fill(0);
  const BROOK_MID   = Array(144).fill(0);
  const BQUEEN_MID  = Array(144).fill(0);
  const BKING_MID   = Array(144).fill(0);
  const BPAWN_END   = Array(144).fill(0);
  const BKNIGHT_END = Array(144).fill(0);
  const BBISHOP_END = Array(144).fill(0);
  const BROOK_END   = Array(144).fill(0);
  const BQUEEN_END  = Array(144).fill(0);
  const BKING_END   = Array(144).fill(0);
  
  const WHITE_MID_PST = [WPAWN_MID, WKNIGHT_MID, WBISHOP_MID, WROOK_MID, WQUEEN_MID, WKING_MID];
  const WHITE_END_PST = [WPAWN_END, WKNIGHT_END, WBISHOP_END, WROOK_END, WQUEEN_END, WKING_END];
  const BLACK_MID_PST = [BPAWN_MID, BKNIGHT_MID, BBISHOP_MID, BROOK_MID, BQUEEN_MID, BKING_MID];
  const BLACK_END_PST = [BPAWN_END, BKNIGHT_END, BBISHOP_END, BROOK_END, BQUEEN_END, BKING_END];
  
  const WB_MID_PST = [WHITE_MID_PST, BLACK_MID_PST];
  const WB_END_PST = [WHITE_END_PST, BLACK_END_PST];
  
  //}}}
  //{{{  weights
  
  // epochs 106, h1 size 1, batch size 100, mse 0.08009398099961028, Thu Jul 04 2024 08:00:18 GMT+0100 (British Summer Time)
  
  const net_scale = 150;
  const net_h1_size = 1;
  const net_h1_w = Array(768);
  net_h1_w[0] = [-0.0849132090806961];
  net_h1_w[1] = [-0.04236914590001106];
  net_h1_w[2] = [0.024166803807020187];
  net_h1_w[3] = [-0.1016945093870163];
  net_h1_w[4] = [0.00844027940183878];
  net_h1_w[5] = [-0.0002886825823225081];
  net_h1_w[6] = [-0.0510578528046608];
  net_h1_w[7] = [0.012206126935780048];
  net_h1_w[8] = [-1.3155927658081055];
  net_h1_w[9] = [-1.3922841548919678];
  net_h1_w[10] = [-1.2605072259902954];
  net_h1_w[11] = [-1.0963313579559326];
  net_h1_w[12] = [-1.1558146476745605];
  net_h1_w[13] = [-1.0826956033706665];
  net_h1_w[14] = [-1.1750255823135376];
  net_h1_w[15] = [-1.0296636819839478];
  net_h1_w[16] = [-0.9494815468788147];
  net_h1_w[17] = [-1.038378119468689];
  net_h1_w[18] = [-0.9492782950401306];
  net_h1_w[19] = [-0.8162083029747009];
  net_h1_w[20] = [-0.8553557395935059];
  net_h1_w[21] = [-0.8927462100982666];
  net_h1_w[22] = [-1.0149919986724854];
  net_h1_w[23] = [-0.8672754764556885];
  net_h1_w[24] = [-0.6683412194252014];
  net_h1_w[25] = [-0.7216106653213501];
  net_h1_w[26] = [-0.6946377754211426];
  net_h1_w[27] = [-0.6210933327674866];
  net_h1_w[28] = [-0.6697208881378174];
  net_h1_w[29] = [-0.631044328212738];
  net_h1_w[30] = [-0.7178705334663391];
  net_h1_w[31] = [-0.6341025829315186];
  net_h1_w[32] = [-0.5776236653327942];
  net_h1_w[33] = [-0.5984392762184143];
  net_h1_w[34] = [-0.5685098767280579];
  net_h1_w[35] = [-0.6329211592674255];
  net_h1_w[36] = [-0.6409364938735962];
  net_h1_w[37] = [-0.5589417219161987];
  net_h1_w[38] = [-0.638376772403717];
  net_h1_w[39] = [-0.5373738408088684];
  net_h1_w[40] = [-0.5424703359603882];
  net_h1_w[41] = [-0.5819198489189148];
  net_h1_w[42] = [-0.5671861171722412];
  net_h1_w[43] = [-0.5685573816299438];
  net_h1_w[44] = [-0.5846487283706665];
  net_h1_w[45] = [-0.5405856370925903];
  net_h1_w[46] = [-0.6472499966621399];
  net_h1_w[47] = [-0.5598286986351013];
  net_h1_w[48] = [-0.5479454398155212];
  net_h1_w[49] = [-0.6064541935920715];
  net_h1_w[50] = [-0.5265604853630066];
  net_h1_w[51] = [-0.44209742546081543];
  net_h1_w[52] = [-0.5613343119621277];
  net_h1_w[53] = [-0.6252654194831848];
  net_h1_w[54] = [-0.7119549512863159];
  net_h1_w[55] = [-0.5554143786430359];
  net_h1_w[56] = [0.01173440646380186];
  net_h1_w[57] = [0.03826471418142319];
  net_h1_w[58] = [-0.072830431163311];
  net_h1_w[59] = [-0.023754673078656197];
  net_h1_w[60] = [-0.006599894724786282];
  net_h1_w[61] = [0.041229650378227234];
  net_h1_w[62] = [0.016170404851436615];
  net_h1_w[63] = [-0.051894813776016235];
  net_h1_w[64] = [-1.231967806816101];
  net_h1_w[65] = [-1.830756664276123];
  net_h1_w[66] = [-1.9119707345962524];
  net_h1_w[67] = [-1.9691842794418335];
  net_h1_w[68] = [-2.0527050495147705];
  net_h1_w[69] = [-1.84689462184906];
  net_h1_w[70] = [-2.0231401920318604];
  net_h1_w[71] = [-1.3293060064315796];
  net_h1_w[72] = [-1.809529185295105];
  net_h1_w[73] = [-1.980860948562622];
  net_h1_w[74] = [-2.104015827178955];
  net_h1_w[75] = [-2.1283857822418213];
  net_h1_w[76] = [-2.0695345401763916];
  net_h1_w[77] = [-2.2646777629852295];
  net_h1_w[78] = [-2.021392822265625];
  net_h1_w[79] = [-1.9561485052108765];
  net_h1_w[80] = [-1.9875661134719849];
  net_h1_w[81] = [-2.2076172828674316];
  net_h1_w[82] = [-2.260099411010742];
  net_h1_w[83] = [-2.3874289989471436];
  net_h1_w[84] = [-2.3958938121795654];
  net_h1_w[85] = [-2.358060359954834];
  net_h1_w[86] = [-2.246443271636963];
  net_h1_w[87] = [-2.0275776386260986];
  net_h1_w[88] = [-2.021136999130249];
  net_h1_w[89] = [-2.0952868461608887];
  net_h1_w[90] = [-2.234342336654663];
  net_h1_w[91] = [-2.3686437606811523];
  net_h1_w[92] = [-2.291491746902466];
  net_h1_w[93] = [-2.3611438274383545];
  net_h1_w[94] = [-2.1521992683410645];
  net_h1_w[95] = [-2.0871827602386475];
  net_h1_w[96] = [-1.9834321737289429];
  net_h1_w[97] = [-2.036684513092041];
  net_h1_w[98] = [-2.144188165664673];
  net_h1_w[99] = [-2.1220784187316895];
  net_h1_w[100] = [-2.1864681243896484];
  net_h1_w[101] = [-2.151745080947876];
  net_h1_w[102] = [-2.104174852371216];
  net_h1_w[103] = [-2.0177712440490723];
  net_h1_w[104] = [-1.7963420152664185];
  net_h1_w[105] = [-1.965906023979187];
  net_h1_w[106] = [-2.0567712783813477];
  net_h1_w[107] = [-2.12137770652771];
  net_h1_w[108] = [-2.0880398750305176];
  net_h1_w[109] = [-2.0699515342712402];
  net_h1_w[110] = [-2.0576140880584717];
  net_h1_w[111] = [-1.9184045791625977];
  net_h1_w[112] = [-1.7974756956100464];
  net_h1_w[113] = [-1.8404523134231567];
  net_h1_w[114] = [-1.9330458641052246];
  net_h1_w[115] = [-2.005324363708496];
  net_h1_w[116] = [-1.9900037050247192];
  net_h1_w[117] = [-2.0116405487060547];
  net_h1_w[118] = [-1.8963655233383179];
  net_h1_w[119] = [-1.9550715684890747];
  net_h1_w[120] = [-1.6388144493103027];
  net_h1_w[121] = [-1.7498348951339722];
  net_h1_w[122] = [-1.8579212427139282];
  net_h1_w[123] = [-1.875227928161621];
  net_h1_w[124] = [-1.855637550354004];
  net_h1_w[125] = [-1.9125289916992188];
  net_h1_w[126] = [-1.7536619901657104];
  net_h1_w[127] = [-1.6205804347991943];
  net_h1_w[128] = [-2.1049671173095703];
  net_h1_w[129] = [-2.1547200679779053];
  net_h1_w[130] = [-2.192438840866089];
  net_h1_w[131] = [-2.183267116546631];
  net_h1_w[132] = [-2.101078987121582];
  net_h1_w[133] = [-2.105682849884033];
  net_h1_w[134] = [-2.0677649974823];
  net_h1_w[135] = [-1.917680263519287];
  net_h1_w[136] = [-2.093623638153076];
  net_h1_w[137] = [-2.176517963409424];
  net_h1_w[138] = [-2.2263829708099365];
  net_h1_w[139] = [-2.306716203689575];
  net_h1_w[140] = [-2.2068188190460205];
  net_h1_w[141] = [-2.255002021789551];
  net_h1_w[142] = [-2.1811752319335938];
  net_h1_w[143] = [-2.1143503189086914];
  net_h1_w[144] = [-2.186570405960083];
  net_h1_w[145] = [-2.31913161277771];
  net_h1_w[146] = [-2.286043167114258];
  net_h1_w[147] = [-2.4018938541412354];
  net_h1_w[148] = [-2.30364990234375];
  net_h1_w[149] = [-2.3687803745269775];
  net_h1_w[150] = [-2.3249611854553223];
  net_h1_w[151] = [-2.3614158630371094];
  net_h1_w[152] = [-2.2220728397369385];
  net_h1_w[153] = [-2.2543036937713623];
  net_h1_w[154] = [-2.3489551544189453];
  net_h1_w[155] = [-2.4088637828826904];
  net_h1_w[156] = [-2.3871493339538574];
  net_h1_w[157] = [-2.3118300437927246];
  net_h1_w[158] = [-2.2610509395599365];
  net_h1_w[159] = [-2.220639228820801];
  net_h1_w[160] = [-2.107604503631592];
  net_h1_w[161] = [-2.253594160079956];
  net_h1_w[162] = [-2.308021068572998];
  net_h1_w[163] = [-2.3381800651550293];
  net_h1_w[164] = [-2.3219165802001953];
  net_h1_w[165] = [-2.240462064743042];
  net_h1_w[166] = [-2.2875425815582275];
  net_h1_w[167] = [-2.1740174293518066];
  net_h1_w[168] = [-2.234400510787964];
  net_h1_w[169] = [-2.2078866958618164];
  net_h1_w[170] = [-2.2248847484588623];
  net_h1_w[171] = [-2.2860159873962402];
  net_h1_w[172] = [-2.3069941997528076];
  net_h1_w[173] = [-2.254612922668457];
  net_h1_w[174] = [-2.2292003631591797];
  net_h1_w[175] = [-2.1840174198150635];
  net_h1_w[176] = [-2.174677610397339];
  net_h1_w[177] = [-2.223292350769043];
  net_h1_w[178] = [-2.260624647140503];
  net_h1_w[179] = [-2.1663029193878174];
  net_h1_w[180] = [-2.1693077087402344];
  net_h1_w[181] = [-2.1595282554626465];
  net_h1_w[182] = [-2.282998561859131];
  net_h1_w[183] = [-2.1656124591827393];
  net_h1_w[184] = [-2.1043860912323];
  net_h1_w[185] = [-2.142504930496216];
  net_h1_w[186] = [-2.1192944049835205];
  net_h1_w[187] = [-2.1012911796569824];
  net_h1_w[188] = [-2.144378662109375];
  net_h1_w[189] = [-2.0496530532836914];
  net_h1_w[190] = [-2.109684944152832];
  net_h1_w[191] = [-2.038750410079956];
  net_h1_w[192] = [-3.507767915725708];
  net_h1_w[193] = [-3.5045571327209473];
  net_h1_w[194] = [-3.5252845287323];
  net_h1_w[195] = [-3.5187299251556396];
  net_h1_w[196] = [-3.446735143661499];
  net_h1_w[197] = [-3.5116846561431885];
  net_h1_w[198] = [-3.4128894805908203];
  net_h1_w[199] = [-3.4954397678375244];
  net_h1_w[200] = [-3.5159459114074707];
  net_h1_w[201] = [-3.5277903079986572];
  net_h1_w[202] = [-3.6006522178649902];
  net_h1_w[203] = [-3.6165099143981934];
  net_h1_w[204] = [-3.5121967792510986];
  net_h1_w[205] = [-3.536262273788452];
  net_h1_w[206] = [-3.438755750656128];
  net_h1_w[207] = [-3.461066961288452];
  net_h1_w[208] = [-3.3861582279205322];
  net_h1_w[209] = [-3.503865957260132];
  net_h1_w[210] = [-3.50408673286438];
  net_h1_w[211] = [-3.462033987045288];
  net_h1_w[212] = [-3.4876596927642822];
  net_h1_w[213] = [-3.546276330947876];
  net_h1_w[214] = [-3.492600679397583];
  net_h1_w[215] = [-3.4281258583068848];
  net_h1_w[216] = [-3.425997734069824];
  net_h1_w[217] = [-3.4213905334472656];
  net_h1_w[218] = [-3.4001405239105225];
  net_h1_w[219] = [-3.433135986328125];
  net_h1_w[220] = [-3.395123243331909];
  net_h1_w[221] = [-3.332719087600708];
  net_h1_w[222] = [-3.352381706237793];
  net_h1_w[223] = [-3.4028475284576416];
  net_h1_w[224] = [-3.338869571685791];
  net_h1_w[225] = [-3.262493133544922];
  net_h1_w[226] = [-3.3257439136505127];
  net_h1_w[227] = [-3.323728322982788];
  net_h1_w[228] = [-3.298102855682373];
  net_h1_w[229] = [-3.2625467777252197];
  net_h1_w[230] = [-3.330021381378174];
  net_h1_w[231] = [-3.241593599319458];
  net_h1_w[232] = [-3.1999588012695312];
  net_h1_w[233] = [-3.236053943634033];
  net_h1_w[234] = [-3.3552632331848145];
  net_h1_w[235] = [-3.313631534576416];
  net_h1_w[236] = [-3.201442241668701];
  net_h1_w[237] = [-3.270404100418091];
  net_h1_w[238] = [-3.2691357135772705];
  net_h1_w[239] = [-3.264723539352417];
  net_h1_w[240] = [-3.2121050357818604];
  net_h1_w[241] = [-3.2298903465270996];
  net_h1_w[242] = [-3.328939437866211];
  net_h1_w[243] = [-3.309375524520874];
  net_h1_w[244] = [-3.268428325653076];
  net_h1_w[245] = [-3.2183470726013184];
  net_h1_w[246] = [-3.306673049926758];
  net_h1_w[247] = [-3.154189348220825];
  net_h1_w[248] = [-3.176744222640991];
  net_h1_w[249] = [-3.2711870670318604];
  net_h1_w[250] = [-3.3034090995788574];
  net_h1_w[251] = [-3.3019232749938965];
  net_h1_w[252] = [-3.2979159355163574];
  net_h1_w[253] = [-3.263540029525757];
  net_h1_w[254] = [-3.2990312576293945];
  net_h1_w[255] = [-3.118999481201172];
  net_h1_w[256] = [-6.423818588256836];
  net_h1_w[257] = [-6.379028797149658];
  net_h1_w[258] = [-6.585123538970947];
  net_h1_w[259] = [-6.500791072845459];
  net_h1_w[260] = [-6.64305305480957];
  net_h1_w[261] = [-6.73147439956665];
  net_h1_w[262] = [-6.59679651260376];
  net_h1_w[263] = [-6.566587448120117];
  net_h1_w[264] = [-6.343222618103027];
  net_h1_w[265] = [-6.345211029052734];
  net_h1_w[266] = [-6.581265926361084];
  net_h1_w[267] = [-6.586674213409424];
  net_h1_w[268] = [-6.597760200500488];
  net_h1_w[269] = [-6.819543838500977];
  net_h1_w[270] = [-6.585444927215576];
  net_h1_w[271] = [-6.862540245056152];
  net_h1_w[272] = [-6.470115661621094];
  net_h1_w[273] = [-6.534970760345459];
  net_h1_w[274] = [-6.50881290435791];
  net_h1_w[275] = [-6.6092352867126465];
  net_h1_w[276] = [-6.649188995361328];
  net_h1_w[277] = [-6.847554683685303];
  net_h1_w[278] = [-6.883147239685059];
  net_h1_w[279] = [-6.827800750732422];
  net_h1_w[280] = [-6.303501129150391];
  net_h1_w[281] = [-6.486164093017578];
  net_h1_w[282] = [-6.524931907653809];
  net_h1_w[283] = [-6.5025715827941895];
  net_h1_w[284] = [-6.565415859222412];
  net_h1_w[285] = [-6.602145671844482];
  net_h1_w[286] = [-6.723227024078369];
  net_h1_w[287] = [-6.675621032714844];
  net_h1_w[288] = [-6.409183502197266];
  net_h1_w[289] = [-6.417226791381836];
  net_h1_w[290] = [-6.450185775756836];
  net_h1_w[291] = [-6.585858345031738];
  net_h1_w[292] = [-6.540083885192871];
  net_h1_w[293] = [-6.558781147003174];
  net_h1_w[294] = [-6.510871887207031];
  net_h1_w[295] = [-6.599306106567383];
  net_h1_w[296] = [-6.392129898071289];
  net_h1_w[297] = [-6.4528985023498535];
  net_h1_w[298] = [-6.467893600463867];
  net_h1_w[299] = [-6.459258079528809];
  net_h1_w[300] = [-6.487576007843018];
  net_h1_w[301] = [-6.498651504516602];
  net_h1_w[302] = [-6.507025241851807];
  net_h1_w[303] = [-6.508814334869385];
  net_h1_w[304] = [-6.412099361419678];
  net_h1_w[305] = [-6.380140781402588];
  net_h1_w[306] = [-6.480682373046875];
  net_h1_w[307] = [-6.512388229370117];
  net_h1_w[308] = [-6.512840747833252];
  net_h1_w[309] = [-6.438221454620361];
  net_h1_w[310] = [-6.380829811096191];
  net_h1_w[311] = [-6.547092437744141];
  net_h1_w[312] = [-6.549712657928467];
  net_h1_w[313] = [-6.403565883636475];
  net_h1_w[314] = [-6.374260425567627];
  net_h1_w[315] = [-6.435818672180176];
  net_h1_w[316] = [-6.41268253326416];
  net_h1_w[317] = [-6.345706939697266];
  net_h1_w[318] = [-6.344326972961426];
  net_h1_w[319] = [-6.353944778442383];
  net_h1_w[320] = [0.6592710018157959];
  net_h1_w[321] = [0.2432619333267212];
  net_h1_w[322] = [0.2579587399959564];
  net_h1_w[323] = [0.14863459765911102];
  net_h1_w[324] = [0.1316385269165039];
  net_h1_w[325] = [-0.044048745185136795];
  net_h1_w[326] = [0.11757677793502808];
  net_h1_w[327] = [0.44001826643943787];
  net_h1_w[328] = [0.028102604672312737];
  net_h1_w[329] = [-0.21209126710891724];
  net_h1_w[330] = [-0.378095418214798];
  net_h1_w[331] = [-0.1411312371492386];
  net_h1_w[332] = [-0.2372686117887497];
  net_h1_w[333] = [-0.29167884588241577];
  net_h1_w[334] = [-0.25130945444107056];
  net_h1_w[335] = [-0.026774806901812553];
  net_h1_w[336] = [0.01790822483599186];
  net_h1_w[337] = [-0.2911807894706726];
  net_h1_w[338] = [-0.2153276652097702];
  net_h1_w[339] = [-0.379050612449646];
  net_h1_w[340] = [-0.22941634058952332];
  net_h1_w[341] = [-0.27832460403442383];
  net_h1_w[342] = [-0.28831660747528076];
  net_h1_w[343] = [0.0019982021767646074];
  net_h1_w[344] = [0.09548737108707428];
  net_h1_w[345] = [-0.15546849370002747];
  net_h1_w[346] = [-0.2126833200454712];
  net_h1_w[347] = [-0.19414456188678741];
  net_h1_w[348] = [-0.26967811584472656];
  net_h1_w[349] = [-0.10620911419391632];
  net_h1_w[350] = [-0.12083195149898529];
  net_h1_w[351] = [0.06946055591106415];
  net_h1_w[352] = [0.07889535278081894];
  net_h1_w[353] = [-0.0281667560338974];
  net_h1_w[354] = [-0.03355240076780319];
  net_h1_w[355] = [-0.161077618598938];
  net_h1_w[356] = [-0.12688958644866943];
  net_h1_w[357] = [-0.08802676945924759];
  net_h1_w[358] = [0.0022900239564478397];
  net_h1_w[359] = [0.15691347420215607];
  net_h1_w[360] = [0.16384272277355194];
  net_h1_w[361] = [0.027782941237092018];
  net_h1_w[362] = [-0.01877226121723652];
  net_h1_w[363] = [0.003445778973400593];
  net_h1_w[364] = [-0.0019669230096042156];
  net_h1_w[365] = [0.0070711891166865826];
  net_h1_w[366] = [0.04279531538486481];
  net_h1_w[367] = [0.14924897253513336];
  net_h1_w[368] = [0.09264019131660461];
  net_h1_w[369] = [0.019745605066418648];
  net_h1_w[370] = [0.020961729809641838];
  net_h1_w[371] = [0.05453607812523842];
  net_h1_w[372] = [0.08048930019140244];
  net_h1_w[373] = [0.07214827835559845];
  net_h1_w[374] = [0.06732004135847092];
  net_h1_w[375] = [0.13033686578273773];
  net_h1_w[376] = [0.14251744747161865];
  net_h1_w[377] = [-0.021522684022784233];
  net_h1_w[378] = [-0.02686622552573681];
  net_h1_w[379] = [0.25540000200271606];
  net_h1_w[380] = [0.19059225916862488];
  net_h1_w[381] = [0.20771999657154083];
  net_h1_w[382] = [0.05096001550555229];
  net_h1_w[383] = [0.08409290015697479];
  net_h1_w[384] = [-0.045418933033943176];
  net_h1_w[385] = [0.012201943434774876];
  net_h1_w[386] = [-0.007231321185827255];
  net_h1_w[387] = [-0.09852194786071777];
  net_h1_w[388] = [-0.029675442725419998];
  net_h1_w[389] = [0.04217267408967018];
  net_h1_w[390] = [0.06500699371099472];
  net_h1_w[391] = [0.04542849212884903];
  net_h1_w[392] = [0.5560250282287598];
  net_h1_w[393] = [0.6128053069114685];
  net_h1_w[394] = [0.5487809181213379];
  net_h1_w[395] = [0.49483001232147217];
  net_h1_w[396] = [0.5910479426383972];
  net_h1_w[397] = [0.6496092081069946];
  net_h1_w[398] = [0.7096633911132812];
  net_h1_w[399] = [0.5551626086235046];
  net_h1_w[400] = [0.5237753987312317];
  net_h1_w[401] = [0.6060073971748352];
  net_h1_w[402] = [0.5532328486442566];
  net_h1_w[403] = [0.5931541919708252];
  net_h1_w[404] = [0.6380779147148132];
  net_h1_w[405] = [0.5541911125183105];
  net_h1_w[406] = [0.6760167479515076];
  net_h1_w[407] = [0.5655213594436646];
  net_h1_w[408] = [0.5462653636932373];
  net_h1_w[409] = [0.6280225515365601];
  net_h1_w[410] = [0.5542736649513245];
  net_h1_w[411] = [0.6379847526550293];
  net_h1_w[412] = [0.6383890509605408];
  net_h1_w[413] = [0.5528241395950317];
  net_h1_w[414] = [0.6294970512390137];
  net_h1_w[415] = [0.5519967079162598];
  net_h1_w[416] = [0.6842982769012451];
  net_h1_w[417] = [0.676329493522644];
  net_h1_w[418] = [0.5948056578636169];
  net_h1_w[419] = [0.6412248015403748];
  net_h1_w[420] = [0.7272374033927917];
  net_h1_w[421] = [0.6997143030166626];
  net_h1_w[422] = [0.7452191114425659];
  net_h1_w[423] = [0.619232177734375];
  net_h1_w[424] = [0.8753008842468262];
  net_h1_w[425] = [0.9728794097900391];
  net_h1_w[426] = [0.9485434889793396];
  net_h1_w[427] = [0.9275881052017212];
  net_h1_w[428] = [0.87978196144104];
  net_h1_w[429] = [0.9500881433486938];
  net_h1_w[430] = [0.9609318375587463];
  net_h1_w[431] = [0.8391247391700745];
  net_h1_w[432] = [1.3001489639282227];
  net_h1_w[433] = [1.3590978384017944];
  net_h1_w[434] = [1.338966965675354];
  net_h1_w[435] = [1.1033904552459717];
  net_h1_w[436] = [1.093098759651184];
  net_h1_w[437] = [1.1704827547073364];
  net_h1_w[438] = [1.0712833404541016];
  net_h1_w[439] = [0.9408649802207947];
  net_h1_w[440] = [0.00968653429299593];
  net_h1_w[441] = [-0.010142861865460873];
  net_h1_w[442] = [0.03850854933261871];
  net_h1_w[443] = [0.05636310204863548];
  net_h1_w[444] = [0.005549602676182985];
  net_h1_w[445] = [0.013628826476633549];
  net_h1_w[446] = [0.0062913354486227036];
  net_h1_w[447] = [-0.020989306271076202];
  net_h1_w[448] = [1.6851979494094849];
  net_h1_w[449] = [1.7681330442428589];
  net_h1_w[450] = [1.84286630153656];
  net_h1_w[451] = [1.8912794589996338];
  net_h1_w[452] = [1.8355460166931152];
  net_h1_w[453] = [1.887790322303772];
  net_h1_w[454] = [1.6983836889266968];
  net_h1_w[455] = [1.6600005626678467];
  net_h1_w[456] = [1.8083487749099731];
  net_h1_w[457] = [1.7639586925506592];
  net_h1_w[458] = [1.908568263053894];
  net_h1_w[459] = [2.0124521255493164];
  net_h1_w[460] = [1.9621111154556274];
  net_h1_w[461] = [1.941513180732727];
  net_h1_w[462] = [1.9687663316726685];
  net_h1_w[463] = [1.9051873683929443];
  net_h1_w[464] = [1.8289622068405151];
  net_h1_w[465] = [1.9313901662826538];
  net_h1_w[466] = [2.033841371536255];
  net_h1_w[467] = [2.0865657329559326];
  net_h1_w[468] = [2.147235631942749];
  net_h1_w[469] = [2.048891067504883];
  net_h1_w[470] = [2.0783472061157227];
  net_h1_w[471] = [1.9037346839904785];
  net_h1_w[472] = [1.9080612659454346];
  net_h1_w[473] = [2.007678985595703];
  net_h1_w[474] = [2.1460328102111816];
  net_h1_w[475] = [2.198471784591675];
  net_h1_w[476] = [2.1732544898986816];
  net_h1_w[477] = [2.1610991954803467];
  net_h1_w[478] = [2.080756187438965];
  net_h1_w[479] = [2.0100672245025635];
  net_h1_w[480] = [1.9312149286270142];
  net_h1_w[481] = [2.085916519165039];
  net_h1_w[482] = [2.195603609085083];
  net_h1_w[483] = [2.299764394760132];
  net_h1_w[484] = [2.2660205364227295];
  net_h1_w[485] = [2.3162333965301514];
  net_h1_w[486] = [2.1506495475769043];
  net_h1_w[487] = [2.108675003051758];
  net_h1_w[488] = [2.0422024726867676];
  net_h1_w[489] = [2.0971920490264893];
  net_h1_w[490] = [2.183194160461426];
  net_h1_w[491] = [2.3121511936187744];
  net_h1_w[492] = [2.242598533630371];
  net_h1_w[493] = [2.2871580123901367];
  net_h1_w[494] = [2.183980703353882];
  net_h1_w[495] = [2.0113401412963867];
  net_h1_w[496] = [1.82027006149292];
  net_h1_w[497] = [1.9493952989578247];
  net_h1_w[498] = [1.9818006753921509];
  net_h1_w[499] = [2.128385305404663];
  net_h1_w[500] = [1.9947806596755981];
  net_h1_w[501] = [2.254537343978882];
  net_h1_w[502] = [1.9987543821334839];
  net_h1_w[503] = [1.7992703914642334];
  net_h1_w[504] = [1.1669341325759888];
  net_h1_w[505] = [1.8201897144317627];
  net_h1_w[506] = [1.8611613512039185];
  net_h1_w[507] = [1.850284457206726];
  net_h1_w[508] = [1.8246644735336304];
  net_h1_w[509] = [1.6326775550842285];
  net_h1_w[510] = [1.6159727573394775];
  net_h1_w[511] = [1.2440834045410156];
  net_h1_w[512] = [2.0646309852600098];
  net_h1_w[513] = [2.1354246139526367];
  net_h1_w[514] = [2.0350992679595947];
  net_h1_w[515] = [2.0992844104766846];
  net_h1_w[516] = [2.0521106719970703];
  net_h1_w[517] = [2.0374596118927];
  net_h1_w[518] = [2.081597089767456];
  net_h1_w[519] = [2.064215660095215];
  net_h1_w[520] = [2.2163474559783936];
  net_h1_w[521] = [2.1928632259368896];
  net_h1_w[522] = [2.215880870819092];
  net_h1_w[523] = [2.14782977104187];
  net_h1_w[524] = [2.205021858215332];
  net_h1_w[525] = [2.277729034423828];
  net_h1_w[526] = [2.280149221420288];
  net_h1_w[527] = [2.2361674308776855];
  net_h1_w[528] = [2.1426477432250977];
  net_h1_w[529] = [2.236039161682129];
  net_h1_w[530] = [2.261993408203125];
  net_h1_w[531] = [2.288494825363159];
  net_h1_w[532] = [2.262226104736328];
  net_h1_w[533] = [2.257457971572876];
  net_h1_w[534] = [2.256678819656372];
  net_h1_w[535] = [2.150268077850342];
  net_h1_w[536] = [2.1269257068634033];
  net_h1_w[537] = [2.1533544063568115];
  net_h1_w[538] = [2.292567253112793];
  net_h1_w[539] = [2.350855827331543];
  net_h1_w[540] = [2.352971315383911];
  net_h1_w[541] = [2.2592220306396484];
  net_h1_w[542] = [2.219182252883911];
  net_h1_w[543] = [2.1370608806610107];
  net_h1_w[544] = [2.161327600479126];
  net_h1_w[545] = [2.276171922683716];
  net_h1_w[546] = [2.3091700077056885];
  net_h1_w[547] = [2.403674840927124];
  net_h1_w[548] = [2.3336169719696045];
  net_h1_w[549] = [2.3450136184692383];
  net_h1_w[550] = [2.266543388366699];
  net_h1_w[551] = [2.1827614307403564];
  net_h1_w[552] = [2.158841371536255];
  net_h1_w[553] = [2.194680690765381];
  net_h1_w[554] = [2.2807328701019287];
  net_h1_w[555] = [2.344813823699951];
  net_h1_w[556] = [2.3334381580352783];
  net_h1_w[557] = [2.310633659362793];
  net_h1_w[558] = [2.3358781337738037];
  net_h1_w[559] = [2.333235025405884];
  net_h1_w[560] = [2.0411884784698486];
  net_h1_w[561] = [2.1616928577423096];
  net_h1_w[562] = [2.146591901779175];
  net_h1_w[563] = [2.1918885707855225];
  net_h1_w[564] = [2.131901979446411];
  net_h1_w[565] = [2.2568514347076416];
  net_h1_w[566] = [2.1111834049224854];
  net_h1_w[567] = [2.1385996341705322];
  net_h1_w[568] = [1.9095714092254639];
  net_h1_w[569] = [2.1461806297302246];
  net_h1_w[570] = [2.2270216941833496];
  net_h1_w[571] = [1.9877443313598633];
  net_h1_w[572] = [2.131582498550415];
  net_h1_w[573] = [2.07814621925354];
  net_h1_w[574] = [2.069220542907715];
  net_h1_w[575] = [1.9761730432510376];
  net_h1_w[576] = [3.208706855773926];
  net_h1_w[577] = [3.253652334213257];
  net_h1_w[578] = [3.290210008621216];
  net_h1_w[579] = [3.3176894187927246];
  net_h1_w[580] = [3.3242485523223877];
  net_h1_w[581] = [3.252929449081421];
  net_h1_w[582] = [3.3011348247528076];
  net_h1_w[583] = [3.1066203117370605];
  net_h1_w[584] = [3.164224624633789];
  net_h1_w[585] = [3.2375433444976807];
  net_h1_w[586] = [3.2586779594421387];
  net_h1_w[587] = [3.2772812843322754];
  net_h1_w[588] = [3.2749204635620117];
  net_h1_w[589] = [3.26279616355896];
  net_h1_w[590] = [3.335050344467163];
  net_h1_w[591] = [3.172921657562256];
  net_h1_w[592] = [3.23767352104187];
  net_h1_w[593] = [3.237182855606079];
  net_h1_w[594] = [3.2427918910980225];
  net_h1_w[595] = [3.2718188762664795];
  net_h1_w[596] = [3.259213447570801];
  net_h1_w[597] = [3.246983051300049];
  net_h1_w[598] = [3.2637836933135986];
  net_h1_w[599] = [3.2172493934631348];
  net_h1_w[600] = [3.2979543209075928];
  net_h1_w[601] = [3.278759479522705];
  net_h1_w[602] = [3.3260319232940674];
  net_h1_w[603] = [3.3198082447052];
  net_h1_w[604] = [3.3450937271118164];
  net_h1_w[605] = [3.258411407470703];
  net_h1_w[606] = [3.2823827266693115];
  net_h1_w[607] = [3.2528507709503174];
  net_h1_w[608] = [3.3823323249816895];
  net_h1_w[609] = [3.454725980758667];
  net_h1_w[610] = [3.4179608821868896];
  net_h1_w[611] = [3.401796579360962];
  net_h1_w[612] = [3.4016950130462646];
  net_h1_w[613] = [3.38026762008667];
  net_h1_w[614] = [3.401743173599243];
  net_h1_w[615] = [3.365623712539673];
  net_h1_w[616] = [3.40150785446167];
  net_h1_w[617] = [3.395704746246338];
  net_h1_w[618] = [3.394625663757324];
  net_h1_w[619] = [3.443002700805664];
  net_h1_w[620] = [3.460913896560669];
  net_h1_w[621] = [3.4676337242126465];
  net_h1_w[622] = [3.4771056175231934];
  net_h1_w[623] = [3.4366798400878906];
  net_h1_w[624] = [3.4900214672088623];
  net_h1_w[625] = [3.409536600112915];
  net_h1_w[626] = [3.5227723121643066];
  net_h1_w[627] = [3.5202536582946777];
  net_h1_w[628] = [3.550872564315796];
  net_h1_w[629] = [3.519832134246826];
  net_h1_w[630] = [3.433462381362915];
  net_h1_w[631] = [3.4714953899383545];
  net_h1_w[632] = [3.4541118144989014];
  net_h1_w[633] = [3.491938591003418];
  net_h1_w[634] = [3.4240033626556396];
  net_h1_w[635] = [3.496246099472046];
  net_h1_w[636] = [3.4637434482574463];
  net_h1_w[637] = [3.502412796020508];
  net_h1_w[638] = [3.4639902114868164];
  net_h1_w[639] = [3.4768338203430176];
  net_h1_w[640] = [6.434508800506592];
  net_h1_w[641] = [6.298268795013428];
  net_h1_w[642] = [6.311035633087158];
  net_h1_w[643] = [6.386029243469238];
  net_h1_w[644] = [6.359891414642334];
  net_h1_w[645] = [6.303844928741455];
  net_h1_w[646] = [6.2898945808410645];
  net_h1_w[647] = [6.290217876434326];
  net_h1_w[648] = [6.340523719787598];
  net_h1_w[649] = [6.4050612449646];
  net_h1_w[650] = [6.467435359954834];
  net_h1_w[651] = [6.396462917327881];
  net_h1_w[652] = [6.434520721435547];
  net_h1_w[653] = [6.428618907928467];
  net_h1_w[654] = [6.411357402801514];
  net_h1_w[655] = [6.49290657043457];
  net_h1_w[656] = [6.35830545425415];
  net_h1_w[657] = [6.4074506759643555];
  net_h1_w[658] = [6.435279846191406];
  net_h1_w[659] = [6.429571151733398];
  net_h1_w[660] = [6.39213752746582];
  net_h1_w[661] = [6.504392147064209];
  net_h1_w[662] = [6.504828453063965];
  net_h1_w[663] = [6.439290523529053];
  net_h1_w[664] = [6.405465602874756];
  net_h1_w[665] = [6.4221367835998535];
  net_h1_w[666] = [6.451169490814209];
  net_h1_w[667] = [6.472577095031738];
  net_h1_w[668] = [6.505173683166504];
  net_h1_w[669] = [6.472342014312744];
  net_h1_w[670] = [6.5189595222473145];
  net_h1_w[671] = [6.445932388305664];
  net_h1_w[672] = [6.3378424644470215];
  net_h1_w[673] = [6.473197937011719];
  net_h1_w[674] = [6.47347354888916];
  net_h1_w[675] = [6.478225231170654];
  net_h1_w[676] = [6.5713210105896];
  net_h1_w[677] = [6.575078964233398];
  net_h1_w[678] = [6.557009696960449];
  net_h1_w[679] = [6.554388999938965];
  net_h1_w[680] = [6.354911804199219];
  net_h1_w[681] = [6.408046245574951];
  net_h1_w[682] = [6.506468296051025];
  net_h1_w[683] = [6.597624778747559];
  net_h1_w[684] = [6.627814769744873];
  net_h1_w[685] = [6.799415588378906];
  net_h1_w[686] = [6.773260593414307];
  net_h1_w[687] = [6.759729862213135];
  net_h1_w[688] = [6.282418251037598];
  net_h1_w[689] = [6.3103203773498535];
  net_h1_w[690] = [6.433115482330322];
  net_h1_w[691] = [6.509642124176025];
  net_h1_w[692] = [6.569614887237549];
  net_h1_w[693] = [6.627610683441162];
  net_h1_w[694] = [6.597115516662598];
  net_h1_w[695] = [6.705129623413086];
  net_h1_w[696] = [6.310486316680908];
  net_h1_w[697] = [6.327860355377197];
  net_h1_w[698] = [6.587011814117432];
  net_h1_w[699] = [6.564175605773926];
  net_h1_w[700] = [6.690680980682373];
  net_h1_w[701] = [6.663144588470459];
  net_h1_w[702] = [6.698614597320557];
  net_h1_w[703] = [6.444498062133789];
  net_h1_w[704] = [-0.07549528777599335];
  net_h1_w[705] = [0.09691761434078217];
  net_h1_w[706] = [0.08749182522296906];
  net_h1_w[707] = [-0.17258630692958832];
  net_h1_w[708] = [-0.07020562142133713];
  net_h1_w[709] = [-0.19062085449695587];
  net_h1_w[710] = [0.011208959855139256];
  net_h1_w[711] = [-0.01031170692294836];
  net_h1_w[712] = [0.033442530781030655];
  net_h1_w[713] = [0.07531964033842087];
  net_h1_w[714] = [0.0466034933924675];
  net_h1_w[715] = [0.005874585825949907];
  net_h1_w[716] = [0.0039657168090343475];
  net_h1_w[717] = [-0.03420047461986542];
  net_h1_w[718] = [-0.020158767700195312];
  net_h1_w[719] = [-0.04083406552672386];
  net_h1_w[720] = [-0.13433997333049774];
  net_h1_w[721] = [0.007457406725734472];
  net_h1_w[722] = [0.036854278296232224];
  net_h1_w[723] = [0.05407131835818291];
  net_h1_w[724] = [0.04974105954170227];
  net_h1_w[725] = [0.03876015543937683];
  net_h1_w[726] = [0.04302708059549332];
  net_h1_w[727] = [-0.07225820422172546];
  net_h1_w[728] = [-0.11191260069608688];
  net_h1_w[729] = [0.05215448886156082];
  net_h1_w[730] = [0.10808806866407394];
  net_h1_w[731] = [0.2254168689250946];
  net_h1_w[732] = [0.13329477608203888];
  net_h1_w[733] = [0.10997103899717331];
  net_h1_w[734] = [0.010102340951561928];
  net_h1_w[735] = [-0.16657239198684692];
  net_h1_w[736] = [-0.056378159672021866];
  net_h1_w[737] = [0.19972433149814606];
  net_h1_w[738] = [0.24313265085220337];
  net_h1_w[739] = [0.24644599854946136];
  net_h1_w[740] = [0.2890598773956299];
  net_h1_w[741] = [0.2552069425582886];
  net_h1_w[742] = [0.25944751501083374];
  net_h1_w[743] = [-0.05814092978835106];
  net_h1_w[744] = [0.016071867197752];
  net_h1_w[745] = [0.2658648192882538];
  net_h1_w[746] = [0.2932225465774536];
  net_h1_w[747] = [0.2938240170478821];
  net_h1_w[748] = [0.34313198924064636];
  net_h1_w[749] = [0.2781235873699188];
  net_h1_w[750] = [0.296953409910202];
  net_h1_w[751] = [-0.0038995924405753613];
  net_h1_w[752] = [0.05561336502432823];
  net_h1_w[753] = [0.2944950759410858];
  net_h1_w[754] = [0.435416579246521];
  net_h1_w[755] = [0.12590447068214417];
  net_h1_w[756] = [0.2582571804523468];
  net_h1_w[757] = [0.46037882566452026];
  net_h1_w[758] = [0.24386078119277954];
  net_h1_w[759] = [-0.005535579752177];
  net_h1_w[760] = [-0.4849906861782074];
  net_h1_w[761] = [-0.2033458948135376];
  net_h1_w[762] = [-0.028505928814411163];
  net_h1_w[763] = [0.06685252487659454];
  net_h1_w[764] = [0.1930648535490036];
  net_h1_w[765] = [-0.026751244440674782];
  net_h1_w[766] = [-0.023996232077479362];
  net_h1_w[767] = [-0.38258740305900574];
  const net_h1_b = [2.6802971363067627];
  const net_o_w = [-1.5874717235565186];
  const net_o_b = 4.3189191818237305;
  
  //}}}

  const cwtch = new(cwtchStruct);

  cwtch.initOnce();
  cwtch.uciArgv();

  //{{{  connect to stdio
  
  process.stdin.setEncoding('utf8');
  
  process.stdin.on('readable', function() {
    let chunk = process.stdin.read();
    process.stdin.resume();
    if (chunk !== null) {
      cwtch.uciExec(chunk);
    }
  });
  
  process.stdin.on('end', function() {
    process.exit();
  });
  
  //}}}

})();

