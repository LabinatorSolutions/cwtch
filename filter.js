//{{{  

  var randomMoveOrdering = 0;

  //{{{  constants
  
  const IMAP = Array(16);
  
  const MAX_PLY = 128;
  const MATE    = 30000;
  
  const WHITE = 0x0;
  const BLACK = 0x8;
  
  const PIECE_MASK  = 0x7;
  const COLOUR_MASK = 0x8;
  
  const PAWN   = 1;
  const KNIGHT = 2;
  const BISHOP = 3;
  const ROOK   = 4;
  const QUEEN  = 5;
  const KING   = 6;
  const EDGE   = 7;
  
  const W_PAWN   = PAWN;
  const W_KNIGHT = KNIGHT;
  const W_BISHOP = BISHOP;
  const W_ROOK   = ROOK;
  const W_QUEEN  = QUEEN;
  const W_KING   = KING;
  
  const B_PAWN   = PAWN   | BLACK;
  const B_KNIGHT = KNIGHT | BLACK;
  const B_BISHOP = BISHOP | BLACK;
  const B_ROOK   = ROOK   | BLACK;
  const B_QUEEN  = QUEEN  | BLACK;
  const B_KING   = KING   | BLACK;
  
  const LCOUNT = 0;
  const LKING  = 1;
  
  const PPHASE = 0;
  const NPHASE = 1;
  const BPHASE = 1;
  const RPHASE = 2;
  const QPHASE = 4;
  const KPHASE = 0;
  const TPHASE = PPHASE*16 + NPHASE*4 + BPHASE*4 + RPHASE*4 + QPHASE*2 + KPHASE*2;
  const VPHASE = [PPHASE,NPHASE,BPHASE,RPHASE,QPHASE,KPHASE];
  
  const TT_SIZE  = 1 << 20;
  const TT_MASK  = TT_SIZE - 1;
  const TT_EXACT = 0x01;
  const TT_ALPHA = 0x02;
  const TT_BETA  = 0x04;
  
  const ADJACENT = [1,1,0,0,0,0,0,0,0,0,0,1,1,1];
  
  //
  // E == EMPTY, X = OFF BOARD, - == CANNOT HAPPEN
  //
  //                  0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15
  //                  E  W  W  W  W  W  W  X  -  B  B  B  B  B  B  -
  //                  E  P  N  B  R  Q  K  X  -  P  N  B  R  Q  K  -
  //
  const IS_O       = [0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0];
  const IS_E       = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  const IS_OE      = [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0];
  
  const IS_P       = [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0];
  const IS_N       = [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0];
  const IS_NBRQ    = [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0];
  const IS_NBRQKE  = [1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0];
  const IS_RQKE    = [1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0];
  const IS_Q       = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0];
  const IS_QKE     = [1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0];
  const IS_K       = [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0];
  const IS_KN      = [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0];
  const IS_SLIDER  = [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0];
  
  const IS_W       = [0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  const IS_WE      = [1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  const IS_WP      = [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  const IS_WN      = [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  const IS_WNBRQ   = [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  const IS_WPNBRQ  = [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  const IS_WPNBRQE = [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  const IS_WB      = [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  const IS_WR      = [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  const IS_WBQ     = [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  const IS_WRQ     = [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  const IS_WQ      = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  const IS_WK      = [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  
  const IS_B       = [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0];
  const IS_BE      = [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0];
  const IS_BP      = [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0];
  const IS_BN      = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0];
  const IS_BNBRQ   = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0];
  const IS_BPNBRQ  = [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0];
  const IS_BPNBRQE = [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0];
  const IS_BB      = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0];
  const IS_BR      = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0];
  const IS_BBQ     = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0];
  const IS_BRQ     = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0];
  const IS_BQ      = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0];
  const IS_BK      = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0];
  
  const OBJ_CHAR = ['.','P','N','B','R','Q','K','x','y','p','n','b','r','q','k','z'];
  
  const A1 = 110;
  const B1 = 111;
  const C1 = 112;
  const D1 = 113;
  const E1 = 114;
  const F1 = 115;
  const G1 = 116;
  const H1 = 117;
  const B2 = 99;
  const C2 = 100;
  const G2 = 104;
  const H2 = 105;
  const B7 = 39;
  const C7 = 40;
  const G7 = 44;
  const H7 = 45;
  const A8 = 26;
  const B8 = 27;
  const C8 = 28;
  const D8 = 29;
  const E8 = 30;
  const F8 = 31;
  const G8 = 32;
  const H8 = 33;
  
  const B88 = [26, 27, 28, 29, 30, 31, 32, 33,
               38, 39, 40, 41, 42, 43, 44, 45,
               50, 51, 52, 53, 54, 55, 56, 57,
               62, 63, 64, 65, 66, 67, 68, 69,
               74, 75, 76, 77, 78, 79, 80, 81,
               86, 87, 88, 89, 90, 91, 92, 93,
               98, 99, 100,101,102,103,104,105,
               110,111,112,113,114,115,116,117];
  
  const B144 = [0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0, 0,
                0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0, 0,
                0, 0, 0,  1,  2,  3,  4,  5,  6,  7,  0, 0,
                0, 0, 8,  9,  10, 11, 12, 13, 14, 15, 0, 0,
                0, 0, 16, 17, 18, 19, 20, 21, 22, 23, 0, 0,
                0, 0, 24, 25, 26, 27, 28, 29, 30, 31, 0, 0,
                0, 0, 32, 33, 34, 35, 36, 37, 38, 39, 0, 0,
                0, 0, 40, 41, 42, 43, 44, 45, 46, 47, 0, 0,
                0, 0, 48, 49, 50, 51, 52, 53, 54, 55, 0, 0,
                0, 0, 56, 57, 58, 59, 60, 61, 62, 63, 0, 0,
                0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0, 0,
                0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0, 0];
  
  
  const COORDS = ['??', '??', '??', '??', '??', '??', '??', '??', '??', '??', '??', '??',
                  '??', '??', '??', '??', '??', '??', '??', '??', '??', '??', '??', '??',
                  '??', '??', 'a8', 'b8', 'c8', 'd8', 'e8', 'f8', 'g8', 'h8', '??', '??',
                  '??', '??', 'a7', 'b7', 'c7', 'd7', 'e7', 'f7', 'g7', 'h7', '??', '??',
                  '??', '??', 'a6', 'b6', 'c6', 'd6', 'e6', 'f6', 'g6', 'h6', '??', '??',
                  '??', '??', 'a5', 'b5', 'c5', 'd5', 'e5', 'f5', 'g5', 'h5', '??', '??',
                  '??', '??', 'a4', 'b4', 'c4', 'd4', 'e4', 'f4', 'g4', 'h4', '??', '??',
                  '??', '??', 'a3', 'b3', 'c3', 'd3', 'e3', 'f3', 'g3', 'h3', '??', '??',
                  '??', '??', 'a2', 'b2', 'c2', 'd2', 'e2', 'f2', 'g2', 'h2', '??', '??',
                  '??', '??', 'a1', 'b1', 'c1', 'd1', 'e1', 'f1', 'g1', 'h1', '??', '??',
                  '??', '??', '??', '??', '??', '??', '??', '??', '??', '??', '??', '??',
                  '??', '??', '??', '??', '??', '??', '??', '??', '??', '??', '??', '??'];
  
  const CENTRE = [0, 0, 0, 0,  0,  0,  0,  0,  0,  0, 0, 0,
                  0, 0, 0, 0,  0,  0,  0,  0,  0,  0, 0, 0,
                  0, 0, 1, 2,  3,  4,  4,  3,  2,  1, 0, 0,
                  0, 0, 2, 6,  8,  10, 10, 8,  6,  2, 0, 0,
                  0, 0, 3, 8,  15, 18, 18, 15, 8,  3, 0, 0,
                  0, 0, 4, 10, 18, 28, 28, 18, 10, 4, 0, 0,
                  0, 0, 4, 10, 18, 28, 28, 19, 10, 4, 0, 0,
                  0, 0, 3, 8,  15, 18, 18, 15, 8,  3, 0, 0,
                  0, 0, 2, 6,  8,  10, 10, 8,  6,  2, 0, 0,
                  0, 0, 1, 2,  3,  4,  4,  3,  2,  1, 0, 0,
                  0, 0, 0, 0,  0,  0,  0,  0,  0,  0, 0, 0,
                  0, 0, 0, 0,  0,  0,  0,  0,  0,  0, 0, 0];
  
  const RANK = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0,
                0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0,
                0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0,
                0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0,
                0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0,
                0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0,
                0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0,
                0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  
  const PMOVE_W = [0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0, 0,
                   0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0, 0,
                   0, 0, 29, 29, 29, 29, 29, 29, 29, 29, 0, 0,
                   0, 0, 22, 22, 22, 22, 22, 22, 22, 22, 0, 0,
                   0, 0, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0,
                   0, 0, 11, 11, 11, 11, 11, 11, 11, 11, 0, 0,
                   0, 0, 7,  7,  7,  7,  7,  7,  7,  7,  0, 0,
                   0, 0, 4,  4,  4,  4,  4,  4,  4,  4,  0, 0,
                   0, 0, 2,  2,  2,  2,  2,  2,  2,  2,  0, 0,
                   0, 0, 1,  1,  1,  1,  1,  1,  1,  1,  0, 0,
                   0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0, 0,
                   0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0, 0];
  
  const PMOVE_B = [0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0, 0,
                   0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0, 0,
                   0, 0, 1,  1,  1,  1,  1,  1,  1,  1,  0, 0,
                   0, 0, 2,  2,  2,  2,  2,  2,  2,  2,  0, 0,
                   0, 0, 4,  4,  4,  4,  4,  4,  4,  4,  0, 0,
                   0, 0, 7,  7,  7,  7,  7,  7,  7,  7,  0, 0,
                   0, 0, 11, 11, 11, 11, 11, 11, 11, 11, 0, 0,
                   0, 0, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0,
                   0, 0, 22, 22, 22, 22, 22, 22, 22, 22, 0, 0,
                   0, 0, 29, 29, 29, 29, 29, 29, 29, 29, 0, 0,
                   0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0, 0,
                   0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0, 0];
  
  const OBJMOVE = [null, PMOVE_W, CENTRE, CENTRE, CENTRE, CENTRE, CENTRE, null, null,
                         PMOVE_B, CENTRE, CENTRE, CENTRE, CENTRE, CENTRE];
  
  const FILE = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0,
                0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0,
                0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0,
                0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0,
                0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0,
                0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0,
                0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0,
                0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  
  const MAX_MOVES = 256;
  
  const ALL_MOVES        = 0;
  const NOISY_MOVES_ONLY = 1;
  
  const MOVE_TO_BITS     = 0;
  const MOVE_FR_BITS     = 8;
  const MOVE_TOOBJ_BITS  = 16;
  const MOVE_FROBJ_BITS  = 20;
  const MOVE_PROMAS_BITS = 29;
  
  const MOVE_TO_MASK       = 0x000000FF;
  const MOVE_FR_MASK       = 0x0000FF00;
  const MOVE_TOOBJ_MASK    = 0x000F0000;
  const MOVE_FROBJ_MASK    = 0x00F00000;
  const MOVE_SPARE_MASK    = 0x01000000;
  const MOVE_EPTAKE_MASK   = 0x02000000;
  const MOVE_EPMAKE_MASK   = 0x04000000;
  const MOVE_CASTLE_MASK   = 0x08000000;
  const MOVE_PROMOTE_MASK  = 0x10000000;
  const MOVE_PROMAS_MASK   = 0x60000000;  // NBRQ.
  const MOVE_LEGAL_MASK    = 0x80000000;
  
  const MOVE_CLEAN_MASK    = ~MOVE_LEGAL_MASK & 0xFFFFFFFF;
  const MOVE_NOISY_MASK    = MOVE_TOOBJ_MASK | MOVE_EPTAKE_MASK;
  const MOVE_IKKY_MASK     = MOVE_CASTLE_MASK | MOVE_PROMOTE_MASK | MOVE_EPTAKE_MASK | MOVE_EPMAKE_MASK;
  const MOVE_REPRESET_MASK = MOVE_TOOBJ_MASK | MOVE_CASTLE_MASK | MOVE_PROMOTE_MASK | MOVE_EPTAKE_MASK;
  
  const MOVE_E1G1 = MOVE_CASTLE_MASK | (W_KING << MOVE_FROBJ_BITS) | (E1 << MOVE_FR_BITS) | G1;
  const MOVE_E1C1 = MOVE_CASTLE_MASK | (W_KING << MOVE_FROBJ_BITS) | (E1 << MOVE_FR_BITS) | C1;
  const MOVE_E8G8 = MOVE_CASTLE_MASK | (B_KING << MOVE_FROBJ_BITS) | (E8 << MOVE_FR_BITS) | G8;
  const MOVE_E8C8 = MOVE_CASTLE_MASK | (B_KING << MOVE_FROBJ_BITS) | (E8 << MOVE_FR_BITS) | C8;
  
  const QPRO = (QUEEN-2)  << MOVE_PROMAS_BITS | MOVE_PROMOTE_MASK;
  const RPRO = (ROOK-2)   << MOVE_PROMAS_BITS | MOVE_PROMOTE_MASK;
  const BPRO = (BISHOP-2) << MOVE_PROMAS_BITS | MOVE_PROMOTE_MASK;
  const NPRO = (KNIGHT-2) << MOVE_PROMAS_BITS | MOVE_PROMOTE_MASK;
  
  const WHITE_RIGHTS_KING  = 0x00000001;
  const WHITE_RIGHTS_QUEEN = 0x00000002;
  const BLACK_RIGHTS_KING  = 0x00000004;
  const BLACK_RIGHTS_QUEEN = 0x00000008;
  const WHITE_RIGHTS       = WHITE_RIGHTS_QUEEN | WHITE_RIGHTS_KING;
  const BLACK_RIGHTS       = BLACK_RIGHTS_QUEEN | BLACK_RIGHTS_KING;
  
  const MASK_RIGHTS = [15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
                       15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
                       15, 15, ~8, 15, 15, 15, ~12,15, 15, ~4, 15, 15,
                       15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
                       15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
                       15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
                       15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
                       15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
                       15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
                       15, 15, ~2, 15, 15, 15, ~3, 15, 15, ~1, 15, 15,
                       15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
                       15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15];
  
  const W_OFFSET_ORTH  = -12;
  const W_OFFSET_DIAG1 = -13;
  const W_OFFSET_DIAG2 = -11;
  
  const B_OFFSET_ORTH  = 12;
  const B_OFFSET_DIAG1 = 13;
  const B_OFFSET_DIAG2 = 11;
  
  const KNIGHT_OFFSETS  = [25,-25,23,-23,14,-14,10,-10];
  const BISHOP_OFFSETS  = [11,-11,13,-13];
  const ROOK_OFFSETS    = [1,-1,12,-12];
  const QUEEN_OFFSETS   = [11,-11,13,-13,1,-1,12,-12];
  const KING_OFFSETS    = [11,-11,13,-13,1,-1,12,-12];
  
  const SLIDER_OFFSETS = [0, 0, 0, BISHOP_OFFSETS, ROOK_OFFSETS, QUEEN_OFFSETS];
  
  const WB_CAN_CAPTURE  = [IS_BPNBRQ,      IS_WPNBRQ];
  const WB_OUR_PIECE    = [IS_W,           IS_B];
  const WB_OFFSET_ORTH  = [W_OFFSET_ORTH,  B_OFFSET_ORTH];
  const WB_OFFSET_DIAG1 = [W_OFFSET_DIAG1, B_OFFSET_DIAG1];
  const WB_OFFSET_DIAG2 = [W_OFFSET_DIAG2, B_OFFSET_DIAG2];
  const WB_HOME_RANK    = [2,              7];
  const WB_PROMOTE_RANK = [7,              2];
  const WB_EP_RANK      = [5,              4];
  const WB_RQ           = [IS_WRQ,         IS_BRQ];
  const WB_BQ           = [IS_WBQ,         IS_BBQ];
  const WB_PAWN         = [W_PAWN,         B_PAWN];
  
  //{{{  ALIGNED
  
  const ALIGNED = [
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,1,1,1,1,1,1,1,7,7,7,7,12,13,0,0,0,0,0,0,7,7,7,7,12,0,13,0,0,0,0,0,7,7,7,7,12,0,0,13,0,0,0,0,7,7,7,7,12,0,0,0,13,0,0,0,7,7,7,7,12,0,0,0,0,13,0,0,7,7,7,7,12,0,0,0,0,0,13,0,7,7,7,7,12,0,0,0,0,0,0,13,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-1,0,1,1,1,1,1,1,7,7,7,7,11,12,13,0,0,0,0,0,7,7,7,7,0,12,0,13,0,0,0,0,7,7,7,7,0,12,0,0,13,0,0,0,7,7,7,7,0,12,0,0,0,13,0,0,7,7,7,7,0,12,0,0,0,0,13,0,7,7,7,7,0,12,0,0,0,0,0,13,7,7,7,7,0,12,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-1,-1,0,1,1,1,1,1,7,7,7,7,0,11,12,13,0,0,0,0,7,7,7,7,11,0,12,0,13,0,0,0,7,7,7,7,0,0,12,0,0,13,0,0,7,7,7,7,0,0,12,0,0,0,13,0,7,7,7,7,0,0,12,0,0,0,0,13,7,7,7,7,0,0,12,0,0,0,0,0,7,7,7,7,0,0,12,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-1,-1,-1,0,1,1,1,1,7,7,7,7,0,0,11,12,13,0,0,0,7,7,7,7,0,11,0,12,0,13,0,0,7,7,7,7,11,0,0,12,0,0,13,0,7,7,7,7,0,0,0,12,0,0,0,13,7,7,7,7,0,0,0,12,0,0,0,0,7,7,7,7,0,0,0,12,0,0,0,0,7,7,7,7,0,0,0,12,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-1,-1,-1,-1,0,1,1,1,7,7,7,7,0,0,0,11,12,13,0,0,7,7,7,7,0,0,11,0,12,0,13,0,7,7,7,7,0,11,0,0,12,0,0,13,7,7,7,7,11,0,0,0,12,0,0,0,7,7,7,7,0,0,0,0,12,0,0,0,7,7,7,7,0,0,0,0,12,0,0,0,7,7,7,7,0,0,0,0,12,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-1,-1,-1,-1,-1,0,1,1,7,7,7,7,0,0,0,0,11,12,13,0,7,7,7,7,0,0,0,11,0,12,0,13,7,7,7,7,0,0,11,0,0,12,0,0,7,7,7,7,0,11,0,0,0,12,0,0,7,7,7,7,11,0,0,0,0,12,0,0,7,7,7,7,0,0,0,0,0,12,0,0,7,7,7,7,0,0,0,0,0,12,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-1,-1,-1,-1,-1,-1,0,1,7,7,7,7,0,0,0,0,0,11,12,13,7,7,7,7,0,0,0,0,11,0,12,0,7,7,7,7,0,0,0,11,0,0,12,0,7,7,7,7,0,0,11,0,0,0,12,0,7,7,7,7,0,11,0,0,0,0,12,0,7,7,7,7,11,0,0,0,0,0,12,0,7,7,7,7,0,0,0,0,0,0,12,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-1,-1,-1,-1,-1,-1,-1,0,7,7,7,7,0,0,0,0,0,0,11,12,7,7,7,7,0,0,0,0,0,11,0,12,7,7,7,7,0,0,0,0,11,0,0,12,7,7,7,7,0,0,0,11,0,0,0,12,7,7,7,7,0,0,11,0,0,0,0,12,7,7,7,7,0,11,0,0,0,0,0,12,7,7,7,7,11,0,0,0,0,0,0,12,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-12,-11,0,0,0,0,0,0,7,7,7,7,0,1,1,1,1,1,1,1,7,7,7,7,12,13,0,0,0,0,0,0,7,7,7,7,12,0,13,0,0,0,0,0,7,7,7,7,12,0,0,13,0,0,0,0,7,7,7,7,12,0,0,0,13,0,0,0,7,7,7,7,12,0,0,0,0,13,0,0,7,7,7,7,12,0,0,0,0,0,13,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-13,-12,-11,0,0,0,0,0,7,7,7,7,-1,0,1,1,1,1,1,1,7,7,7,7,11,12,13,0,0,0,0,0,7,7,7,7,0,12,0,13,0,0,0,0,7,7,7,7,0,12,0,0,13,0,0,0,7,7,7,7,0,12,0,0,0,13,0,0,7,7,7,7,0,12,0,0,0,0,13,0,7,7,7,7,0,12,0,0,0,0,0,13,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,-13,-12,-11,0,0,0,0,7,7,7,7,-1,-1,0,1,1,1,1,1,7,7,7,7,0,11,12,13,0,0,0,0,7,7,7,7,11,0,12,0,13,0,0,0,7,7,7,7,0,0,12,0,0,13,0,0,7,7,7,7,0,0,12,0,0,0,13,0,7,7,7,7,0,0,12,0,0,0,0,13,7,7,7,7,0,0,12,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,-13,-12,-11,0,0,0,7,7,7,7,-1,-1,-1,0,1,1,1,1,7,7,7,7,0,0,11,12,13,0,0,0,7,7,7,7,0,11,0,12,0,13,0,0,7,7,7,7,11,0,0,12,0,0,13,0,7,7,7,7,0,0,0,12,0,0,0,13,7,7,7,7,0,0,0,12,0,0,0,0,7,7,7,7,0,0,0,12,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,-13,-12,-11,0,0,7,7,7,7,-1,-1,-1,-1,0,1,1,1,7,7,7,7,0,0,0,11,12,13,0,0,7,7,7,7,0,0,11,0,12,0,13,0,7,7,7,7,0,11,0,0,12,0,0,13,7,7,7,7,11,0,0,0,12,0,0,0,7,7,7,7,0,0,0,0,12,0,0,0,7,7,7,7,0,0,0,0,12,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,-13,-12,-11,0,7,7,7,7,-1,-1,-1,-1,-1,0,1,1,7,7,7,7,0,0,0,0,11,12,13,0,7,7,7,7,0,0,0,11,0,12,0,13,7,7,7,7,0,0,11,0,0,12,0,0,7,7,7,7,0,11,0,0,0,12,0,0,7,7,7,7,11,0,0,0,0,12,0,0,7,7,7,7,0,0,0,0,0,12,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,-13,-12,-11,7,7,7,7,-1,-1,-1,-1,-1,-1,0,1,7,7,7,7,0,0,0,0,0,11,12,13,7,7,7,7,0,0,0,0,11,0,12,0,7,7,7,7,0,0,0,11,0,0,12,0,7,7,7,7,0,0,11,0,0,0,12,0,7,7,7,7,0,11,0,0,0,0,12,0,7,7,7,7,11,0,0,0,0,0,12,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,-13,-12,7,7,7,7,-1,-1,-1,-1,-1,-1,-1,0,7,7,7,7,0,0,0,0,0,0,11,12,7,7,7,7,0,0,0,0,0,11,0,12,7,7,7,7,0,0,0,0,11,0,0,12,7,7,7,7,0,0,0,11,0,0,0,12,7,7,7,7,0,0,11,0,0,0,0,12,7,7,7,7,0,11,0,0,0,0,0,12,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-12,0,-11,0,0,0,0,0,7,7,7,7,-12,-11,0,0,0,0,0,0,7,7,7,7,0,1,1,1,1,1,1,1,7,7,7,7,12,13,0,0,0,0,0,0,7,7,7,7,12,0,13,0,0,0,0,0,7,7,7,7,12,0,0,13,0,0,0,0,7,7,7,7,12,0,0,0,13,0,0,0,7,7,7,7,12,0,0,0,0,13,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,-12,0,-11,0,0,0,0,7,7,7,7,-13,-12,-11,0,0,0,0,0,7,7,7,7,-1,0,1,1,1,1,1,1,7,7,7,7,11,12,13,0,0,0,0,0,7,7,7,7,0,12,0,13,0,0,0,0,7,7,7,7,0,12,0,0,13,0,0,0,7,7,7,7,0,12,0,0,0,13,0,0,7,7,7,7,0,12,0,0,0,0,13,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-13,0,-12,0,-11,0,0,0,7,7,7,7,0,-13,-12,-11,0,0,0,0,7,7,7,7,-1,-1,0,1,1,1,1,1,7,7,7,7,0,11,12,13,0,0,0,0,7,7,7,7,11,0,12,0,13,0,0,0,7,7,7,7,0,0,12,0,0,13,0,0,7,7,7,7,0,0,12,0,0,0,13,0,7,7,7,7,0,0,12,0,0,0,0,13,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,-13,0,-12,0,-11,0,0,7,7,7,7,0,0,-13,-12,-11,0,0,0,7,7,7,7,-1,-1,-1,0,1,1,1,1,7,7,7,7,0,0,11,12,13,0,0,0,7,7,7,7,0,11,0,12,0,13,0,0,7,7,7,7,11,0,0,12,0,0,13,0,7,7,7,7,0,0,0,12,0,0,0,13,7,7,7,7,0,0,0,12,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,-13,0,-12,0,-11,0,7,7,7,7,0,0,0,-13,-12,-11,0,0,7,7,7,7,-1,-1,-1,-1,0,1,1,1,7,7,7,7,0,0,0,11,12,13,0,0,7,7,7,7,0,0,11,0,12,0,13,0,7,7,7,7,0,11,0,0,12,0,0,13,7,7,7,7,11,0,0,0,12,0,0,0,7,7,7,7,0,0,0,0,12,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,-13,0,-12,0,-11,7,7,7,7,0,0,0,0,-13,-12,-11,0,7,7,7,7,-1,-1,-1,-1,-1,0,1,1,7,7,7,7,0,0,0,0,11,12,13,0,7,7,7,7,0,0,0,11,0,12,0,13,7,7,7,7,0,0,11,0,0,12,0,0,7,7,7,7,0,11,0,0,0,12,0,0,7,7,7,7,11,0,0,0,0,12,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,-13,0,-12,0,7,7,7,7,0,0,0,0,0,-13,-12,-11,7,7,7,7,-1,-1,-1,-1,-1,-1,0,1,7,7,7,7,0,0,0,0,0,11,12,13,7,7,7,7,0,0,0,0,11,0,12,0,7,7,7,7,0,0,0,11,0,0,12,0,7,7,7,7,0,0,11,0,0,0,12,0,7,7,7,7,0,11,0,0,0,0,12,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,-13,0,-12,7,7,7,7,0,0,0,0,0,0,-13,-12,7,7,7,7,-1,-1,-1,-1,-1,-1,-1,0,7,7,7,7,0,0,0,0,0,0,11,12,7,7,7,7,0,0,0,0,0,11,0,12,7,7,7,7,0,0,0,0,11,0,0,12,7,7,7,7,0,0,0,11,0,0,0,12,7,7,7,7,0,0,11,0,0,0,0,12,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-12,0,0,-11,0,0,0,0,7,7,7,7,-12,0,-11,0,0,0,0,0,7,7,7,7,-12,-11,0,0,0,0,0,0,7,7,7,7,0,1,1,1,1,1,1,1,7,7,7,7,12,13,0,0,0,0,0,0,7,7,7,7,12,0,13,0,0,0,0,0,7,7,7,7,12,0,0,13,0,0,0,0,7,7,7,7,12,0,0,0,13,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,-12,0,0,-11,0,0,0,7,7,7,7,0,-12,0,-11,0,0,0,0,7,7,7,7,-13,-12,-11,0,0,0,0,0,7,7,7,7,-1,0,1,1,1,1,1,1,7,7,7,7,11,12,13,0,0,0,0,0,7,7,7,7,0,12,0,13,0,0,0,0,7,7,7,7,0,12,0,0,13,0,0,0,7,7,7,7,0,12,0,0,0,13,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,-12,0,0,-11,0,0,7,7,7,7,-13,0,-12,0,-11,0,0,0,7,7,7,7,0,-13,-12,-11,0,0,0,0,7,7,7,7,-1,-1,0,1,1,1,1,1,7,7,7,7,0,11,12,13,0,0,0,0,7,7,7,7,11,0,12,0,13,0,0,0,7,7,7,7,0,0,12,0,0,13,0,0,7,7,7,7,0,0,12,0,0,0,13,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-13,0,0,-12,0,0,-11,0,7,7,7,7,0,-13,0,-12,0,-11,0,0,7,7,7,7,0,0,-13,-12,-11,0,0,0,7,7,7,7,-1,-1,-1,0,1,1,1,1,7,7,7,7,0,0,11,12,13,0,0,0,7,7,7,7,0,11,0,12,0,13,0,0,7,7,7,7,11,0,0,12,0,0,13,0,7,7,7,7,0,0,0,12,0,0,0,13,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,-13,0,0,-12,0,0,-11,7,7,7,7,0,0,-13,0,-12,0,-11,0,7,7,7,7,0,0,0,-13,-12,-11,0,0,7,7,7,7,-1,-1,-1,-1,0,1,1,1,7,7,7,7,0,0,0,11,12,13,0,0,7,7,7,7,0,0,11,0,12,0,13,0,7,7,7,7,0,11,0,0,12,0,0,13,7,7,7,7,11,0,0,0,12,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,-13,0,0,-12,0,0,7,7,7,7,0,0,0,-13,0,-12,0,-11,7,7,7,7,0,0,0,0,-13,-12,-11,0,7,7,7,7,-1,-1,-1,-1,-1,0,1,1,7,7,7,7,0,0,0,0,11,12,13,0,7,7,7,7,0,0,0,11,0,12,0,13,7,7,7,7,0,0,11,0,0,12,0,0,7,7,7,7,0,11,0,0,0,12,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,-13,0,0,-12,0,7,7,7,7,0,0,0,0,-13,0,-12,0,7,7,7,7,0,0,0,0,0,-13,-12,-11,7,7,7,7,-1,-1,-1,-1,-1,-1,0,1,7,7,7,7,0,0,0,0,0,11,12,13,7,7,7,7,0,0,0,0,11,0,12,0,7,7,7,7,0,0,0,11,0,0,12,0,7,7,7,7,0,0,11,0,0,0,12,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,-13,0,0,-12,7,7,7,7,0,0,0,0,0,-13,0,-12,7,7,7,7,0,0,0,0,0,0,-13,-12,7,7,7,7,-1,-1,-1,-1,-1,-1,-1,0,7,7,7,7,0,0,0,0,0,0,11,12,7,7,7,7,0,0,0,0,0,11,0,12,7,7,7,7,0,0,0,0,11,0,0,12,7,7,7,7,0,0,0,11,0,0,0,12,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-12,0,0,0,-11,0,0,0,7,7,7,7,-12,0,0,-11,0,0,0,0,7,7,7,7,-12,0,-11,0,0,0,0,0,7,7,7,7,-12,-11,0,0,0,0,0,0,7,7,7,7,0,1,1,1,1,1,1,1,7,7,7,7,12,13,0,0,0,0,0,0,7,7,7,7,12,0,13,0,0,0,0,0,7,7,7,7,12,0,0,13,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,-12,0,0,0,-11,0,0,7,7,7,7,0,-12,0,0,-11,0,0,0,7,7,7,7,0,-12,0,-11,0,0,0,0,7,7,7,7,-13,-12,-11,0,0,0,0,0,7,7,7,7,-1,0,1,1,1,1,1,1,7,7,7,7,11,12,13,0,0,0,0,0,7,7,7,7,0,12,0,13,0,0,0,0,7,7,7,7,0,12,0,0,13,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,-12,0,0,0,-11,0,7,7,7,7,0,0,-12,0,0,-11,0,0,7,7,7,7,-13,0,-12,0,-11,0,0,0,7,7,7,7,0,-13,-12,-11,0,0,0,0,7,7,7,7,-1,-1,0,1,1,1,1,1,7,7,7,7,0,11,12,13,0,0,0,0,7,7,7,7,11,0,12,0,13,0,0,0,7,7,7,7,0,0,12,0,0,13,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,-12,0,0,0,-11,7,7,7,7,-13,0,0,-12,0,0,-11,0,7,7,7,7,0,-13,0,-12,0,-11,0,0,7,7,7,7,0,0,-13,-12,-11,0,0,0,7,7,7,7,-1,-1,-1,0,1,1,1,1,7,7,7,7,0,0,11,12,13,0,0,0,7,7,7,7,0,11,0,12,0,13,0,0,7,7,7,7,11,0,0,12,0,0,13,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-13,0,0,0,-12,0,0,0,7,7,7,7,0,-13,0,0,-12,0,0,-11,7,7,7,7,0,0,-13,0,-12,0,-11,0,7,7,7,7,0,0,0,-13,-12,-11,0,0,7,7,7,7,-1,-1,-1,-1,0,1,1,1,7,7,7,7,0,0,0,11,12,13,0,0,7,7,7,7,0,0,11,0,12,0,13,0,7,7,7,7,0,11,0,0,12,0,0,13,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,-13,0,0,0,-12,0,0,7,7,7,7,0,0,-13,0,0,-12,0,0,7,7,7,7,0,0,0,-13,0,-12,0,-11,7,7,7,7,0,0,0,0,-13,-12,-11,0,7,7,7,7,-1,-1,-1,-1,-1,0,1,1,7,7,7,7,0,0,0,0,11,12,13,0,7,7,7,7,0,0,0,11,0,12,0,13,7,7,7,7,0,0,11,0,0,12,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,-13,0,0,0,-12,0,7,7,7,7,0,0,0,-13,0,0,-12,0,7,7,7,7,0,0,0,0,-13,0,-12,0,7,7,7,7,0,0,0,0,0,-13,-12,-11,7,7,7,7,-1,-1,-1,-1,-1,-1,0,1,7,7,7,7,0,0,0,0,0,11,12,13,7,7,7,7,0,0,0,0,11,0,12,0,7,7,7,7,0,0,0,11,0,0,12,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,-13,0,0,0,-12,7,7,7,7,0,0,0,0,-13,0,0,-12,7,7,7,7,0,0,0,0,0,-13,0,-12,7,7,7,7,0,0,0,0,0,0,-13,-12,7,7,7,7,-1,-1,-1,-1,-1,-1,-1,0,7,7,7,7,0,0,0,0,0,0,11,12,7,7,7,7,0,0,0,0,0,11,0,12,7,7,7,7,0,0,0,0,11,0,0,12,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-12,0,0,0,0,-11,0,0,7,7,7,7,-12,0,0,0,-11,0,0,0,7,7,7,7,-12,0,0,-11,0,0,0,0,7,7,7,7,-12,0,-11,0,0,0,0,0,7,7,7,7,-12,-11,0,0,0,0,0,0,7,7,7,7,0,1,1,1,1,1,1,1,7,7,7,7,12,13,0,0,0,0,0,0,7,7,7,7,12,0,13,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,-12,0,0,0,0,-11,0,7,7,7,7,0,-12,0,0,0,-11,0,0,7,7,7,7,0,-12,0,0,-11,0,0,0,7,7,7,7,0,-12,0,-11,0,0,0,0,7,7,7,7,-13,-12,-11,0,0,0,0,0,7,7,7,7,-1,0,1,1,1,1,1,1,7,7,7,7,11,12,13,0,0,0,0,0,7,7,7,7,0,12,0,13,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,-12,0,0,0,0,-11,7,7,7,7,0,0,-12,0,0,0,-11,0,7,7,7,7,0,0,-12,0,0,-11,0,0,7,7,7,7,-13,0,-12,0,-11,0,0,0,7,7,7,7,0,-13,-12,-11,0,0,0,0,7,7,7,7,-1,-1,0,1,1,1,1,1,7,7,7,7,0,11,12,13,0,0,0,0,7,7,7,7,11,0,12,0,13,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,-12,0,0,0,0,7,7,7,7,0,0,0,-12,0,0,0,-11,7,7,7,7,-13,0,0,-12,0,0,-11,0,7,7,7,7,0,-13,0,-12,0,-11,0,0,7,7,7,7,0,0,-13,-12,-11,0,0,0,7,7,7,7,-1,-1,-1,0,1,1,1,1,7,7,7,7,0,0,11,12,13,0,0,0,7,7,7,7,0,11,0,12,0,13,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,-12,0,0,0,7,7,7,7,-13,0,0,0,-12,0,0,0,7,7,7,7,0,-13,0,0,-12,0,0,-11,7,7,7,7,0,0,-13,0,-12,0,-11,0,7,7,7,7,0,0,0,-13,-12,-11,0,0,7,7,7,7,-1,-1,-1,-1,0,1,1,1,7,7,7,7,0,0,0,11,12,13,0,0,7,7,7,7,0,0,11,0,12,0,13,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-13,0,0,0,0,-12,0,0,7,7,7,7,0,-13,0,0,0,-12,0,0,7,7,7,7,0,0,-13,0,0,-12,0,0,7,7,7,7,0,0,0,-13,0,-12,0,-11,7,7,7,7,0,0,0,0,-13,-12,-11,0,7,7,7,7,-1,-1,-1,-1,-1,0,1,1,7,7,7,7,0,0,0,0,11,12,13,0,7,7,7,7,0,0,0,11,0,12,0,13,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,-13,0,0,0,0,-12,0,7,7,7,7,0,0,-13,0,0,0,-12,0,7,7,7,7,0,0,0,-13,0,0,-12,0,7,7,7,7,0,0,0,0,-13,0,-12,0,7,7,7,7,0,0,0,0,0,-13,-12,-11,7,7,7,7,-1,-1,-1,-1,-1,-1,0,1,7,7,7,7,0,0,0,0,0,11,12,13,7,7,7,7,0,0,0,0,11,0,12,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,-13,0,0,0,0,-12,7,7,7,7,0,0,0,-13,0,0,0,-12,7,7,7,7,0,0,0,0,-13,0,0,-12,7,7,7,7,0,0,0,0,0,-13,0,-12,7,7,7,7,0,0,0,0,0,0,-13,-12,7,7,7,7,-1,-1,-1,-1,-1,-1,-1,0,7,7,7,7,0,0,0,0,0,0,11,12,7,7,7,7,0,0,0,0,0,11,0,12,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-12,0,0,0,0,0,-11,0,7,7,7,7,-12,0,0,0,0,-11,0,0,7,7,7,7,-12,0,0,0,-11,0,0,0,7,7,7,7,-12,0,0,-11,0,0,0,0,7,7,7,7,-12,0,-11,0,0,0,0,0,7,7,7,7,-12,-11,0,0,0,0,0,0,7,7,7,7,0,1,1,1,1,1,1,1,7,7,7,7,12,13,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,-12,0,0,0,0,0,-11,7,7,7,7,0,-12,0,0,0,0,-11,0,7,7,7,7,0,-12,0,0,0,-11,0,0,7,7,7,7,0,-12,0,0,-11,0,0,0,7,7,7,7,0,-12,0,-11,0,0,0,0,7,7,7,7,-13,-12,-11,0,0,0,0,0,7,7,7,7,-1,0,1,1,1,1,1,1,7,7,7,7,11,12,13,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,-12,0,0,0,0,0,7,7,7,7,0,0,-12,0,0,0,0,-11,7,7,7,7,0,0,-12,0,0,0,-11,0,7,7,7,7,0,0,-12,0,0,-11,0,0,7,7,7,7,-13,0,-12,0,-11,0,0,0,7,7,7,7,0,-13,-12,-11,0,0,0,0,7,7,7,7,-1,-1,0,1,1,1,1,1,7,7,7,7,0,11,12,13,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,-12,0,0,0,0,7,7,7,7,0,0,0,-12,0,0,0,0,7,7,7,7,0,0,0,-12,0,0,0,-11,7,7,7,7,-13,0,0,-12,0,0,-11,0,7,7,7,7,0,-13,0,-12,0,-11,0,0,7,7,7,7,0,0,-13,-12,-11,0,0,0,7,7,7,7,-1,-1,-1,0,1,1,1,1,7,7,7,7,0,0,11,12,13,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,-12,0,0,0,7,7,7,7,0,0,0,0,-12,0,0,0,7,7,7,7,-13,0,0,0,-12,0,0,0,7,7,7,7,0,-13,0,0,-12,0,0,-11,7,7,7,7,0,0,-13,0,-12,0,-11,0,7,7,7,7,0,0,0,-13,-12,-11,0,0,7,7,7,7,-1,-1,-1,-1,0,1,1,1,7,7,7,7,0,0,0,11,12,13,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,-12,0,0,7,7,7,7,-13,0,0,0,0,-12,0,0,7,7,7,7,0,-13,0,0,0,-12,0,0,7,7,7,7,0,0,-13,0,0,-12,0,0,7,7,7,7,0,0,0,-13,0,-12,0,-11,7,7,7,7,0,0,0,0,-13,-12,-11,0,7,7,7,7,-1,-1,-1,-1,-1,0,1,1,7,7,7,7,0,0,0,0,11,12,13,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-13,0,0,0,0,0,-12,0,7,7,7,7,0,-13,0,0,0,0,-12,0,7,7,7,7,0,0,-13,0,0,0,-12,0,7,7,7,7,0,0,0,-13,0,0,-12,0,7,7,7,7,0,0,0,0,-13,0,-12,0,7,7,7,7,0,0,0,0,0,-13,-12,-11,7,7,7,7,-1,-1,-1,-1,-1,-1,0,1,7,7,7,7,0,0,0,0,0,11,12,13,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,-13,0,0,0,0,0,-12,7,7,7,7,0,0,-13,0,0,0,0,-12,7,7,7,7,0,0,0,-13,0,0,0,-12,7,7,7,7,0,0,0,0,-13,0,0,-12,7,7,7,7,0,0,0,0,0,-13,0,-12,7,7,7,7,0,0,0,0,0,0,-13,-12,7,7,7,7,-1,-1,-1,-1,-1,-1,-1,0,7,7,7,7,0,0,0,0,0,0,11,12,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-12,0,0,0,0,0,0,-11,7,7,7,7,-12,0,0,0,0,0,-11,0,7,7,7,7,-12,0,0,0,0,-11,0,0,7,7,7,7,-12,0,0,0,-11,0,0,0,7,7,7,7,-12,0,0,-11,0,0,0,0,7,7,7,7,-12,0,-11,0,0,0,0,0,7,7,7,7,-12,-11,0,0,0,0,0,0,7,7,7,7,0,1,1,1,1,1,1,1,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,-12,0,0,0,0,0,0,7,7,7,7,0,-12,0,0,0,0,0,-11,7,7,7,7,0,-12,0,0,0,0,-11,0,7,7,7,7,0,-12,0,0,0,-11,0,0,7,7,7,7,0,-12,0,0,-11,0,0,0,7,7,7,7,0,-12,0,-11,0,0,0,0,7,7,7,7,-13,-12,-11,0,0,0,0,0,7,7,7,7,-1,0,1,1,1,1,1,1,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,-12,0,0,0,0,0,7,7,7,7,0,0,-12,0,0,0,0,0,7,7,7,7,0,0,-12,0,0,0,0,-11,7,7,7,7,0,0,-12,0,0,0,-11,0,7,7,7,7,0,0,-12,0,0,-11,0,0,7,7,7,7,-13,0,-12,0,-11,0,0,0,7,7,7,7,0,-13,-12,-11,0,0,0,0,7,7,7,7,-1,-1,0,1,1,1,1,1,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,-12,0,0,0,0,7,7,7,7,0,0,0,-12,0,0,0,0,7,7,7,7,0,0,0,-12,0,0,0,0,7,7,7,7,0,0,0,-12,0,0,0,-11,7,7,7,7,-13,0,0,-12,0,0,-11,0,7,7,7,7,0,-13,0,-12,0,-11,0,0,7,7,7,7,0,0,-13,-12,-11,0,0,0,7,7,7,7,-1,-1,-1,0,1,1,1,1,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,-12,0,0,0,7,7,7,7,0,0,0,0,-12,0,0,0,7,7,7,7,0,0,0,0,-12,0,0,0,7,7,7,7,-13,0,0,0,-12,0,0,0,7,7,7,7,0,-13,0,0,-12,0,0,-11,7,7,7,7,0,0,-13,0,-12,0,-11,0,7,7,7,7,0,0,0,-13,-12,-11,0,0,7,7,7,7,-1,-1,-1,-1,0,1,1,1,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,-12,0,0,7,7,7,7,0,0,0,0,0,-12,0,0,7,7,7,7,-13,0,0,0,0,-12,0,0,7,7,7,7,0,-13,0,0,0,-12,0,0,7,7,7,7,0,0,-13,0,0,-12,0,0,7,7,7,7,0,0,0,-13,0,-12,0,-11,7,7,7,7,0,0,0,0,-13,-12,-11,0,7,7,7,7,-1,-1,-1,-1,-1,0,1,1,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,-12,0,7,7,7,7,-13,0,0,0,0,0,-12,0,7,7,7,7,0,-13,0,0,0,0,-12,0,7,7,7,7,0,0,-13,0,0,0,-12,0,7,7,7,7,0,0,0,-13,0,0,-12,0,7,7,7,7,0,0,0,0,-13,0,-12,0,7,7,7,7,0,0,0,0,0,-13,-12,-11,7,7,7,7,-1,-1,-1,-1,-1,-1,0,1,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-13,0,0,0,0,0,0,-12,7,7,7,7,0,-13,0,0,0,0,0,-12,7,7,7,7,0,0,-13,0,0,0,0,-12,7,7,7,7,0,0,0,-13,0,0,0,-12,7,7,7,7,0,0,0,0,-13,0,0,-12,7,7,7,7,0,0,0,0,0,-13,0,-12,7,7,7,7,0,0,0,0,0,0,-13,-12,7,7,7,7,-1,-1,-1,-1,-1,-1,-1,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7]
  ];
  
  //}}}
  
  //}}}

  //{{{  utility primitives
  
  //{{{  uciLog
  
  function uciLog () {
  
    if (cwtch.quiet)
      return;
  
    var s = '';
  
    for (var i = 0; i < arguments.length; i++)
      s += arguments[i] + ' ';
  
    console.log(s);
  }
  
  //}}}
  //{{{  myround
  
  function myround(x) {
    return Math.sign(x) * Math.round(Math.abs(x));
  }
  
  //}}}
  
  //}}}
  //{{{  prng primitives
  //
  // https://en.wikipedia.org/wiki/Mersenne_Twister
  //
  
  let twisterList  = new Uint32Array(624);
  let twisterIndex = 0;
  
  function twisterInit(seed) {
  
    const mt = twisterList;
  
    mt[0] = seed >>> 0;
  
    for (let i = 1; i < 624; i++) {
      mt[i] = (0x6C078965 * (mt[i - 1] ^ (mt[i - 1] >>> 30)) + i) >>> 0;
    }
  }
  
  function twisterFill() {
  
    const mt = twisterList;
  
    for (let i = 0; i < 624; i++) {
      let y = (mt[i] & 0x80000000) + (mt[(i + 1) % 624] & 0x7FFFFFFF);
      mt[i] = mt[(i + 397) % 624] ^ (y >>> 1);
      if (y % 2 !== 0) {
        mt[i] ^= 0x9908B0DF;
      }
    }
  }
  
  function twisterRand() {
  
    const mt = twisterList;
  
    if (twisterIndex === 0)
      twisterFill();
  
    let y = mt[twisterIndex];
    y ^= y >>> 11;
    y ^= (y << 7)  & 0x9D2C5680;
    y ^= (y << 15) & 0xEFC60000;
    y ^= y >>> 18;
  
    twisterIndex = (twisterIndex + 1) % 624;
  
    return y >>> 0;
  }
  
  twisterInit(123456789);
  
  //}}}
  //{{{  move primitives
  
  function moveClean (move) {
    return move & MOVE_CLEAN_MASK;
  }
  
  function moveIsNoisy (move) {
    return (move & MOVE_NOISY_MASK) != 0;
  }
  
  function moveIsQuiet (move) {
    return (move & MOVE_NOISY_MASK) == 0;
  }
  
  function moveEq (m1,m2) {
    return (m1 & MOVE_CLEAN_MASK) == (m2 & MOVE_CLEAN_MASK);
  }
  
  function moveFromSq (move) {
    return (move & MOVE_FR_MASK) >>> MOVE_FR_BITS;
  }
  
  function moveToSq (move) {
    return (move & MOVE_TO_MASK) >>> MOVE_TO_BITS;
  }
  
  function moveToObj (move) {
    return (move & MOVE_TOOBJ_MASK) >>> MOVE_TOOBJ_BITS;
  }
  
  function moveFromObj (move) {
    return (move & MOVE_FROBJ_MASK) >>> MOVE_FROBJ_BITS;
  }
  
  function movePromotePiece (move) {
    return ((move & MOVE_PROMAS_MASK) >>> MOVE_PROMAS_BITS) + 2;
  }
  
  function formatMove (move) {
  
    if (move == 0)
      return 'NaM';
  
    const fr = moveFromSq(move);
    const to = moveToSq(move);
  
    const frCoord = COORDS[fr];
    const toCoord = COORDS[to];
  
    const pro = (move & MOVE_PROMOTE_MASK) ? OBJ_CHAR[movePromotePiece(move)|BLACK] : '';
  
    return frCoord + toCoord + pro;
  }
  
  //}}}
  //{{{  board primitives
  
  function objColour (obj) {
    return obj & COLOUR_MASK;
  }
  
  function objPiece (obj) {
    return obj & PIECE_MASK;
  }
  
  function colourIndex (c) {
    return c >>> 3;
  }
  
  function colourIndexToggle (i) {
    return Math.abs(i-1);
  }
  
  function colourMultiplier (c) {
    return (-c >> 31) | 1;
  }
  
  function colourToggle (c) {
    return ~c & COLOUR_MASK;
  }
  
  function flip (sq) {
    let m = (143 - sq) / 12 | 0;
    return 12*m + sq%12;
  }
  
  //}}}
  //{{{  net primitives
  
  function relu(x) {
    return Math.max(0, x);
  }
  
  function crelu(x) {
    return Math.min(Math.max(x, 0), 1);
  }
  
  function inputIndex(obj, sq) {
    return IMAP[obj][sq];
  }
  
  //}}}

  //{{{  nodeStruct
  
  //{{{  struct
  
  function nodeStruct () {
  
    this.cwtch  = null;
    this.child  = null;
    this.parent = null;
    this.granny = null;
  
    this.ply = 0;
    this.no  = 0;
  
    this.quietNum   = 0;
    this.quietMoves = new Uint32Array(MAX_MOVES).fill(0);
    this.quietRanks = new Uint32Array(MAX_MOVES).fill(0);
  
    this.noisyNum   = 0;
    this.noisyMoves = new Uint32Array(MAX_MOVES).fill(0);
    this.noisyRanks = new Uint32Array(MAX_MOVES).fill(0);
  
    this.killer    = 0;
    this.killerNum = 0;
  
    this.nextMove = 0;
    this.stage    = 0;
    this.flags    = 0;
    this.inCheck  = 0;
  
    this.ttMove = 0;
  
    this.hHistoryLimit = 0;
    this.rights        = 0;
    this.ep            = 0;
    this.hLo           = new Uint32Array(1);
    this.hHi           = new Uint32Array(1);
    this.net_h1_a      = new Float32Array(net_h1_size);
  }
  
  //}}}
  
  //{{{  initMoveGen
  
  nodeStruct.prototype.initMoveGen = function (flags, inCheck) {
  
    this.stage     = 0;
    this.flags     = flags;
    this.inCheck   = inCheck;
  
  }
  
  //}}}
  
  //{{{  getNextMove
  
  nodeStruct.prototype.getNextMove = function () {
  
    const l      = this.cwtch;
    const ttMove = this.ttMove;
  
    switch (this.stage) {
  
      case 0:
  
        this.stage++;
  
        if (ttMove && l.ttValidate(ttMove)) {
          return ttMove;
        }
  
        if (ttMove)
          uciLog('info invalid tt move', formatMove(ttMove), l.fen(), this.ply); //hack
  
      case 1:
  
        this.noisyNum    = 0;
        this.quietNum    = 0;
        this.killerNum   = 0;
  
        this.genNonCastlingMoves();
  
        this.nextMove = 0;
        this.stage++;
  
      case 2:
  
        if (this.nextMove < this.noisyNum)
          return this.nextStagedNoisy();
  
        if (this.flags & NOISY_MOVES_ONLY)
          return 0;
  
        this.genCastlingMoves();
  
        this.stage++;
  
      case 3:
  
        this.stage++;
  
        if (this.killerNum)
          return this.killer;
  
      case 4:
  
        this.rankQuiets();
  
        this.stage++;
        this.nextMove = 0;
  
      case 5:
  
        if (this.nextMove < this.quietNum)
          return this.nextStagedQuiet();
  
        return 0;
    }
  }
  
  //}}}
  //{{{  nextStagedNoisy
  
  nodeStruct.prototype.nextStagedNoisy = function () {
  
    let maxR = -100000;
    let maxI = 0;
  
    for (let i=this.nextMove; i < this.noisyNum; i++) {
      if (this.noisyRanks[i] > maxR) {
        maxR = this.noisyRanks[i];
        maxI = i;
      }
    }
  
    const maxM = this.noisyMoves[maxI]
  
    this.noisyMoves[maxI] = this.noisyMoves[this.nextMove];
    this.noisyRanks[maxI] = this.noisyRanks[this.nextMove];
  
    this.nextMove++;
  
    return maxM;
  }
  
  //}}}
  //{{{  nextStagedQuiet
  
  nodeStruct.prototype.nextStagedQuiet = function () {
  
    let maxR = -100000;
    let maxI = 0;
  
    for (let i=this.nextMove; i < this.quietNum; i++) {
      if (this.quietRanks[i] > maxR) {
        maxR = this.quietRanks[i];
        maxI = i;
      }
    }
  
    const maxM = this.quietMoves[maxI]
  
    this.quietMoves[maxI] = this.quietMoves[this.nextMove];
    this.quietRanks[maxI] = this.quietRanks[this.nextMove];
  
    this.nextMove++;
  
    return maxM;
  }
  
  //}}}
  
  //{{{  genNonCastlingMoves
  
  nodeStruct.prototype.genNonCastlingMoves = function () {
  
    const l = this.cwtch;
    const b = l.board;
  
    const cx           = colourIndex(l.turn);
    const HOME_RANK    = WB_HOME_RANK[cx];
    const PROMOTE_RANK = WB_PROMOTE_RANK[cx];
    const EP_RANK      = WB_EP_RANK[cx];
    const list         = l.cxList[cx];
    const num          = list[LCOUNT];
    const aligned      = ALIGNED[list[LKING]];
  
    for (let i=1; i<=num; i++) {
  
      const fr        = list[i];
      const frObj     = b[fr];
  
      const frPiece   = objPiece(frObj);
      const frMove    = (frObj << MOVE_FROBJ_BITS) | (fr << MOVE_FR_BITS);
      const legalMask = !this.inCheck && !aligned[fr] ? MOVE_LEGAL_MASK : 0;
  
      switch (frPiece) {
  
        case KING:
          this.genKingMoves(frMove);
          break;
  
        case PAWN:
          const frRank = RANK[fr];
          switch (frRank) {
            case HOME_RANK:
              this.genHomePawnMoves(frMove | legalMask);
              break;
            case PROMOTE_RANK:
              this.genPromotePawnMoves(frMove | legalMask);
              break;
            case EP_RANK:
              this.genPawnMoves(frMove | legalMask);
              if (l.ep)
                this.genEnPassPawnMoves(frMove);
              break;
            default:
              this.genPawnMoves(frMove | legalMask);
              break;
          }
          break;
  
        case KNIGHT:
          this.genKnightMoves(frMove | legalMask);
          break;
  
        default:
          this.genSliderMoves(frMove | legalMask);
          break;
      }
    }
  }
  
  //}}}
  //{{{  genCastlingMoves
  
  nodeStruct.prototype.genCastlingMoves = function () {
  
    if (this.inCheck)
      return;
  
    const l = this.cwtch;
    const b = l.board;
  
    if (l.turn == WHITE && (l.rights & WHITE_RIGHTS)) {
      //{{{  white
      
      if ((l.rights & WHITE_RIGHTS_KING) && !b[F1]
                                         && !b[G1]
                                         && b[G2] != B_KING
                                         && b[H2] != B_KING
                                         && !l.isKingAttacked(F1,BLACK)) {
        this.addQuiet(MOVE_E1G1);
      }
      
      if ((l.rights & WHITE_RIGHTS_QUEEN) && !b[B1]
                                          && !b[C1]
                                          && !b[D1]
                                          && b[B2] != B_KING
                                          && b[C2] != B_KING
                                          && !l.isKingAttacked(D1,BLACK)) {
        this.addQuiet(MOVE_E1C1);
      }
      
      //}}}
    }
  
    else if (l.turn == BLACK && (l.rights & BLACK_RIGHTS)) {
      //{{{  black
      
      if ((l.rights & BLACK_RIGHTS_KING) && b[F8] == 0
                                         && b[G8] == 0
                                         && b[G7] != W_KING
                                         && b[H7] != W_KING
                                         && !l.isKingAttacked(F8,WHITE)) {
        this.addQuiet(MOVE_E8G8);
      }
      
      if ((l.rights & BLACK_RIGHTS_QUEEN) && b[B8] == 0
                                          && b[C8] == 0
                                          && b[D8] == 0
                                          && b[B7] != W_KING
                                          && b[C7] != W_KING
                                          && !l.isKingAttacked(D8,WHITE)) {
        this.addQuiet(MOVE_E8C8);
      }
      
      //}}}
    }
  }
  
  //}}}
  
  //{{{  addNoisy
  
  //              E  P  N  B  R  Q  K  X  -  P  N  B  R  Q  K
  const MVVLVA = [1, 1, 2, 3, 4, 5, 6, 0, 0, 1, 2, 3, 4, 5, 6];
  
  nodeStruct.prototype.addNoisy = function (move) {
  
    if (moveEq(this.ttMove,move))
      return;
  
    this.noisyMoves[this.noisyNum]   = move;
    if (randomMoveOrdering)
      this.noisyRanks[this.noisyNum++] = Math.random() * 1000 | 0;
    else
      this.noisyRanks[this.noisyNum++] = 10 * MVVLVA[moveToObj(move)] - MVVLVA[moveFromObj(move)];
  }
  
  //}}}
  //{{{  addQuiet
  
  nodeStruct.prototype.addQuiet = function (move) {
  
    if (moveEq(this.ttMove,move))
      return;
  
    if (moveEq(this.killer,move)) {
      this.killerNum = 1;
      return;
    }
  
    this.quietMoves[this.quietNum++] = move;
  
  }
  
  //}}}
  //{{{  rankQuiets
  
  nodeStruct.prototype.rankQuiets = function () {
  
    const l = this.cwtch;
  
    for (let i=0; i < this.quietNum; i++) {
  
      const move    = this.quietMoves[i];
      const fr      = moveFromSq(move);
      const to      = moveToSq(move);
      const frObj   = moveFromObj(move);
      const frPiece = objPiece(frObj) - 1;
      const cx      = colourIndex(l.turn);
      const objMove = OBJMOVE[frObj];
      const val     = objMove[to] - objMove[fr];
      const h       = l.cxHistory[cx][frPiece];
      const hv      = h[to];
  
      if (randomMoveOrdering)
        this.quietRanks[i] = Math.random() * 1000 | 0;
      else {
        if (hv)
          this.quietRanks[i] = 2000 + hv;
        else
          this.quietRanks[i] = 1000 + val;
      }
    }
  }
  
  //}}}
  
  //{{{  genPawnMoves
  
  nodeStruct.prototype.genPawnMoves = function (frMove) {
  
    const l = this.cwtch;
    const b = l.board;
  
    const fr           = moveFromSq(frMove);
    const cx           = colourIndex(l.turn);
    const CAN_CAPTURE  = WB_CAN_CAPTURE[cx];
    const OFFSET_ORTH  = WB_OFFSET_ORTH[cx];
    const OFFSET_DIAG1 = WB_OFFSET_DIAG1[cx];
    const OFFSET_DIAG2 = WB_OFFSET_DIAG2[cx];
  
    let to    = 0;
    let toObj = 0;
  
    to = fr + OFFSET_ORTH;
    if (!b[to])
      this.addQuiet(frMove | to);
  
    to = fr + OFFSET_DIAG1;
    toObj = b[to];
    if (CAN_CAPTURE[toObj])
      this.addNoisy(frMove | (toObj << MOVE_TOOBJ_BITS) | to);
  
    to = fr + OFFSET_DIAG2;
    toObj = b[to];
    if (CAN_CAPTURE[toObj])
      this.addNoisy(frMove | (toObj << MOVE_TOOBJ_BITS) | to);
  }
  
  //}}}
  //{{{  genEnPassPawnMoves
  
  nodeStruct.prototype.genEnPassPawnMoves = function (frMove) {
  
    const l = this.cwtch;
    const b = l.board;
  
    const fr           = moveFromSq(frMove);
    const cx           = colourIndex(l.turn);
    const OFFSET_DIAG1 = WB_OFFSET_DIAG1[cx];
    const OFFSET_DIAG2 = WB_OFFSET_DIAG2[cx];
  
    let to = 0;
  
    to = fr + OFFSET_DIAG1;
    if (to == l.ep && !b[to])
      this.addNoisy(frMove | to | MOVE_EPTAKE_MASK);
  
    to = fr + OFFSET_DIAG2;
    if (to == l.ep && !b[to])
      this.addNoisy(frMove | to | MOVE_EPTAKE_MASK);
  }
  
  //}}}
  //{{{  genHomePawnMoves
  
  nodeStruct.prototype.genHomePawnMoves = function (frMove) {
  
    const l = this.cwtch;
    const b = l.board;
  
    const fr           = moveFromSq(frMove);
    const cx           = colourIndex(l.turn);
    const CAN_CAPTURE  = WB_CAN_CAPTURE[cx];
    const OFFSET_ORTH  = WB_OFFSET_ORTH[cx];
    const OFFSET_DIAG1 = WB_OFFSET_DIAG1[cx];
    const OFFSET_DIAG2 = WB_OFFSET_DIAG2[cx];
  
    let to    = 0;
    let toObj = 0;
  
    to = fr + OFFSET_ORTH;
    if (!b[to]) {
      this.addQuiet(frMove | to);
      to += OFFSET_ORTH;
      if (!b[to])
        this.addQuiet(frMove | to | MOVE_EPMAKE_MASK);
    }
  
    to    = fr + OFFSET_DIAG1;
    toObj = b[to];
    if (CAN_CAPTURE[toObj])
      this.addNoisy(frMove | (toObj << MOVE_TOOBJ_BITS) | to);
  
    to    = fr + OFFSET_DIAG2;
    toObj = b[to];
    if (CAN_CAPTURE[toObj])
      this.addNoisy(frMove | (toObj << MOVE_TOOBJ_BITS) | to);
  }
  
  //}}}
  //{{{  genPromotePawnMoves
  
  nodeStruct.prototype.genPromotePawnMoves = function (frMove) {
  
    const l = this.cwtch;
    const b = l.board;
  
    const fr           = moveFromSq(frMove);
    const cx           = colourIndex(l.turn);
    const CAN_CAPTURE  = WB_CAN_CAPTURE[cx];
    const OFFSET_ORTH  = WB_OFFSET_ORTH[cx];
    const OFFSET_DIAG1 = WB_OFFSET_DIAG1[cx];
    const OFFSET_DIAG2 = WB_OFFSET_DIAG2[cx];
  
    let to    = 0;
    let toObj = 0;
  
    to = fr + OFFSET_ORTH;
    if (!b[to]) {
      this.addQuiet(frMove | to | QPRO);
      this.addQuiet(frMove | to | RPRO);
      this.addQuiet(frMove | to | BPRO);
      this.addQuiet(frMove | to | NPRO);
    }
  
    to    = fr + OFFSET_DIAG1;
    toObj = b[to];
    if (CAN_CAPTURE[toObj]) {
      this.addNoisy(frMove | (toObj << MOVE_TOOBJ_BITS) | to | QPRO);
      this.addNoisy(frMove | (toObj << MOVE_TOOBJ_BITS) | to | RPRO);
      this.addNoisy(frMove | (toObj << MOVE_TOOBJ_BITS) | to | BPRO);
      this.addNoisy(frMove | (toObj << MOVE_TOOBJ_BITS) | to | NPRO);
    }
  
    to    = fr + OFFSET_DIAG2;
    toObj = b[to];
    if (CAN_CAPTURE[toObj]) {
      this.addNoisy(frMove | (toObj << MOVE_TOOBJ_BITS) | to | QPRO);
      this.addNoisy(frMove | (toObj << MOVE_TOOBJ_BITS) | to | RPRO);
      this.addNoisy(frMove | (toObj << MOVE_TOOBJ_BITS) | to | BPRO);
      this.addNoisy(frMove | (toObj << MOVE_TOOBJ_BITS) | to | NPRO);
    }
  }
  
  //}}}
  
  //{{{  genKingMoves
  
  nodeStruct.prototype.genKingMoves = function (frMove) {
  
    const l = this.cwtch;
    const b = l.board;
  
    const fr          = moveFromSq(frMove);
    const cx          = colourIndex(l.turn);
    const cy          = colourIndexToggle(cx);
    const CAN_CAPTURE = WB_CAN_CAPTURE[cx];
    const theirKingSq = l.cxList[cy][LKING];
  
    let dir = 0;
  
    while (dir < 8) {
  
      const to = fr + KING_OFFSETS[dir++];
  
      if (!ADJACENT[Math.abs(to-theirKingSq)]) {
  
        const toObj = b[to];
  
        if (!toObj)
          this.addQuiet(frMove | to);
  
        else if (CAN_CAPTURE[toObj])
          this.addNoisy(frMove | (toObj << MOVE_TOOBJ_BITS) | to);
      }
    }
  }
  
  //}}}
  //{{{  genKnightMoves
  
  nodeStruct.prototype.genKnightMoves = function (frMove) {
  
    const l = this.cwtch;
    const b = l.board;
  
    const fr          = moveFromSq(frMove);
    const cx          = colourIndex(l.turn);
    const CAN_CAPTURE = WB_CAN_CAPTURE[cx];
  
    let dir = 0;
  
    while (dir < 8) {
  
      const to    = fr + KNIGHT_OFFSETS[dir++];
      const toObj = b[to];
  
      if (!toObj)
        this.addQuiet(frMove | to);
  
      else if (CAN_CAPTURE[toObj])
        this.addNoisy(frMove | (toObj << MOVE_TOOBJ_BITS) | to);
    }
  }
  
  //}}}
  //{{{  genSliderMoves
  
  nodeStruct.prototype.genSliderMoves = function (frMove) {
  
    const l = this.cwtch;
    const b = l.board;
  
    const fr          = moveFromSq(frMove);
    const frObj       = moveFromObj(frMove);
    const frPiece     = objPiece(frObj);
    const cx          = colourIndex(l.turn);
    const CAN_CAPTURE = WB_CAN_CAPTURE[cx];
    const OFFSETS     = SLIDER_OFFSETS[frPiece];
    const len         = OFFSETS.length;
  
    let dir = 0;
  
    while (dir < len) {
  
      const offset = OFFSETS[dir++];
  
      let to = fr + offset;
      while (!b[to]) {
        this.addQuiet(frMove | to);
        to += offset;
      }
  
      const toObj = b[to];
      if (CAN_CAPTURE[toObj])
        this.addNoisy(frMove | (toObj << MOVE_TOOBJ_BITS) | to);
    }
  }
  
  //}}}
  
  //{{{  cacheSave
  
  nodeStruct.prototype.cacheSave = function () {
  
    const l = this.cwtch;
  
    this.hHistoryLimit = l.hHistoryLimit;
    this.rights        = l.rights;
    this.ep            = l.ep;
    this.hLo[0]        = l.hLo[0];
    this.hHi[0]        = l.hHi[0];
  
    //for (let i=0; i < net_h1_size; i++)
      //this.net_h1_a[i] = l.net_h1_a[i];
  
    this.net_h1_a.set(l.net_h1_a);
  
  }
  
  //}}}
  //{{{  cacheUnSave
  
  nodeStruct.prototype.cacheUnsave = function () {
  
    const l = this.cwtch;
  
    l.hHistoryLimit = this.hHistoryLimit;
    l.rights        = this.rights;
    l.ep            = this.ep;
    l.hLo[0]        = this.hLo[0];
    l.hHi[0]        = this.hHi[0];
  
    //for (let i=0; i < net_h1_size; i++)
      //l.net_h1_a[i] = this.net_h1_a[i];
  
    l.net_h1_a.set(this.net_h1_a);
  
  }
  
  //}}}
  
  //}}}
  //{{{  cwtchStruct
  
  //{{{  struct
  
  function cwtchStruct () {
  
    this.quiet   = 0;
    this.ev      = 0;
  
    this.board   = new Uint8Array(144).fill(0);
    this.listPtr = new Uint8Array(144).fill(0);
    this.rights  = 0;
    this.ep      = 0;
    this.turn    = 0;
  
    this.wList = new Uint8Array(17);
    this.bList = new Uint8Array(17);
  
    this.objList = [null, this.wList, this.wList, this.wList, this.wList, this.wList, this.wList, null, null,
                          this.bList, this.bList, this.bList, this.bList, this.bList, this.bList];
  
    this.cxList = [this.wList, this.bList];
  
    this.wHistory = Array(6);
    this.bHistory = Array(6);
  
    this.objHistory = Array(15).fill(null);
  
    this.cxHistory = [this.wHistory, this.bHistory];
  
    this.bestMove    = 0;
    this.outOfTime   = 0;
    this.nodeCount   = 0;
    this.targetDepth = 0;
    this.targetNodes = 0;
    this.finishTime  = 0;
  
    this.nodes = Array(MAX_PLY).fill(null);
  
    this.hLo = new Uint32Array(1);
    this.hHi = new Uint32Array(1);
  
    this.hHistoryLo = new Uint32Array(MAX_PLY * 8);
    this.hHistoryHi = new Uint32Array(MAX_PLY * 8);
  
    this.hHistoryLimit = 0;
    this.hHistoryNext  = 0;
  
    this.hLoTurn   = new Uint32Array(9);
    this.hHiTurn   = new Uint32Array(9);
    this.hLoRights = new Uint32Array(16);
    this.hHiRights = new Uint32Array(16);
    this.hLoEP     = new Uint32Array(144);
    this.hHiEP     = new Uint32Array(144);
    this.hLoObj    = Array(16).fill(null);
    this.hHiObj    = Array(16).fill(null);
  
    this.ttLo    = new Uint32Array(TT_SIZE);
    this.ttHi    = new Uint32Array(TT_SIZE);
    this.ttFlags = new Uint8Array(TT_SIZE);
    this.ttScore = new Int16Array(TT_SIZE);
    this.ttDepth = new Uint8Array(TT_SIZE);
    this.ttMove  = new Uint32Array(TT_SIZE);
    this.ttEval  = new Int16Array(TT_SIZE);
  
    this.net_h1_a = new Float32Array(net_h1_size);
  }
  
  //}}}
  
  //{{{  initOnce
  
  cwtchStruct.prototype.initOnce = function () {
  
    //{{{  nodes
    
    for (let i=0; i < MAX_PLY; i++) {
      this.nodes[i] = new(nodeStruct);
      this.nodes[i].cwtch = this;
      this.nodes[i].ply = i + 1;
    }
    
    for (let i=0; i < MAX_PLY-1; i++) {
      this.nodes[i].child = this.nodes[i+1];
    }
    
    for (let i=1; i < MAX_PLY; i++) {
      this.nodes[i].parent = this.nodes[i-1];
    }
    
    for (let i=2; i < MAX_PLY; i++) {
      this.nodes[i].granny = this.nodes[i-2];
    }
    
    //}}}
    //{{{  hash
    
    for (let i=0; i < this.hLoTurn.length; i++) {
      this.hLoTurn[i] = twisterRand();
      this.hHiTurn[i] = twisterRand();
    }
    
    for (let i=0; i < this.hLoRights.length; i++) {
      this.hLoRights[i] = twisterRand();
      this.hHiRights[i] = twisterRand();
    }
    
    for (let i=0; i < this.hLoEP.length; i++) {
      this.hLoEP[i] = twisterRand();
      this.hHiEP[i] = twisterRand();
    }
    
    for (let i=1; i < this.hLoObj.length; i++) {
      this.hLoObj[i] = new Uint32Array(144);
      this.hHiObj[i] = new Uint32Array(144);
      for (let j=0; j < 144; j++) {
        this.hLoObj[i][j] = twisterRand();
        this.hHiObj[i][j] = twisterRand();
      }
    }
    this.hLoObj[0] = new Uint32Array(144);
    this.hHiObj[0] = new Uint32Array(144);
    for (let j=0; j < 144; j++) {
      this.hLoObj[0][j] = 0;
      this.hHiObj[0][j] = 0;
    }
    
    //}}}
    //{{{  IMAP
    
    for (var i=0; i < 16; i++) {
      IMAP[i] = Array(144).fill(0);
    }
    
    for (var i=0; i < 64; i++) {
      const j = B88[i];
      IMAP[W_PAWN][j]   = 0   + (PAWN-1)   * 64 + i;
      IMAP[W_KNIGHT][j] = 0   + (KNIGHT-1) * 64 + i;
      IMAP[W_BISHOP][j] = 0   + (BISHOP-1) * 64 + i;
      IMAP[W_ROOK][j]   = 0   + (ROOK-1)   * 64 + i;
      IMAP[W_QUEEN][j]  = 0   + (QUEEN-1)  * 64 + i;
      IMAP[W_KING][j]   = 0   + (KING-1)   * 64 + i;
      IMAP[B_PAWN][j]   = 384 + (PAWN-1)   * 64 + i;
      IMAP[B_KNIGHT][j] = 384 + (KNIGHT-1) * 64 + i;
      IMAP[B_BISHOP][j] = 384 + (BISHOP-1) * 64 + i;
      IMAP[B_ROOK][j]   = 384 + (ROOK-1)   * 64 + i;
      IMAP[B_QUEEN][j]  = 384 + (QUEEN-1)  * 64 + i;
      IMAP[B_KING][j]   = 384 + (KING-1)   * 64 + i;
    }
    
    //}}}
    //{{{  history
    
    for (let i=0; i < 6; i++) {
      this.wHistory[i] = new Uint32Array(144);
      this.bHistory[i] = new Uint32Array(144);
    }
    
    this.objHistory[W_PAWN]   = this.wHistory[W_PAWN-1];
    this.objHistory[W_KNIGHT] = this.wHistory[W_KNIGHT-1];
    this.objHistory[W_BISHOP] = this.wHistory[W_BISHOP-1];
    this.objHistory[W_ROOK]   = this.wHistory[W_ROOK-1];
    this.objHistory[W_QUEEN]  = this.wHistory[W_QUEEN-1];
    this.objHistory[W_KING]   = this.wHistory[W_KING-1];
    
    this.objHistory[B_PAWN]   = this.bHistory[W_PAWN-1];    // sic.
    this.objHistory[B_KNIGHT] = this.bHistory[W_KNIGHT-1];
    this.objHistory[B_BISHOP] = this.bHistory[W_BISHOP-1];
    this.objHistory[B_ROOK]   = this.bHistory[W_ROOK-1];
    this.objHistory[B_QUEEN]  = this.bHistory[W_QUEEN-1];
    this.objHistory[B_KING]   = this.bHistory[W_KING-1];
    
    //}}}
  
    //{{{  sanity check
    
    if (net_h1_w[0].length != net_h1_size)
      console.log('h1 w size', net_h1_w[0].length)
    
    if (net_h1_b.length != net_h1_size)
      console.log('h1 b size', net_h1_b.length)
    
    if (net_o_w.length != net_h1_size)
      console.log('o w size', net_o_w.length)
    
    //}}}
  }
  
  //}}}
  //{{{  uciExec
  
  //{{{  bench fens
  
  const bFens = [
    "r3k2r/2pb1ppp/2pp1q2/p7/1nP1B3/1P2P3/P2N1PPP/R2QK2R w KQkq a6 0 14",
    "4rrk1/2p1b1p1/p1p3q1/4p3/2P2n1p/1P1NR2P/PB3PP1/3R1QK1 b - - 2 24",
    "r3qbrk/6p1/2b2pPp/p3pP1Q/PpPpP2P/3P1B2/2PB3K/R5R1 w - - 16 42",
    "6k1/1R3p2/6p1/2Bp3p/3P2q1/P7/1P2rQ1K/5R2 b - - 4 44",
    "8/8/1p2k1p1/3p3p/1p1P1P1P/1P2PK2/8/8 w - - 3 54",
    "7r/2p3k1/1p1p1qp1/1P1Bp3/p1P2r1P/P7/4R3/Q4RK1 w - - 0 36",
    "r1bq1rk1/pp2b1pp/n1pp1n2/3P1p2/2P1p3/2N1P2N/PP2BPPP/R1BQ1RK1 b - - 2 10",
    "3r3k/2r4p/1p1b3q/p4P2/P2Pp3/1B2P3/3BQ1RP/6K1 w - - 3 87",
    "2r4r/1p4k1/1Pnp4/3Qb1pq/8/4BpPp/5P2/2RR1BK1 w - - 0 42",
    "4q1bk/6b1/7p/p1p4p/PNPpP2P/KN4P1/3Q4/4R3 b - - 0 37",
    "2q3r1/1r2pk2/pp3pp1/2pP3p/P1Pb1BbP/1P4Q1/R3NPP1/4R1K1 w - - 2 34",
    "1r2r2k/1b4q1/pp5p/2pPp1p1/P3Pn2/1P1B1Q1P/2R3P1/4BR1K b - - 1 37",
    "r3kbbr/pp1n1p1P/3ppnp1/q5N1/1P1pP3/P1N1B3/2P1QP2/R3KB1R b KQkq b3 0 17",
    "8/6pk/2b1Rp2/3r4/1R1B2PP/P5K1/8/2r5 b - - 16 42",
    "1r4k1/4ppb1/2n1b1qp/pB4p1/1n1BP1P1/7P/2PNQPK1/3RN3 w - - 8 29",
    "8/p2B4/PkP5/4p1pK/4Pb1p/5P2/8/8 w - - 29 68",
    "3r4/ppq1ppkp/4bnp1/2pN4/2P1P3/1P4P1/PQ3PBP/R4K2 b - - 2 20",
    "5rr1/4n2k/4q2P/P1P2n2/3B1p2/4pP2/2N1P3/1RR1K2Q w - - 1 49",
    "1r5k/2pq2p1/3p3p/p1pP4/4QP2/PP1R3P/6PK/8 w - - 1 51",
    "q5k1/5ppp/1r3bn1/1B6/P1N2P2/BQ2P1P1/5K1P/8 b - - 2 34",
    "r1b2k1r/5n2/p4q2/1ppn1Pp1/3pp1p1/NP2P3/P1PPBK2/1RQN2R1 w - - 0 22",
    "r1bqk2r/pppp1ppp/5n2/4b3/4P3/P1N5/1PP2PPP/R1BQKB1R w KQkq - 0 5",
    "r1bqr1k1/pp1p1ppp/2p5/8/3N1Q2/P2BB3/1PP2PPP/R3K2n b Q - 1 12",
    "r1bq2k1/p4r1p/1pp2pp1/3p4/1P1B3Q/P2B1N2/2P3PP/4R1K1 b - - 2 19",
    "r4qk1/6r1/1p4p1/2ppBbN1/1p5Q/P7/2P3PP/5RK1 w - - 2 25",
    "r7/6k1/1p6/2pp1p2/7Q/8/p1P2K1P/8 w - - 0 32",
    "r3k2r/ppp1pp1p/2nqb1pn/3p4/4P3/2PP4/PP1NBPPP/R2QK1NR w KQkq - 1 5",
    "3r1rk1/1pp1pn1p/p1n1q1p1/3p4/Q3P3/2P5/PP1NBPPP/4RRK1 w - - 0 12",
    "5rk1/1pp1pn1p/p3Brp1/8/1n6/5N2/PP3PPP/2R2RK1 w - - 2 20",
    "8/1p2pk1p/p1p1r1p1/3n4/8/5R2/PP3PPP/4R1K1 b - - 3 27",
    "8/4pk2/1p1r2p1/p1p4p/Pn5P/3R4/1P3PP1/4RK2 w - - 1 33",
    "8/5k2/1pnrp1p1/p1p4p/P6P/4R1PK/1P3P2/4R3 b - - 1 38",
    "8/8/1p1kp1p1/p1pr1n1p/P6P/1R4P1/1P3PK1/1R6 b - - 15 45",
    "8/8/1p1k2p1/p1prp2p/P2n3P/6P1/1P1R1PK1/4R3 b - - 5 49",
    "8/8/1p4p1/p1p2k1p/P2npP1P/4K1P1/1P6/3R4 w - - 6 54",
    "8/8/1p4p1/p1p2k1p/P2n1P1P/4K1P1/1P6/6R1 b - - 6 59",
    "8/5k2/1p4p1/p1pK3p/P2n1P1P/6P1/1P6/4R3 b - - 14 63",
    "8/1R6/1p1K1kp1/p6p/P1p2P1P/6P1/1Pn5/8 w - - 0 67",
    "1rb1rn1k/p3q1bp/2p3p1/2p1p3/2P1P2N/PP1RQNP1/1B3P2/4R1K1 b - - 4 23",
    "4rrk1/pp1n1pp1/q5p1/P1pP4/2n3P1/7P/1P3PB1/R1BQ1RK1 w - - 3 22",
    "r2qr1k1/pb1nbppp/1pn1p3/2ppP3/3P4/2PB1NN1/PP3PPP/R1BQR1K1 w - - 4 12",
    "2r2k2/8/4P1R1/1p6/8/P4K1N/7b/2B5 b - - 0 55",
    "6k1/5pp1/8/2bKP2P/2P5/p4PNb/B7/8 b - - 1 44",
    "2rqr1k1/1p3p1p/p2p2p1/P1nPb3/2B1P3/5P2/1PQ2NPP/R1R4K w - - 3 25",
    "r1b2rk1/p1q1ppbp/6p1/2Q5/8/4BP2/PPP3PP/2KR1B1R b - - 2 14",
    "6r1/5k2/p1b1r2p/1pB1p1p1/1Pp3PP/2P1R1K1/2P2P2/3R4 w - - 1 36",
    "rnbqkb1r/pppppppp/5n2/8/2PP4/8/PP2PPPP/RNBQKBNR b KQkq c3 0 2",
    "2rr2k1/1p4bp/p1q1p1p1/4Pp1n/2PB4/1PN3P1/P3Q2P/2RR2K1 w - f6 0 20",
    "3br1k1/p1pn3p/1p3n2/5pNq/2P1p3/1PN3PP/P2Q1PB1/4R1K1 w - - 0 23",
    "2r2b2/5p2/5k2/p1r1pP2/P2pB3/1P3P2/K1P3R1/7R w - - 23 93"
  ];
  
  //}}}
  //{{{  perft fens
  
  const pFens = [
    ['fen rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR             w KQkq -  0 1', 0, 1,         'cpw-pos1-0'],
    ['fen rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR             w KQkq -  0 1', 1, 20,        'cpw-pos1-1'],
    ['fen rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR             w KQkq -  0 1', 2, 400,       'cpw-pos1-2'],
    ['fen rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR             w KQkq -  0 1', 3, 8902,      'cpw-pos1-3'],
    ['fen rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR             w KQkq -  0 1', 4, 197281,    'cpw-pos1-4'],
    ['fen rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR             w KQkq -  0 1', 5, 4865609,   'cpw-pos1-5'],
    ['fen 4k3/8/8/8/8/8/R7/R3K2R                                  w Q    -  0 1', 3, 4729,      'castling-2'],
    ['fen 4k3/8/8/8/8/8/R7/R3K2R                                  w K    -  0 1', 3, 4686,      'castling-3'],
    ['fen 4k3/8/8/8/8/8/R7/R3K2R                                  w -    -  0 1', 3, 4522,      'castling-4'],
    ['fen r3k2r/r7/8/8/8/8/8/4K3                                  b kq   -  0 1', 3, 4893,      'castling-5'],
    ['fen r3k2r/r7/8/8/8/8/8/4K3                                  b q    -  0 1', 3, 4729,      'castling-6'],
    ['fen r3k2r/r7/8/8/8/8/8/4K3                                  b k    -  0 1', 3, 4686,      'castling-7'],
    ['fen r3k2r/r7/8/8/8/8/8/4K3                                  b -    -  0 1', 3, 4522,      'castling-8'],
    ['fen rnbqkb1r/pp1p1ppp/2p5/4P3/2B5/8/PPP1NnPP/RNBQK2R        w KQkq -  0 1', 1, 42,        'cpw-pos5-1'],
    ['fen rnbqkb1r/pp1p1ppp/2p5/4P3/2B5/8/PPP1NnPP/RNBQK2R        w KQkq -  0 1', 2, 1352,      'cpw-pos5-2'],
    ['fen rnbqkb1r/pp1p1ppp/2p5/4P3/2B5/8/PPP1NnPP/RNBQK2R        w KQkq -  0 1', 3, 53392,     'cpw-pos5-3'],
    ['fen r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq -  0 1', 1, 48,        'cpw-pos2-1'],
    ['fen r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq -  0 1', 2, 2039,      'cpw-pos2-2'],
    ['fen r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq -  0 1', 3, 97862,     'cpw-pos2-3'],
    ['fen 8/2p5/3p4/KP5r/1R3p1k/8/4P1P1/8                         w -    -  0 1', 5, 674624,    'cpw-pos3-5'],
    ['fen n1n5/PPPk4/8/8/8/8/4Kppp/5N1N                           b -    -  0 1', 1, 24,        'prom-1    '],
    ['fen 8/5bk1/8/2Pp4/8/1K6/8/8                                 w -    d6 0 1', 6, 824064,    'ccc-1     '],
    ['fen 8/8/1k6/8/2pP4/8/5BK1/8                                 b -    d3 0 1', 6, 824064,    'ccc-2     '],
    ['fen 8/8/1k6/2b5/2pP4/8/5K2/8                                b -    d3 0 1', 6, 1440467,   'ccc-3     '],
    ['fen 8/5k2/8/2Pp4/2B5/1K6/8/8                                w -    d6 0 1', 6, 1440467,   'ccc-4     '],
    ['fen 5k2/8/8/8/8/8/8/4K2R                                    w K    -  0 1', 6, 661072,    'ccc-5     '],
    ['fen 4k2r/8/8/8/8/8/8/5K2                                    b k    -  0 1', 6, 661072,    'ccc-6     '],
    ['fen 3k4/8/8/8/8/8/8/R3K3                                    w Q    -  0 1', 6, 803711,    'ccc-7     '],
    ['fen r3k3/8/8/8/8/8/8/3K4                                    b q    -  0 1', 6, 803711,    'ccc-8     '],
    ['fen r3k2r/1b4bq/8/8/8/8/7B/R3K2R                            w KQkq -  0 1', 4, 1274206,   'ccc-9     '],
    ['fen r3k2r/7b/8/8/8/8/1B4BQ/R3K2R                            b KQkq -  0 1', 4, 1274206,   'ccc-10    '],
    ['fen r3k2r/8/3Q4/8/8/5q2/8/R3K2R                             b KQkq -  0 1', 4, 1720476,   'ccc-11    '],
    ['fen r3k2r/8/5Q2/8/8/3q4/8/R3K2R                             w KQkq -  0 1', 4, 1720476,   'ccc-12    '],
    ['fen 2K2r2/4P3/8/8/8/8/8/3k4                                 w -    -  0 1', 6, 3821001,   'ccc-13    '],
    ['fen 3K4/8/8/8/8/8/4p3/2k2R2                                 b -    -  0 1', 6, 3821001,   'ccc-14    '],
    ['fen 8/8/1P2K3/8/2n5/1q6/8/5k2                               b -    -  0 1', 5, 1004658,   'ccc-15    '],
    ['fen 5K2/8/1Q6/2N5/8/1p2k3/8/8                               w -    -  0 1', 5, 1004658,   'ccc-16    '],
    ['fen 4k3/1P6/8/8/8/8/K7/8                                    w -    -  0 1', 6, 217342,    'ccc-17    '],
    ['fen 8/k7/8/8/8/8/1p6/4K3                                    b -    -  0 1', 6, 217342,    'ccc-18    '],
    ['fen 8/P1k5/K7/8/8/8/8/8                                     w -    -  0 1', 6, 92683,     'ccc-19    '],
    ['fen 8/8/8/8/8/k7/p1K5/8                                     b -    -  0 1', 6, 92683,     'ccc-20    '],
    ['fen K1k5/8/P7/8/8/8/8/8                                     w -    -  0 1', 6, 2217,      'ccc-21    '],
    ['fen 8/8/8/8/8/p7/8/k1K5                                     b -    -  0 1', 6, 2217,      'ccc-22    '],
    ['fen 8/k1P5/8/1K6/8/8/8/8                                    w -    -  0 1', 7, 567584,    'ccc-23    '],
    ['fen 8/8/8/8/1k6/8/K1p5/8                                    b -    -  0 1', 7, 567584,    'ccc-24    '],
    ['fen 8/8/2k5/5q2/5n2/8/5K2/8                                 b -    -  0 1', 4, 23527,     'ccc-25    '],
    ['fen 8/5k2/8/5N2/5Q2/2K5/8/8                                 w -    -  0 1', 4, 23527,     'ccc-26    '],
    ['fen rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR             w KQkq -  0 1', 6, 119060324, 'cpw-pos1-6'],
    ['fen 8/p7/8/1P6/K1k3p1/6P1/7P/8                              w -    -  0 1', 8, 8103790,   'jvm-7     '],
    ['fen n1n5/PPPk4/8/8/8/8/4Kppp/5N1N                           b -    -  0 1', 6, 71179139,  'jvm-8     '],
    ['fen r3k2r/p6p/8/B7/1pp1p3/3b4/P6P/R3K2R                     w KQkq -  0 1', 6, 77054993,  'jvm-9     '],
    ['fen 8/5p2/8/2k3P1/p3K3/8/1P6/8                              b -    -  0 1', 8, 64451405,  'jvm-11    '],
    ['fen r3k2r/pb3p2/5npp/n2p4/1p1PPB2/6P1/P2N1PBP/R3K2R         w KQkq -  0 1', 5, 29179893,  'jvm-12    '],
    ['fen 8/2p5/3p4/KP5r/1R3p1k/8/4P1P1/8                         w -    -  0 1', 7, 178633661, 'jvm-10    '],
    ['fen r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq -  0 1', 5, 193690690, 'jvm-6     '],
    ['fen 8/2pkp3/8/RP3P1Q/6B1/8/2PPP3/rb1K1n1r                   w -    -  0 1', 6, 181153194, 'ob1       '],
    ['fen rnbqkb1r/ppppp1pp/7n/4Pp2/8/8/PPPP1PPP/RNBQKBNR         w KQkq f6 0 1', 6, 244063299, 'jvm-5     '],
    ['fen 8/2ppp3/8/RP1k1P1Q/8/8/2PPP3/rb1K1n1r                   w -    -  0 1', 6, 205552081, 'ob2       '],
    ['fen 8/8/3q4/4r3/1b3n2/8/3PPP2/2k1K2R                        w K    -  0 1', 6, 207139531, 'ob3       '],
    ['fen 4r2r/RP1kP1P1/3P1P2/8/8/3ppp2/1p4p1/4K2R                b K    -  0 1', 6, 314516438, 'ob4       '],
    ['fen r3k2r/8/8/8/3pPp2/8/8/R3K1RR                            b KQkq e3 0 1', 6, 485647607, 'jvm-1     '],
    ['fen 8/3K4/2p5/p2b2r1/5k2/8/8/1q6                            b -    -  0 1', 7, 493407574, 'jvm-4     '],
    ['fen r3k2r/Pppp1ppp/1b3nbN/nP6/BBP1P3/q4N2/Pp1P2PP/R2Q1RK1   w kq   -  0 1', 6, 706045033, 'jvm-2     '],
    ['fen r6r/1P4P1/2kPPP2/8/8/3ppp2/1p4p1/R3K2R                  w KQ   -  0 1', 6, 975944981, 'ob5       ']
  ];
  
  //}}}
  
  cwtchStruct.prototype.uciExec = function (e) {
  
    const messageList = e.split('\n');
  
    for (let messageNum=0; messageNum < messageList.length; messageNum++ ) {
  
      let message = messageList[messageNum].replace(/(\r\n|\n|\r)/gm,"");
  
      message = message.trim();
      message = message.replace(/\s+/g,' ');
  
      const tokens  = message.split(' ');
      const command = tokens[0];
  
      if (!command)
        continue;
  
      switch (command) {
  
        case 'position':
        case 'p': {
          //{{{  position
          
          switch (tokens[1]) {
          
            case 'startpos':
            case 's':
          
              this.position('rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR', 'w', 'KQkq', '-');
              if (tokens[2] == 'moves') {
                for (let i=3; i < tokens.length; i++)
                  this.playMove(tokens[i]);
              }
              break;
          
            case 'fen':
            case 'f':
          
              this.position(tokens[2], tokens[3], tokens[4], tokens[5]);
              if (tokens[8] == 'moves') {
                for (let i=9; i < tokens.length; i++)
                  this.playMove(tokens[i]);
              }
              break;
          
            default:
          
              console.log(command, tokens[1], 'not implemented');
              break;
          }
          
          break;
          
          //}}}
        }
  
        case 'go':
        case 'g': {
          //{{{  go
          
          const slop = 1;
          
          let wTime     = 0;
          let bTime     = 0;
          let wInc      = 0;
          let bInc      = 0;
          let moveTime  = 0;
          let movesToGo = 0;
          let depth     = 0;
          let nodes     = 0;
          
          let i = 1;
          
          while (i < tokens.length) {
            switch (tokens[i]) {
              case 'depth':
              case 'd': {
                depth = parseInt(tokens[i+1]);
                i += 2;
                break;
              }
              case 'nodes': {
                nodes = parseInt(tokens[i+1]);
                i += 2;
                break;
              }
              case 'movestogo': {
                movesToGo = parseInt(tokens[i+1]);
                i += 2;
                break;
              }
              case 'movetime':
              case 'mt': {
                moveTime = parseInt(tokens[i+1]);
                i += 2;
                break;
              }
              case 'winc': {
                wInc = parseInt(tokens[i+1]);
                i += 2;
                break;
              }
              case 'binc': {
                bInc = parseInt(tokens[i+1]);
                i += 2;
                break;
              }
              case 'wtime': {
                wTime = parseInt(tokens[i+1]);
                i += 2;
                break;
              }
              case 'btime': {
                bTime = parseInt(tokens[i+1]);
                i += 2;
                break;
              }
              default: {
                console.log('unknown go token', tokens[i]);
                i++;
              }
            }
          }
          
          if (depth)
            this.targetDepth = depth;
          else
            this.targetDepth = MAX_PLY - 1;
          
          if (nodes)
            this.targetNodes = nodes;
          else
            this.targetNodes = 0;
          
          if (moveTime > 0)
            this.finishTime = Date.now() + moveTime + slop;
          
          else {
          
            if (movesToGo)
              movesToGo += 2;
            else
              movesToGo = 30;
          
            if (wTime && this.turn == WHITE)
              this.finishTime = Date.now() + 0.95 * (wTime/movesToGo + wInc) + slop;
            else if (bTime && this.turn == BLACK)
              this.finishTime = Date.now() + 0.95 * (bTime/movesToGo + bInc) + slop;
            else
              this.finishTime = 0;
          }
          
          this.go();
          
          break;
          
          //}}}
        }
  
        case 'uci': {
          //{{{  uci
          
          uciLog('id name cwtch 0');
          uciLog('id author Colin Jenkins');
          uciLog('uciok');
          
          break;
          
          //}}}
        }
  
        case 'isready': {
          //{{{  isready
          
          uciLog('readyok');
          
          break;
          
          //}}}
        }
  
        case 'stop': {
          //{{{  stop
          
          break;
          
          //}}}
        }
  
        case 'ucinewgame':
        case 'u': {
          //{{{  ucinewgame
          
          this.newGame();
          
          break;
          
          //}}}
        }
  
        case 'board':
        case 'b': {
          //{{{  board
          
          this.printBoard();
          
          break;
          
          //}}}
        }
  
        case 'draw':
        case 'd': {
          //{{{  draw
          
          console.log(this.isDraw());
          
          break;
          
          //}}}
        }
  
        case 'fen':
        case 'f': {
          //{{{  fen
          
          console.log(this.fen());
          
          break;
          
          //}}}
        }
  
        case 'hash':
        case 'h': {
          //{{{  hash
          
          console.log(this.hHi[0],this.hLo[0]);
          console.log(this.hHistoryLimit,this.hHistoryNext);
          
          break;
          
          //}}}
        }
  
        case 'eval':
        case 'e': {
          //{{{  eval
          
          const e1 = this.netSlowEval();
          const e2 = this.netFastEval();
          
          console.log('slow',e1,'fast',e2);
          
          break;
          
          //}}}
        }
  
        case 'net':
        case 'n': {
          //{{{  net info
          
          console.log('h1 size', net_h1_size);
          console.log('batch size', net_batch_size);
          console.log('activation', net_activation);
          console.log('stretch', net_stretch);
          console.log('epochs', net_epochs);
          console.log('loss', net_loss);
          
          let maxWeight = -9999;
          let minWeight = 9999;
          
          for (let i=0; i < net_h1_w.length; i++) {
            for (let j=0; j < net_h1_size; j++) {
              const w = Math.abs(net_h1_w[i][j]);
              if (w < minWeight)
                minWeight = w;
              if (w > maxWeight)
                maxWeight = w;
            }
          }
          
          console.log('min h1 weight', minWeight);
          console.log('max h1 weight', maxWeight);
          
          maxWeight = -9999;
          minWeight = 9999;
          
          for (let j=0; j < net_h1_size; j++) {
            const w = Math.abs(net_o_w[j]);
            if (w < minWeight)
              minWeight = w;
            if (w > maxWeight)
              maxWeight = w;
          }
          
          console.log('min o weight', minWeight);
          console.log('max o weight', maxWeight);
          
          break;
          
          //}}}
        }
  
        case 'quit':
        case 'q': {
          //{{{  quit
          
          process.exit();
          
          break;
          
          //}}}
        }
  
        case 'perft': {
          //{{{  perft
          
          const depth  = parseInt(tokens[1]);
          const t      = Date.now();
          const pmoves = perft(depth);
          
          console.log(pmoves,'moves ',Date.now()-t,'ms');
          
          break;
          
          //}}}
        }
  
        case 'bench': {
          //{{{  bench
          
          this.quiet = 1;
          
          let nodes = 0;
          
          const t1 = Date.now();
          
          for (let i=0; i < bFens.length; i++) {
          
            process.stdout.write(i+'\r');
          
            const fen = bFens[i];
          
            this.uciExec('ucinewgame');
            this.uciExec('position fen ' + fen);
            this.uciExec('go depth 10');
          
            nodes += this.nodeCount;
          }
          
          const t2  = Date.now();
          const sec = (Math.round((t2-t1)/100)/10);
          
          console.log(sec,nodes);
          
          this.quiet = 0;
          
          break;
          
          //}}}
        }
  
        case 'et': {
          //{{{  eval tests
          
          for (let i=0; i < bFens.length; i++) {
          
            const fen = bFens[i];
          
            this.uciExec('ucinewgame');
            this.uciExec('position fen ' + fen);
            //this.uciExec('go depth 3')
            this.uciExec('e');
          
          }
          
          break;
          
          //}}}
        }
  
        case 'pt': {
          //{{{  perft tests
          
          let num = 0;
          
          if (tokens.length > 1)
            num = parseInt(tokens[1]);
          else
            num = pFens.length;
          
          let errs = 0;
          
          const t1 = Date.now();
          
          for (let i=0; i < num; i++) {
          
            const p = pFens[i];
          
            const fen   = p[0];
            const depth = p[1];
            const moves = p[2];
            const id    = p[3];
          
            this.uciExec('ucinewgame');
            this.uciExec('position ' + fen);
          
            const pmoves = this.perft(this.nodes[0], depth);
            const err    = pmoves - moves;
          
            errs += err;
          
            const t2  = Date.now();
            const sec = (''+Math.round((t2-t1)/100)/10).padEnd(6);
          
            console.log(sec,id,fen,depth,moves,pmoves,err,errs);
          }
          
          const t2  = Date.now();
          const sec = Math.round((t2-t1)/100)/10;
          
          console.log(sec, 'sec', errs, 'perft errors');
          
          break;
          
          //}}}
        }
  
        default:
          //{{{  ?
          
          console.log(command, '?');
          
          break;
          
          //}}}
      }
    }
  }
  
  //}}}
  
  //{{{  go
  //
  // https://github.com/AndyGrant/Ethereal/blob/master/src/search.c#L274
  //
  
  cwtchStruct.prototype.go = function () {
  
    this.bestMove  = 0;
    this.outOfTime = 0;
    this.nodeCount = 0;
  
    let score = 0;
    let alpha = 0;
    let beta  = 0;
    let delta = 0;
  
    for (let depth=1; depth <= this.targetDepth; depth++) {
  
      alpha = -MATE;
      beta  = MATE;
      delta = 10;
  
      if (depth >= 4) {
        alpha = Math.max(-MATE, score - delta);
        beta  = Math.min(MATE,  score + delta);
      }
  
      while (1) {
  
        score = this.search(this.nodes[0], alpha, beta, depth);
  
        if (this.outOfTime)
          break;
  
        if (score > alpha && score < beta) {
          uciLog('info', 'depth', depth, 'nodes', this.nodeCount, 'score', score, 'pv', formatMove(this.bestMove));
          break;
        }
  
        delta += delta / 2 | 0;
  
        if (score <= alpha) {
          uciLog('info', 'depth', depth, 'nodes', this.nodeCount, 'lowerbound', score);
          beta  = Math.min(MATE, ((alpha + beta) / 2) | 0);
          alpha = Math.max(-MATE, score - delta);
        }
        else if (score >= beta) {
          uciLog('info', 'depth', depth, 'nodes', this.nodeCount, 'upperbound', score);
          alpha = Math.max(-MATE, ((alpha + beta) / 2) | 0);
          beta  = Math.min(MATE,  score + delta);
        }
      }
  
      if (this.outOfTime)
        break;
    }
  
    uciLog('bestmove', formatMove(this.bestMove));
  }
  
  //}}}
  //{{{  search
  
  cwtchStruct.prototype.search = function (node, alpha, beta, depth) {
  
    //{{{  housekeeping
    
    node.child.no = 0;
    
    if (this.areWeOutOfTime() || !node.child) {
    
      this.outOfTime = 1;
    
      return 0;
    }
    
    //}}}
    //{{{  mate distance pruning
    
    /* hack
    
    if (!rootNode) {
    
      let matingValue = MATE - node.ply;
    
      if (matingValue < beta) {
         beta = matingValue;
         if (alpha >= matingValue)
           return matingValue;
      }
    
      matingValue = -MATE + node.ply;
    
      if (matingValue > alpha) {
         alpha = matingValue;
         if (beta <= matingValue)
           return matingValue;
      }
    }
    
    */
    
    //}}}
  
    const turn     = this.turn;
    const nextTurn = colourToggle(turn);
    const cx       = colourIndex(turn);
    const list     = this.cxList[cx];
    const inCheck  = this.isKingAttacked(list[LKING], nextTurn);
  
  
    if (depth <= 0 && !inCheck)
      return this.qsearch(node.child, alpha, beta, depth);
  
    this.nodeCount++;
  
    depth = Math.max(0, depth);
  
    const rootNode = !node.parent;
    const pvNode   = alpha != (beta - 1);
    const oAlpha   = alpha;
  
    if (!rootNode && this.isDraw())
      return 0;
  
    //{{{  check tt
    
    const ttIndex = this.ttIndex();
    
    node.ttMove = 0;
    
    if (ttIndex) {
    
      const ttFlags = this.ttFlags[ttIndex];
      const ttScore = this.ttScore[ttIndex];
    
      if (this.ttDepth[ttIndex] >= depth && (depth == 0 || !pvNode)) {
        if (ttFlags == TT_EXACT ||
           (ttFlags == TT_BETA  && ttScore >= beta) ||
           (ttFlags == TT_ALPHA && ttScore <= alpha)) {
          return ttScore;
        }
      }
    
      node.ttMove = this.ttMove[ttIndex];
    }
    
    //{{{  no tt move
    //
    // https://www.talkchess.com/forum3/viewtopic.php?f=7&t=74769
    //
    
    if (!node.ttMove && depth > 3)
      depth -= 1;
    
    //}}}
    
    //}}}
    //{{{  improving?
    
    let improv = 0;
    let ev     = 0
    
    if (ttIndex)
      ev = this.ttEval[ttIndex];
    else
      ev = this.netFastEval();
    
    node.ev = ev;
    
    if (node.granny && (ev - node.granny.ev) > 0)
      improv = 1; //optimize
    
    //}}}
    //{{{  alpha pruning
    
    if (!inCheck && !rootNode && !pvNode && depth <= 5 && (ev + 1000) < alpha) {
      return ev;
    }
    
    //}}}
    //{{{  beta pruning
    
    if (!inCheck && !rootNode && !pvNode && depth <= 5 && (ev - depth * 75) >= beta) {
      return ev;
    }
    
    //}}}
  
    node.cacheSave();
  
    let score = 0;
  
    //{{{  null move pruning
    
    if (!node.no && !inCheck && !rootNode && !pvNode && depth > 2 && ev > beta) {
    
      this.hashEP();
      this.ep = 0;
      this.hashEP();
    
      this.hashTurn();
      this.turn = colourToggle(this.turn);
      this.hashTurn();
    
      node.child.no = 1;
    
      score = -this.search(node.child, -beta, -beta+1, depth-4);
    
      node.cacheUnsave();
      this.turn = colourToggle(this.turn);
    
      if (this.outOfTime)
        return 0;
    
      if (score >= beta) {
        return beta;
      }
    }
    
    //}}}
  
    let bestScore = -MATE;
    let bestMove  = 0;
  
    let move   = 0;
    let played = 0;
    let quiets = 0;
  
    node.initMoveGen(ALL_MOVES, inCheck);
  
    while (move = node.getNextMove()) {
  
      //{{{  late move pruning
      
      if (node.stage == 5)
        quiets++;
      
      let cutoff = 4 + depth * depth;
      if (!improv)
        cutoff = cutoff / 2 | 0;
      
      if (played && quiets > cutoff && !inCheck && !rootNode && !pvNode && depth <= 8) {
        continue;
      }
      
      //}}}
      //{{{  futility pruning
      
      if (played && node.stage == 5 && !inCheck && !rootNode && !pvNode && depth <= 2 && (ev + depth * depth * 100) < alpha) {
        continue;
      }
      
      //}}}
  
      //{{{  make move
      
      if (!(move & MOVE_LEGAL_MASK)) {
      
        this.makeMoveBare(move);
      
        if (this.isKingAttacked(list[LKING], nextTurn)) {
          this.unmakeMoveBare(move);
          //node.cacheUnsave();
          continue;
        }
      
        this.unmakeMoveBare(move);
        this.makeMove(move);
      }
      
      else {
        this.makeMove(move);
      }
      
      //}}}
  
      played++;
  
      //{{{  reduce/extend?
      
      let R = 0;
      
      if (played > 4 && depth >= 3) {
      
        R = 1 + depth/5 + played/20 | 0;
      
        if (pvNode)
          R -= 1;
      
        if (inCheck) // hack && depth > 5
          R -= 1;
      
        if (node.stage < 5)
          R -= 1;
      
        if (moveIsNoisy(node.ttMove))
          R += 1;
      
        //if (moveIsNoisy(move))
          //R += 1;
      
        if (!improv)
          R += 1;
      
        Math.max(0,R);
      
      }
      
      //}}}
  
      if (pvNode) {
        if (played == 1) {
          score = -this.search(node.child, -beta, -alpha, depth-1);
        }
        else {
          score = -this.search(node.child, -alpha-1, -alpha, depth-1-R);
          if (!this.outOfTime && score > alpha) {
            score = -this.search(node.child, -beta, -alpha, depth-1);
          }
        }
      }
      else {
        score = -this.search(node.child, -beta, -alpha, depth-1-R);
        if (!this.outOfTime && R && score > alpha)
          score = -this.search(node.child, -beta, -alpha, depth-1);
      }
  
      this.unmakeMove(move);
      node.cacheUnsave();
  
      if (this.outOfTime)
        return 0;
  
      if (score > bestScore) {
        bestScore = score;
        bestMove  = move;
        if (bestScore > alpha) {
          alpha = bestScore;
          if (rootNode) {
            this.bestMove = bestMove;
          }
          if (bestScore >= beta) {
            if (moveIsQuiet(move))
              node.killer = moveClean(move);
            this.ttPut(TT_BETA, depth, bestScore, bestMove, ev);
            this.historyAdd(bestMove, depth*depth)
            return bestScore;
          }
        }
      }
    }
  
    if (!played)
      return inCheck ? -MATE + node.ply : 0;
  
    if (alpha > oAlpha)
      this.ttPut(TT_EXACT, depth, bestScore, bestMove, ev);
    else
      this.ttPut(TT_ALPHA, depth, bestScore, bestMove, ev);
  
    return bestScore;
  }
  
  //}}}
  //{{{  qsearch
  
  cwtchStruct.prototype.qsearch = function (node, alpha, beta, depth) {
  
    //{{{  housekeeping
    
    this.nodeCount++;
    
    if (this.areWeOutOfTime() || !node.child) {
    
      this.outOfTime = 1;
    
      return this.netFastEval();
    }
    
    //}}}
  
    //{{{  check TT
    
    node.ttMove = 0;
    
    const i = this.ttIndex();
    
    if (i) {
    
      const ttFlags = this.ttFlags[i];
      const ttScore = this.ttScore[i];
      const ttMove  = this.ttMove[i];
    
      if (ttFlags == TT_EXACT ||
         (ttFlags == TT_BETA  && ttScore >= beta) ||
         (ttFlags == TT_ALPHA && ttScore <= alpha)) {
        return ttScore;
      }
    
      if (moveIsNoisy(ttMove))
        node.ttMove = ttMove;
    
    }
    
    //}}}
  
    const e = this.netFastEval();
  
    if (e >= beta)
      return e;
  
    if (alpha < e)
      alpha = e;
  
    const turn     = this.turn;
    const nextTurn = colourToggle(turn);
    const cx       = colourIndex(turn);
    const list     = this.cxList[cx];
    const inCheck  = this.isKingAttacked(list[LKING], nextTurn);
  
    let move   = 0;
    let score  = 0;
    let played = 0;
  
    node.cacheSave();
    node.initMoveGen(NOISY_MOVES_ONLY, inCheck);
  
    while (move = node.getNextMove()) {
  
      if (moveIsQuiet(move))
        console.log('quiet q move', formatMove(move)); //hack
  
      //{{{  make move
      
      if (!(move & MOVE_LEGAL_MASK)) {
      
        this.makeMoveBare(move);
      
        if (this.isKingAttacked(list[LKING], nextTurn)) {
          this.unmakeMoveBare(move);
          //node.cacheUnsave();
          continue;
        }
      
        this.unmakeMoveBare(move);
        this.makeMove(move);
      }
      
      else {
        this.makeMove(move);
      }
      
      //}}}
  
      played++;
  
      score = -this.qsearch(node.child, -beta, -alpha, depth-1);
  
      this.unmakeMove(move);
      node.cacheUnsave();
  
      if (this.outOfTime)
        return alpha;
  
      if (score > alpha) {
        alpha = score;
        if (score >= beta) {
          return score;
        }
      }
    }
  
    return alpha;
  }
  
  //}}}
  //{{{  perft
  
  cwtchStruct.prototype.perft = function (node, depth) {
  
    if (depth == 0)
      return 1;
  
    const turn     = this.turn;
    const nextTurn = colourToggle(turn);
    const cx       = colourIndex(turn);
    const list     = this.cxList[cx];
    const inCheck  = this.isKingAttacked(list[LKING], nextTurn);
  
    let count = 0;
    let move  = 0;
  
    node.ttMove = 0;
  
    node.cacheSave();
    node.initMoveGen(ALL_MOVES, inCheck);
  
    while (move = node.getNextMove()) {
  
      //{{{  make move
      
      if (!(move & MOVE_LEGAL_MASK)) {
      
        this.makeMoveBare(move);
      
        if (this.isKingAttacked(list[LKING], nextTurn)) {
          this.unmakeMoveBare(move);
          //node.cacheUnsave();
          continue;
        }
      
        this.unmakeMoveBare(move);
        this.makeMove(move);
      }
      
      else {
        this.makeMove(move);
      }
      
      //}}}
  
      count += this.perft(node.child, depth-1);
  
      this.unmakeMove(move);
      node.cacheUnsave();
    }
  
    return count;
  }
  
  //}}}
  
  //{{{  position
  
  cwtchStruct.prototype.position = function (sb, st, sr, sep) {
  
    const b = this.board;
  
    this.listReset();
    this.netReset();
  
    b.fill(EDGE);
  
    for (let i=0; i < 64; i++)
      b[B88[i]] = 0;
  
    //{{{  board board
    
    let sq   = 0;
    let rank = 7;
    let file = 0;
    
    for (let i=0; i < sb.length; i++) {
    
      const ch   = sb.charAt(i);
      const sq88 = (7-rank) * 8 + file;
      const sq   = B88[sq88];
    
      switch (ch) {
        //{{{  1-8
        
        case '1':
          file += 1;
          break;
        case '2':
          file += 2;
          break;
        case '3':
          file += 3;
          break;
        case '4':
          file += 4;
          break;
        case '5':
          file += 5;
          break;
        case '6':
          file += 6;
          break;
        case '7':
          file += 7;
          break;
        case '8':
          break;
        
        //}}}
        //{{{  /
        
        case '/':
          rank--;
          file = 0;
          break;
        
        //}}}
        //{{{  white
        
        case 'P':
          b[sq] = W_PAWN;
          this.netAdd(W_PAWN, sq);
          this.listExtend(W_PAWN,sq);
          file++;
          break;
        case 'N':
          b[sq] = W_KNIGHT;
          this.netAdd(W_KNIGHT, sq);
          this.listExtend(W_KNIGHT,sq);
          file++;
          break;
        case 'B':
          b[sq] = W_BISHOP;
          this.netAdd(W_BISHOP, sq);
          this.listExtend(W_BISHOP,sq);
          file++;
          break;
        case 'R':
          b[sq] = W_ROOK;
          this.netAdd(W_ROOK, sq);
          this.listExtend(W_ROOK,sq);
          file++;
          break;
        case 'Q':
          b[sq] = W_QUEEN;
          this.netAdd(W_QUEEN, sq);
          this.listExtend(W_QUEEN,sq);
          file++;
          break;
        case 'K':
          b[sq] = W_KING;
          this.netAdd(W_KING, sq);
          this.listExtend(W_KING,sq);
          file++;
          break;
        
        //}}}
        //{{{  black
        
        case 'p':
          b[sq] = B_PAWN;
          this.netAdd(B_PAWN, sq);
          this.listExtend(B_PAWN,sq);
          file++;
          break;
        case 'n':
          b[sq] = B_KNIGHT;
          this.netAdd(B_KNIGHT, sq);
          this.listExtend(B_KNIGHT,sq);
          file++;
          break;
        case 'b':
          b[sq] = B_BISHOP;
          this.netAdd(B_BISHOP, sq);
          this.listExtend(B_BISHOP,sq);
          file++;
          break;
        case 'r':
          b[sq] = B_ROOK;
          this.netAdd(B_ROOK, sq);
          this.listExtend(B_ROOK,sq);
          file++;
          break;
        case 'q':
          b[sq] = B_QUEEN;
          this.netAdd(B_QUEEN, sq);
          this.listExtend(B_QUEEN,sq);
          file++;
          break;
        case 'k':
          b[sq] = B_KING;
          this.netAdd(B_KING, sq);
          this.listExtend(B_KING,sq);
          file++;
          break;
        
        //}}}
        default:
          console.log('unknown board char','|'+ch+'|');
      }
    }
    
    //}}}
    //{{{  board turn
    
    if (st == 'w')
      this.turn = WHITE;
    
    else if (st == 'b')
      this.turn = BLACK;
    
    else
      console.log('unknown board colour', st)
    
    //}}}
    //{{{  board rights
    
    this.rights = 0;
    
    for (let i=0; i < sr.length; i++) {
    
      const ch = sr.charAt(i);
    
      if (ch == 'K') this.rights |= WHITE_RIGHTS_KING;
      if (ch == 'Q') this.rights |= WHITE_RIGHTS_QUEEN;
      if (ch == 'k') this.rights |= BLACK_RIGHTS_KING;
      if (ch == 'q') this.rights |= BLACK_RIGHTS_QUEEN;
    }
    
    //}}}
    //{{{  board ep
    
    if (sep.length == 2)
      this.ep = COORDS.indexOf(sep)
    
    else
      this.ep = 0;
    
    //}}}
  
    this.hashCalc();
    this.historyReset();
  
  }
  
  //}}}
  //{{{  playMove
  
  cwtchStruct.prototype.playMove = function (uciMove) {
  
    const node = this.nodes[0];
  
    const turn     = this.turn;
    const nextTurn = colourToggle(turn);
    const cx       = colourIndex(turn);
    const inCheck  = this.isKingAttacked(this.cxList[cx][LKING], nextTurn);
  
    node.ttMove = 0;
  
    node.initMoveGen(ALL_MOVES,inCheck);
  
    let move = 0;
  
    while (move = node.getNextMove()) {
  
      if (formatMove(move) == uciMove) {
        this.makeMove(move);
        return;
      }
    }
  
    console.log('info cannot play uci move', uciMove);
    process.exit();
  }
  
  //}}}
  
  //{{{  netSlowEval
  
  cwtchStruct.prototype.netSlowEval = function () {
  
    const b  = this.board;
    const cx = colourMultiplier(this.turn)
  
    let h1 = Array(net_h1_size);
    for (let j=0; j < net_h1_size; j++) {
      h1[j] = net_h1_b[j];
    }
  
    for (let sq=0; sq<64; sq++) {
  
      const fr    = B88[sq];
      const frObj = b[fr];
  
      if (!frObj)
        continue;
  
      const index = inputIndex(frObj, fr);
  
      for (let i=0; i < net_h1_size; i++) {
        h1[i] += net_h1_w[index][i];
      }
    }
  
    let e = net_o_b;
  
    for (let i=0; i < net_h1_size; i++) {
      e += net_o_w[i] * relu(h1[i]);
    }
  
    return e * cx | 0;
  }
  
  //}}}
  //{{{  netFastEval
  
  cwtchStruct.prototype.netFastEval = function () {
  
    const cx = colourMultiplier(this.turn)
  
    let e = net_o_b;
  
    for (let i=0; i < net_h1_size; i++) {
      e += net_o_w[i] * relu(this.net_h1_a[i]);
    }
  
    return e * cx | 0;
  }
  
  //}}}
  
  //{{{  makeMove
  
  cwtchStruct.prototype.makeMove = function (move) {
  
    //this.listCheck('makemove in',move);
  
    const b = this.board;
  
    const fr     = moveFromSq(move);
    const to     = moveToSq(move);
    const frObj  = moveFromObj(move);
    const toObj  = moveToObj(move);
    const toList = this.objList[toObj];
    const frList = this.objList[frObj];
    const toPtr  = this.listPtr[to];
    const frPtr  = this.listPtr[fr];
  
    //this.netDel(frObj,fr);
    //this.netDel(toObj,to);
    //this.netAdd(frObj,to);
  
    if (toObj) {
  
      this.netCapture(frObj,fr,toObj,to);
  
      this.listPtr[to] = frPtr;
      frList[frPtr] = to;
  
      if (toList[LCOUNT] != toPtr) {
        toList[toPtr] = toList[toList[LCOUNT]];
        this.listPtr[toList[toPtr]] = toPtr
      }
      toList[LCOUNT] = toList[LCOUNT] - 1;
    }
    else {
      this.netMove(frObj,fr,to);
  
      this.listPtr[to] = frPtr;
      frList[frPtr] = to;
    }
  
    this.hashObj(frObj,fr);
    b[fr] = 0;
    //this.hashObj(0,fr);
  
    this.hashObj(toObj,to);
    b[to] = frObj;
    this.hashObj(frObj,to);
  
    this.hashEP();
    this.ep = 0;
    this.hashEP();
  
    if (move & MOVE_IKKY_MASK) {
      //{{{  ikky stuff
      
      const frCol = objColour(frObj);
      
      if (frCol == WHITE) {
        //{{{  white
        
        if (move & MOVE_EPMAKE_MASK) {
        
          this.hashEP();
          this.ep = to+12;
          this.hashEP();
        
        }
        
        else if (move & MOVE_EPTAKE_MASK) {
        
          this.netDel(B_PAWN,to+12);
        
          this.hashObj(B_PAWN,to+12);
          b[to+12] = 0;
          //this.hashObj(0,to+12);
        
          const ptr = this.listPtr[to+12];
          this.bList[ptr] = this.bList[this.bList[LCOUNT]];
          this.listPtr[this.bList[ptr]] = ptr
          this.bList[LCOUNT] = this.bList[LCOUNT] - 1;
        
        }
        
        else if (move & MOVE_PROMOTE_MASK) {
        
          const pp = movePromotePiece(move) | WHITE;
        
          //this.netDel(W_PAWN,to);
          //this.netAdd(pp,to);
        
          this.netPromote(W_PAWN,pp,to);
        
          this.hashObj(W_PAWN,to);
          b[to] = pp;
          this.hashObj(pp,to);
        
        }
        
        else if (moveEq(move,MOVE_E1G1)) {
        
          //this.netDel(W_ROOK,H1);
          //this.netAdd(W_ROOK,F1);
        
          this.netMove(W_ROOK,H1,F1);
        
          this.hashObj(W_ROOK,H1);
          b[H1] = 0;
          //this.hashObj(0,H1);
        
          //this.hashObj(0,F1);
          b[F1] = W_ROOK;
          this.hashObj(W_ROOK,F1);
        
          this.listPtr[F1] = this.listPtr[H1];
          this.wList[this.listPtr[H1]] = F1;
        
        }
        
        else if (moveEq(move,MOVE_E1C1)) {
        
          //this.netDel(W_ROOK,A1);
          //this.netAdd(W_ROOK,D1);
        
          this.netMove(W_ROOK,A1,D1);
        
          this.hashObj(W_ROOK,A1);
          b[A1] = 0;
          //this.hashObj(0,A1);
        
          //this.hashObj(0,D1);
          b[D1] = W_ROOK;
          this.hashObj(W_ROOK,D1);
        
          this.listPtr[D1] = this.listPtr[A1];
          this.wList[this.listPtr[A1]] = D1;
        
        }
        
        //}}}
      }
      
      else {
        //{{{  black
        
        if (move & MOVE_EPMAKE_MASK) {
        
          this.hashEP();
          this.ep = to-12;
          this.hashEP();
        
        }
        
        else if (move & MOVE_EPTAKE_MASK) {
        
          this.netDel(W_PAWN,to-12);
        
          this.hashObj(W_PAWN,to-12);
          b[to-12] = 0;
          //this.hashObj(0,to-12);
        
          const ptr = this.listPtr[to-12];
          this.wList[ptr] = this.wList[this.wList[LCOUNT]];
          this.listPtr[this.wList[ptr]] = ptr
          this.wList[LCOUNT] = this.wList[LCOUNT] - 1;
        
        }
        
        else if (move & MOVE_PROMOTE_MASK) {
        
          const pp = movePromotePiece(move) | BLACK;
        
          //this.netDel(B_PAWN,to);
          //this.netAdd(pp,to);
        
          this.netPromote(B_PAWN,pp,to);
        
          this.hashObj(B_PAWN,to);
          b[to] = pp;
          this.hashObj(pp,to);
        
        }
        
        else if (moveEq(move,MOVE_E8G8)) {
        
          //this.netDel(B_ROOK,H8);
          //this.netAdd(B_ROOK,F8);
        
          this.netMove(B_ROOK,H8,F8);
        
          this.hashObj(B_ROOK,H8);
          b[H8] = 0;
          //this.hashObj(0,H8);
        
          //this.hashObj(0,F8);
          b[F8] = B_ROOK;
          this.hashObj(B_ROOK,F8);
        
          this.listPtr[F8] = this.listPtr[H8];
          this.bList[this.listPtr[H8]] = F8;
        }
        
        else if (moveEq(move,MOVE_E8C8)) {
        
          //this.netDel(B_ROOK,A8);
          //this.netAdd(B_ROOK,D8);
        
          this.netMove(B_ROOK,A8,D8);
        
          this.hashObj(B_ROOK,A8);
          b[A8] = 0;
          //this.hashObj(0,A8);
        
          //this.hashObj(0,D8);
          b[D8] = B_ROOK;
          this.hashObj(B_ROOK,D8);
        
          this.listPtr[D8] = this.listPtr[A8];
          this.bList[this.listPtr[A8]] = D8;
        
        }
        
        //}}}
      }
      
      //}}}
    }
  
    this.hashTurn();
    this.turn = colourToggle(this.turn);
    this.hashTurn();
  
    this.hashRights();
    this.rights &= MASK_RIGHTS[fr] & MASK_RIGHTS[to];
    this.hashRights();
  
    this.hHistoryLo[this.hHistoryNext] = this.hLo[0];
    this.hHistoryHi[this.hHistoryNext] = this.hHi[0];
  
    if ((move & MOVE_REPRESET_MASK) || IS_P[frObj])
      this.hHistoryLimit = this.hHistoryNext;
  
    this.hHistoryNext++;
  
    //this.listCheck('makemove out',move);
  
  }
  
  //}}}
  //{{{  unmakeMove
  
  cwtchStruct.prototype.unmakeMove = function (move) {
  
    const b = this.board;
  
    const fr    = moveFromSq(move);
    const to    = moveToSq(move);
    const toObj = moveToObj(move);
    const frObj = moveFromObj(move);
    const toList = this.objList[toObj];
    const frList = this.objList[frObj];
    const toPtr  = this.listPtr[to];
    const frPtr  = this.listPtr[fr];
  
    //this.netDel(frObj,to);
    //this.netAdd(toObj,to);
    //this.netAdd(frObj,fr);
  
    b[fr] = frObj;
    b[to] = toObj;
  
    if (toObj) {
      this.listPtr[fr] = toPtr;
      frList[toPtr] = fr;
  
      toList[LCOUNT] = toList[0] + 1;
      toList[toList[LCOUNT]] = to;
      this.listPtr[to] = toList[LCOUNT];
    }
    else {
      this.listPtr[fr] = toPtr;
      frList[toPtr] = fr;
    }
  
    if (move & MOVE_IKKY_MASK) {
      //{{{  ikky stuff
      
      const frCol = objColour(frObj);
      
      if (frCol == WHITE) {
        //{{{  white
        
        if (move & MOVE_EPTAKE_MASK) {
        
          //this.netAdd(B_PAWN,to+12);
        
          b[to+12] = B_PAWN;
        
          this.bList[LCOUNT] = this.bList[LCOUNT] + 1;
          this.bList[this.bList[0]] = to+12;
          this.listPtr[to+12] = this.bList[LCOUNT];
        
        }
        
        //else if (move & MOVE_PROMOTE_MASK) {
        
          //this.netDel(movePromotePiece(move) | WHITE, to);
          //this.netAdd(W_PAWN,to);
        
        //}
        
        
        else if (moveEq(move,MOVE_E1G1)) {
        
          //this.netAdd(W_ROOK,H1);
          //this.netDel(W_ROOK,F1);
        
          b[H1] = W_ROOK;
          b[F1] = 0;
        
          this.listPtr[H1] = this.listPtr[F1];
          this.wList[this.listPtr[F1]] = H1;
        
        }
        
        else if (moveEq(move,MOVE_E1C1)) {
        
          //this.netAdd(W_ROOK,A1);
          //this.netDel(W_ROOK,D1);
        
          b[A1] = W_ROOK;
          b[D1] = 0;
        
          this.listPtr[A1] = this.listPtr[D1];
          this.wList[this.listPtr[D1]] = A1;
        
        }
        
        //}}}
      }
      
      else {
        //{{{  black
        
        if (move & MOVE_EPTAKE_MASK) {
        
          //this.netAdd(W_PAWN,to-12);
        
          b[to-12] = W_PAWN;
        
          this.wList[LCOUNT] = this.wList[LCOUNT] + 1;
          this.wList[this.wList[LCOUNT]] = to-12;
          this.listPtr[to-12] = this.wList[LCOUNT];
        
        }
        
        //else if (move & MOVE_PROMOTE_MASK) {
        
          //this.netDel(movePromotePiece(move) | BLACK, to);
          //this.netAdd(B_PAWN,to);
        
        //}
        
        else if (moveEq(move,MOVE_E8G8)) {
        
          //this.netAdd(B_ROOK,H8);
          //this.netDel(B_ROOK,F8);
        
          b[H8] = B_ROOK;
          b[F8] = 0;
        
          this.listPtr[H8] = this.listPtr[F8];
          this.bList[this.listPtr[F8]] = H8;
        
        }
        
        else if (moveEq(move,MOVE_E8C8)) {
        
          //this.netAdd(B_ROOK,A8);
          //this.netDel(B_ROOK,D8);
        
          b[A8] = B_ROOK;
          b[D8] = 0;
        
          this.listPtr[A8] = this.listPtr[D8];
          this.bList[this.listPtr[D8]] = A8;
        
        }
        
        //}}}
      }
      
      //}}}
    }
  
    this.turn = colourToggle(this.turn);
  
    this.hHistoryNext--;
  }
  
  //}}}
  
  //{{{  makeMoveBare
  
  cwtchStruct.prototype.makeMoveBare = function (move) {
  
    const b = this.board;
  
    const fr    = moveFromSq(move);
    const to    = moveToSq(move);
    const frObj = moveFromObj(move);
    //const toObj = moveToObj(move);
    const frList = this.objList[frObj];
    const frPtr  = this.listPtr[fr];
  
    b[fr] = 0;
    b[to] = frObj;
  
    frList[frPtr] = to;
  
    if (move & MOVE_IKKY_MASK) {
      //{{{  ikky stuff
      
      const frCol = objColour(frObj);
      
      if (frCol == WHITE) {
        //{{{  white
        
        if (move & MOVE_EPTAKE_MASK) {
        
          b[to+12] = 0;
        
        }
        
        else if (move & MOVE_PROMOTE_MASK) {
        
          b[to] = movePromotePiece(move) | WHITE;
        }
        
        else if (moveEq(move,MOVE_E1G1)) {
        
          b[H1] = 0;
          b[F1] = W_ROOK;
        
        }
        
        else if (moveEq(move,MOVE_E1C1)) {
        
          b[A1] = 0;
          b[D1] = W_ROOK;
        
        }
        
        //}}}
      }
      
      else {
        //{{{  black
        
        if (move & MOVE_EPTAKE_MASK) {
        
          b[to-12] = 0;
        
        }
        
        else if (move & MOVE_PROMOTE_MASK) {
        
          b[to] = movePromotePiece(move) | BLACK;
        
        }
        
        else if (moveEq(move,MOVE_E8G8)) {
        
          b[H8] = 0;
          b[F8] = B_ROOK;
        
        }
        
        else if (moveEq(move,MOVE_E8C8)) {
        
          b[A8] = 0;
          b[D8] = B_ROOK;
        
        }
        
        //}}}
      }
      
      //}}}
    }
  }
  
  //}}}
  //{{{  unmakeMoveBare
  
  cwtchStruct.prototype.unmakeMoveBare = function (move) {
  
    const b = this.board;
  
    const fr     = moveFromSq(move);
    const to     = moveToSq(move);
    const toObj  = moveToObj(move);
    const frObj  = moveFromObj(move);
    const frList = this.objList[frObj];
    const frPtr  = this.listPtr[fr];
  
    b[fr] = frObj;
    b[to] = toObj;
  
    frList[frPtr] = fr;
  
    if (move & MOVE_IKKY_MASK) {
      //{{{  ikky stuff
      
      const frCol = objColour(frObj);
      
      if (frCol == WHITE) {
        //{{{  white
        
        if (move & MOVE_EPTAKE_MASK) {
        
          b[to+12] = B_PAWN;
        
        }
        
        else if (moveEq(move,MOVE_E1G1)) {
        
          b[H1] = W_ROOK;
          b[F1] = 0;
        
        }
        
        else if (moveEq(move,MOVE_E1C1)) {
        
          b[A1] = W_ROOK;
          b[D1] = 0;
        
        }
        
        //}}}
      }
      
      else {
        //{{{  black
        
        if (move & MOVE_EPTAKE_MASK) {
        
          b[to-12] = W_PAWN;
        
        }
        
        else if (moveEq(move,MOVE_E8G8)) {
        
          b[H8] = B_ROOK;
          b[F8] = 0;
        
        }
        
        else if (moveEq(move,MOVE_E8C8)) {
        
          b[A8] = B_ROOK;
          b[D8] = 0;
        
        }
        
        //}}}
      }
      
      //}}}
    }
  }
  
  //}}}
  
  //{{{  listReset
  
  cwtchStruct.prototype.listReset = function () {
  
    this.listPtr.fill(0);
  
    this.wList[LCOUNT] = 1;
    this.bList[LCOUNT] = 1;
  
  }
  
  //}}}
  //{{{  listCheck
  
  cwtchStruct.prototype.listCheck = function (s,move) {
  
    const m = formatMove(move);
  
    const wNum = this.wList[LCOUNT];
    for (let i=1; i <= wNum; i++) {
      const sq = this.wList[i];
      if (this.listPtr[sq] != i) {
        console.log('w',s,m,'wnum',wNum,'i',i,'sq',sq,'ptr',this.listPtr[sq]);
        this.printBoard();
        process.exit();
      }
    }
  
    const bNum = this.bList[LCOUNT];
    for (let i=1; i <= bNum; i++) {
      const sq = this.bList[i];
      if (this.listPtr[sq] != i) {
        console.log('b',s,m,'bnum',bNum,'i',i,'sq',sq,'ptr',this.listPtr[sq]);
        this.printBoard();
        process.exit();
      }
    }
  }
  
  //}}}
  //{{{  listExtend
  
  cwtchStruct.prototype.listExtend = function (obj, sq) {
  
    const list = this.objList[obj];
    const num  = list[LCOUNT] + 1;
  
    if (obj == W_KING || obj == B_KING) {
      list[LKING] = sq;
      this.listPtr[sq] = 1;
    }
    else {
      list[num] = sq;
      this.listPtr[sq] = num;
      list[LCOUNT] = num;
    }
  }
  
  //}}}
  
  //{{{  historyReset
  
  cwtchStruct.prototype.historyReset = function () {
  
    for (let i=0; i < 6; i++) {
      this.wHistory[i].fill(0);
      this.bHistory[i].fill(0);
    }
  
  }
  
  //}}}
  //{{{  historyAdd
  
  cwtchStruct.prototype.historyAdd = function (move, v) {
  
    if (moveIsNoisy(move))
      return;
  
    const frObj = moveFromObj(move);
    const to    = moveToSq(move);
    const h     = this.objHistory[frObj];
  
    h[to] = h[to] + v;
  
  }
  
  //}}}
  
  //{{{  netReset
  
  cwtchStruct.prototype.netReset = function () {
  
    //for (let h=0; h < net_h1_size; h++)
      //this.net_h1_a[h] = net_h1_b[h];
  
    this.net_h1_a.set(net_h1_b);
  
  }
  
  //}}}
  //{{{  netAdd
  
  cwtchStruct.prototype.netAdd = function (obj, sq) {
  
    //if (!obj) {
      //console.log('netaddnull');
      //return;
    //}
  
    const i   = inputIndex(obj, sq);
    const h1i = net_h1_w[i];
  
    for (let h=0; h < net_h1_size; h++)
      this.net_h1_a[h] += h1i[h];
  }
  
  //}}}
  //{{{  netDel
  
  cwtchStruct.prototype.netDel = function (obj, sq) {
  
    //if (!obj) {
      //console.log('netdelnull');
      //return;
    //}
  
    const i   = inputIndex(obj, sq);
    const h1i = net_h1_w[i];
  
    for (let h=0; h < net_h1_size; h++)
      this.net_h1_a[h] -= h1i[h];
  }
  
  //}}}
  //{{{  netMove
  
  cwtchStruct.prototype.netMove = function (frObj,fr,to) {
  
    const i1 = inputIndex(frObj, fr);
    const i2 = inputIndex(frObj, to);
  
    const h1 = net_h1_w[i1];
    const h2 = net_h1_w[i2];
  
    for (let h=0; h < net_h1_size; h++) {
      this.net_h1_a[h] += h2[h] - h1[h];
    }
  }
  
  //}}}
  //{{{  netCapture
  
  cwtchStruct.prototype.netCapture = function (frObj,fr,toObj,to) {
  
    const i1 = inputIndex(frObj, fr);
    const i2 = inputIndex(toObj, to);
    const i3 = inputIndex(frObj, to);
  
    const h1 = net_h1_w[i1];
    const h2 = net_h1_w[i2];
    const h3 = net_h1_w[i3];
  
    for (let h=0; h < net_h1_size; h++) {
      this.net_h1_a[h] += h3[h] - h2[h] - h1[h];
    }
  }
  
  //}}}
  //{{{  netPromote
  
  cwtchStruct.prototype.netPromote = function (pawnObj,promoteObj,sq) {
  
    const i1 = inputIndex(pawnObj,    sq);
    const i2 = inputIndex(promoteObj, sq);
  
    const h1 = net_h1_w[i1];
    const h2 = net_h1_w[i2];
  
    for (let h=0; h < net_h1_size; h++) {
      this.net_h1_a[h] += h2[h] - h1[h];
    }
  }
  
  //}}}
  
  //{{{  ttInit
  
  cwtchStruct.prototype.ttInit = function () {
    this.ttFlags.fill(0);
  }
  
  //}}}
  //{{{  ttPut
  
  cwtchStruct.prototype.ttPut = function (flags, depth, score, move, ev) {
  
    const i = this.hLo[0] & TT_MASK;
  
    this.ttLo[i] = this.hLo[0];
    this.ttHi[i] = this.hHi[0];
  
    this.ttFlags[i] = flags;
    this.ttDepth[i] = depth;
    this.ttScore[i] = score;
    this.ttMove[i]  = move;
    this.ttEval[i]  = ev;
  }
  
  //}}}
  //{{{  ttIndex
  
  cwtchStruct.prototype.ttIndex = function () {
  
    const i = this.hLo[0] & TT_MASK;
  
    if (this.ttFlags[i] && this.hashEq(this.ttLo[i],this.ttHi[i]))
      return i;
    else
      return 0;
  }
  
  //}}}
  //{{{  ttValidate
  
  cwtchStruct.prototype.ttValidate = function (move) {
  
    const b = this.board;
  
    const frObj = moveFromObj(move);
    const fr    = moveFromSq(move);
  
    if (b[fr] != frObj)
      return false;
  
    const toObj = moveToObj(move);
    const to    = moveToSq(move);
  
    if (b[to] != toObj)
      return false;
  
    return true;
  }
  
  //}}}
  
  //{{{  hashEq
  
  cwtchStruct.prototype.hashEq = function (lo, hi) {
  
    return this.hLo[0] == lo && this.hHi[0] == hi;
  
  }
  
  //}}}
  //{{{  hashCalc
  
  cwtchStruct.prototype.hashCalc = function () {
  
    this.hLo[0] = 0;
    this.hHi[0] = 0;
  
    this.hHistoryLimit = 0;
    this.hHistoryNext  = 0;
  
    for (let i=0; i < 64; i++) {
      let sq  = B88[i];
      let obj = this.board[sq];
      this.hashObj(obj,sq);
    }
  
    this.hashTurn();
    this.hashRights();
    this.hashEP();
  
    this.hHistoryLo[0] = this.hLo[0];
    this.hHistoryHi[0] = this.hHi[0];
  
    this.hHistoryNext++;
  }
  
  //}}}
  //{{{  hashTurn
  
  cwtchStruct.prototype.hashTurn = function () {
    this.hLo[0] ^= this.hLoTurn[this.turn];
    this.hHi[0] ^= this.hHiTurn[this.turn];
  }
  
  //}}}
  //{{{  hashRights
  
  cwtchStruct.prototype.hashRights = function () {
    this.hLo[0] ^= this.hLoRights[this.rights];
    this.hHi[0] ^= this.hHiRights[this.rights];
  }
  
  //}}}
  //{{{  hashEP
  
  cwtchStruct.prototype.hashEP = function () {
    this.hLo[0] ^= this.hLoEP[this.ep];
    this.hHi[0] ^= this.hHiEP[this.ep];
  }
  
  //}}}
  //{{{  hashObj
  
  cwtchStruct.prototype.hashObj = function (obj, sq) {
    this.hLo[0] ^= this.hLoObj[obj][sq];
    this.hHi[0] ^= this.hHiObj[obj][sq];
  }
  
  //}}}
  
  //{{{  quickSee
  
  cwtchStruct.prototype.quickSee = function (move) {
  /*
    if (move & MOVE_IKKY_MASK)
      return 0;
  
    const toObj = moveToObj(move);
  
    if (!toObj)
      return true;
  
    const frObj   = moveFromObj(move);
    const toPiece = objPiece(toObj);
    const frPiece = objPiece(frObj);
  
    if (frPiece <= toPiece)
      return true;
  
    const to = moveToSq(move);
  
    return !isSqAttacked(to, colourToggle(turn));
  */
  }
  
  
  //}}}
  //{{{  uciArgv
  
  cwtchStruct.prototype.uciArgv = function () {
  
    if (process.argv.length > 2) {
      for (let i=2; i < process.argv.length; i++)
        this.uciExec(process.argv[i]);
    }
  
  }
  
  //}}}
  //{{{  newGame
  
  cwtchStruct.prototype.newGame = function () {
  
    this.ttInit();
  
    for (let i=0; i < MAX_PLY; i++) {
      this.nodes[i].killer = 0;
    }
  
  }
  
  //}}}
  //{{{  areWeOutOfTime
  
  cwtchStruct.prototype.areWeOutOfTime = function () {
  
    return this.bestMove && ((this.finishTime  && (Date.now()     >  this.finishTime)) ||
                             (this.targetNodes && (this.nodeCount >= this.targetNodes)));
  
  }
  
  //}}}
  //{{{  printBoard
  
  cwtchStruct.prototype.printBoard = function () {
  
    const b = this.board;
  
    for (let rank=7; rank >= 0; rank--) {
      process.stdout.write((rank+1)+' ');
      for (let file=0; file <= 7; file++) {
        process.stdout.write(OBJ_CHAR[b[B88[(7-rank)*8+file]]] + ' ');
      }
      process.stdout.write('\r\n');
    }
  
    console.log('  a b c d e f g h');
  
    if (this.turn == WHITE)
      process.stdout.write('w');
    else
      process.stdout.write('b');
    process.stdout.write(' ');
  
    if (this.rights) {
      if (this.rights & WHITE_RIGHTS_KING)
        process.stdout.write('K');
     if (this.rights & WHITE_RIGHTS_QUEEN)
        process.stdout.write('Q');
     if (this.rights & BLACK_RIGHTS_KING)
        process.stdout.write('k');
     if (this.rights & BLACK_RIGHTS_QUEEN)
        process.stdout.write('q');
      process.stdout.write(' ');
    }
    else
      process.stdout.write('- ');
  
    if (this.ep)
      process.stdout.write(COORDS[this.ep]);
    else
      process.stdout.write('-');
  
    console.log();
  
    console.log(this.fen());
    console.log('hash',this.hHi[0],this.hLo[0]);
  
    console.log('w list',this.wList.toString());
    console.log('b list',this.bList.toString());
  }
  
  //}}}
  //{{{  fen
  
  cwtchStruct.prototype.fen = function () {
  
    let fen = '';
    let n   = 0;
  
    for (let i=0; i < 8; i++) {
      for (let j=0; j < 8; j++) {
        const sq  = B88[i*8 + j]
        const obj = this.board[sq];
        if (obj == 0)
          n++;
        else {
          if (n) {
            fen += '' + n;
            n = 0;
          }
          fen += OBJ_CHAR[obj];
        }
      }
      if (n) {
        fen += '' + n;
        n = 0;
      }
      if (i < 7)
        fen += '/';
    }
  
    if (this.turn == WHITE)
      fen += ' w';
    else
      fen += ' b';
  
    if (this.rights) {
      fen += ' ';
      if (this.rights & WHITE_RIGHTS_KING)
        fen += 'K';
      if (this.rights & WHITE_RIGHTS_QUEEN)
        fen += 'Q';
      if (this.rights & BLACK_RIGHTS_KING)
        fen += 'k';
      if (this.rights & BLACK_RIGHTS_QUEEN)
        fen += 'Q';
    }
    else
      fen += ' -';
  
    if (this.ep)
      fen += ' ' + COORDS[this.ep];
    else
      fen += ' -';
  
    fen += ' 0 1';
  
    return fen;
  }
  
  //}}}
  //{{{  isKingAttacked
  
  cwtchStruct.prototype.isKingAttacked = function (to, byCol) {
  
    const b = this.board;
  
    const cx = colourIndex(byCol);
  
    const OFFSET_DIAG1 = -WB_OFFSET_DIAG1[cx];
    const OFFSET_DIAG2 = -WB_OFFSET_DIAG2[cx];
    const RQ           = WB_RQ[cx];
    const BQ           = WB_BQ[cx];
    const BY_PAWN      = WB_PAWN[cx];
    const N            = KNIGHT | byCol;
  
    let fr = 0;
  
    //{{{  pawns
    
    if (b[to+OFFSET_DIAG1] == BY_PAWN || b[to+OFFSET_DIAG2] == BY_PAWN)
      return 1;
    
    //}}}
    //{{{  knights
    
    if ((b[to + -10] == N) ||
        (b[to + -23] == N) ||
        (b[to + -14] == N) ||
        (b[to + -25] == N) ||
        (b[to +  10] == N) ||
        (b[to +  23] == N) ||
        (b[to +  14] == N) ||
        (b[to +  25] == N)) return 1;
    
    //}}}
    //{{{  queen, bishop, rook
    
    fr = to + 1;  while (!b[fr]) fr += 1;  if (RQ[b[fr]]) return 1;
    fr = to - 1;  while (!b[fr]) fr -= 1;  if (RQ[b[fr]]) return 1;
    fr = to + 12; while (!b[fr]) fr += 12; if (RQ[b[fr]]) return 1;
    fr = to - 12; while (!b[fr]) fr -= 12; if (RQ[b[fr]]) return 1;
    
    fr = to + 11; while (!b[fr]) fr += 11; if (BQ[b[fr]]) return 1;
    fr = to - 11; while (!b[fr]) fr -= 11; if (BQ[b[fr]]) return 1;
    fr = to + 13; while (!b[fr]) fr += 13; if (BQ[b[fr]]) return 1;
    fr = to - 13; while (!b[fr]) fr -= 13; if (BQ[b[fr]]) return 1;
    
    //}}}
  
    return 0;
  }
  
  //}}}
  //{{{  isDraw
  
  cwtchStruct.prototype.isDraw = function () {
  
    if (this.hHistoryNext - this.hHistoryLimit > 100)
      return true;
  
    let count = 0;
  
    for (let i=this.hHistoryNext-5; i >= this.hHistoryLimit; i -= 2) {
  
      if (this.hashEq(this.hHistoryLo[i],this.hHistoryHi[i])) {
        count++;
        if (count == 2) {
          return true;
        }
      }
    }
  
    return false;
  }
  
  //}}}
  
  //}}}

  //{{{  weights
  const net_h1_size    = 8;
  const net_batch_size = 500;
  const net_activation = "relu";
  const net_stretch    = 100;
  const net_epochs     = 50;
  const net_loss       = 0.11033862640345493;
  //{{{  weights
  const net_h1_w = Array(768);
  net_h1_w[0] = new Float32Array([-0.042119286954402924,0.025617841631174088,0.026310129091143608,-0.023099210113286972,0.038983140140771866,-0.0006841137073934078,0.005781712010502815,-0.01320631429553032]);
  net_h1_w[1] = new Float32Array([-0.03813751041889191,-0.02348712459206581,-0.027689943090081215,0.027941526845097542,-0.04915281757712364,0.037875205278396606,0.014475490897893906,0.03479894995689392]);
  net_h1_w[2] = new Float32Array([-0.03037329576909542,0.04713992774486542,0.01977180875837803,-0.001175949815660715,0.027864236384630203,0.02192428521811962,-0.041070882230997086,0.01340690441429615]);
  net_h1_w[3] = new Float32Array([-0.035107921808958054,-0.02807103656232357,0.012412010692059994,-0.023123865947127342,0.0033122547902166843,-0.049670200794935226,-0.02904640883207321,0.00944872759282589]);
  net_h1_w[4] = new Float32Array([0.031166138127446175,-0.01847895234823227,-0.011158951558172703,-0.04340158402919769,-0.03786405548453331,-0.047360703349113464,-0.02010410837829113,-0.04170951619744301]);
  net_h1_w[5] = new Float32Array([0.0017982436111196876,-0.04734569787979126,-0.0032734270207583904,-0.020114745944738388,-0.007244295906275511,0.03730865940451622,-0.0024835034273564816,-0.039522185921669006]);
  net_h1_w[6] = new Float32Array([-0.00849470030516386,0.033305663615465164,-0.004812948871403933,-0.001404689159244299,-0.044195353984832764,-0.02090233564376831,0.028247520327568054,0.0008053298806771636]);
  net_h1_w[7] = new Float32Array([0.026198262348771095,-0.031085168942809105,0.001029239152558148,0.01634163409471512,-0.011676302179694176,0.026615161448717117,-0.007221733219921589,-0.015741387382149696]);
  net_h1_w[8] = new Float32Array([-0.9392445087432861,-0.9363131523132324,2.0983963012695312,2.049170732498169,2.0454132556915283,-0.9398099184036255,2.052720308303833,-0.9301822781562805]);
  net_h1_w[9] = new Float32Array([-1.257685899734497,-1.241526484489441,2.171140432357788,2.1618220806121826,2.1775591373443604,-1.2350525856018066,2.1453797817230225,-1.235101580619812]);
  net_h1_w[10] = new Float32Array([-1.0187642574310303,-1.0056357383728027,2.0128684043884277,2.101769208908081,2.0250089168548584,-1.0071231126785278,2.030555486679077,-0.9971891641616821]);
  net_h1_w[11] = new Float32Array([-1.2682280540466309,-1.2347813844680786,2.1035873889923096,2.0921096801757812,2.154445171356201,-1.2345482110977173,2.135427713394165,-1.2387253046035767]);
  net_h1_w[12] = new Float32Array([-0.7017422318458557,-0.7041376829147339,1.7040765285491943,1.7049849033355713,1.718904733657837,-0.7040872573852539,1.7010838985443115,-0.7084010243415833]);
  net_h1_w[13] = new Float32Array([-1.0760577917099,-1.0735212564468384,2.070054531097412,2.127890110015869,2.1666550636291504,-1.0490573644638062,2.174286365509033,-1.066486120223999]);
  net_h1_w[14] = new Float32Array([-1.271937370300293,-1.278446912765503,2.130934000015259,2.1927382946014404,2.1085660457611084,-1.2668031454086304,2.176321506500244,-1.2630254030227661]);
  net_h1_w[15] = new Float32Array([-0.6995766162872314,-0.678131103515625,1.8481974601745605,1.8399646282196045,1.8666208982467651,-0.6732067465782166,1.8161271810531616,-0.6716011762619019]);
  net_h1_w[16] = new Float32Array([-0.7796484231948853,-0.7614397406578064,1.668689489364624,1.64286208152771,1.6932432651519775,-0.7752948999404907,1.7152546644210815,-0.7702291011810303]);
  net_h1_w[17] = new Float32Array([-0.7952985763549805,-0.7795678377151489,1.769727349281311,1.7405437231063843,1.733170747756958,-0.7708888053894043,1.7583848237991333,-0.7730731964111328]);
  net_h1_w[18] = new Float32Array([-0.6967532634735107,-0.6960752010345459,1.5932304859161377,1.631249189376831,1.6706854104995728,-0.7028248310089111,1.689462423324585,-0.6931938529014587]);
  net_h1_w[19] = new Float32Array([-0.6925753355026245,-0.6977512240409851,1.4962865114212036,1.446968913078308,1.4954400062561035,-0.6753648519515991,1.430760383605957,-0.6807951927185059]);
  net_h1_w[20] = new Float32Array([-0.8180155754089355,-0.7977728247642517,1.769314169883728,1.7284481525421143,1.7932415008544922,-0.7847634553909302,1.765956163406372,-0.7895859479904175]);
  net_h1_w[21] = new Float32Array([-0.44464150071144104,-0.4336389899253845,1.6311546564102173,1.591567873954773,1.6790659427642822,-0.4338960647583008,1.6130801439285278,-0.4178057610988617]);
  net_h1_w[22] = new Float32Array([-0.7262141704559326,-0.7188140749931335,1.7303011417388916,1.8173613548278809,1.7428985834121704,-0.7138903737068176,1.7553564310073853,-0.7015161514282227]);
  net_h1_w[23] = new Float32Array([-0.4939647614955902,-0.48914626240730286,1.5423699617385864,1.6381264925003052,1.6206445693969727,-0.4830700755119324,1.588740587234497,-0.4863620400428772]);
  net_h1_w[24] = new Float32Array([-0.35778993368148804,-0.3517674505710602,1.510307788848877,1.4766361713409424,1.4366533756256104,-0.3494264483451843,1.4564423561096191,-0.35203471779823303]);
  net_h1_w[25] = new Float32Array([-0.5366449356079102,-0.5291949510574341,1.7380797863006592,1.7167375087738037,1.7610669136047363,-0.5259285569190979,1.7086609601974487,-0.5216612219810486]);
  net_h1_w[26] = new Float32Array([-0.26303890347480774,-0.24790802597999573,1.4714823961257935,1.4804134368896484,1.492940902709961,-0.2521075904369354,1.4601209163665771,-0.24326708912849426]);
  net_h1_w[27] = new Float32Array([-0.328586608171463,-0.3334316313266754,1.3820005655288696,1.4353684186935425,1.407515048980713,-0.33591321110725403,1.4367382526397705,-0.32270580530166626]);
  net_h1_w[28] = new Float32Array([-0.23149733245372772,-0.21505647897720337,1.2862608432769775,1.3589377403259277,1.3527640104293823,-0.217376247048378,1.3385690450668335,-0.20734930038452148]);
  net_h1_w[29] = new Float32Array([-0.2798890173435211,-0.2649443447589874,1.7639564275741577,1.728081226348877,1.7948728799819946,-0.2634011209011078,1.7781519889831543,-0.24844540655612946]);
  net_h1_w[30] = new Float32Array([-0.4521283805370331,-0.4468642473220825,1.7042242288589478,1.7475582361221313,1.7283657789230347,-0.4456004500389099,1.7350242137908936,-0.43745121359825134]);
  net_h1_w[31] = new Float32Array([-0.288747102022171,-0.2886742949485779,1.5549055337905884,1.510764241218567,1.5089956521987915,-0.2787451148033142,1.5848329067230225,-0.29250067472457886]);
  net_h1_w[32] = new Float32Array([-0.22968773543834686,-0.22505147755146027,1.4485026597976685,1.4438296556472778,1.434653878211975,-0.2086731195449829,1.4212546348571777,-0.21501070261001587]);
  net_h1_w[33] = new Float32Array([-0.3749728202819824,-0.37734025716781616,1.4945893287658691,1.496105670928955,1.5576038360595703,-0.3769577145576477,1.5129865407943726,-0.3602559268474579]);
  net_h1_w[34] = new Float32Array([-0.30450356006622314,-0.3016909956932068,1.363128662109375,1.3821909427642822,1.3888566493988037,-0.29308441281318665,1.4254605770111084,-0.2851250469684601]);
  net_h1_w[35] = new Float32Array([-0.465340793132782,-0.4587262272834778,1.3102893829345703,1.4073898792266846,1.3389066457748413,-0.4417339563369751,1.3641068935394287,-0.43899938464164734]);
  net_h1_w[36] = new Float32Array([-0.35396021604537964,-0.3598729968070984,1.3638317584991455,1.3573366403579712,1.3533368110656738,-0.3626493513584137,1.3801625967025757,-0.3427712619304657]);
  net_h1_w[37] = new Float32Array([-0.27730223536491394,-0.27147969603538513,1.4736053943634033,1.4851638078689575,1.4475761651992798,-0.27044734358787537,1.4801772832870483,-0.2567237615585327]);
  net_h1_w[38] = new Float32Array([-0.30476614832878113,-0.2849663496017456,1.4884015321731567,1.5220131874084473,1.5396977663040161,-0.29047060012817383,1.537157416343689,-0.2768811285495758]);
  net_h1_w[39] = new Float32Array([-0.24264591932296753,-0.23884771764278412,1.4942899942398071,1.5297799110412598,1.5564385652542114,-0.23000971972942352,1.5125160217285156,-0.24769620597362518]);
  net_h1_w[40] = new Float32Array([-0.4521312713623047,-0.4403887689113617,1.1804697513580322,1.1776995658874512,1.1956589221954346,-0.42014315724372864,1.1751645803451538,-0.43840673565864563]);
  net_h1_w[41] = new Float32Array([-0.5780153274536133,-0.5587770342826843,1.4173706769943237,1.3949298858642578,1.418409824371338,-0.5641329288482666,1.4390721321105957,-0.5636193156242371]);
  net_h1_w[42] = new Float32Array([-0.48369765281677246,-0.47555306553840637,1.1234551668167114,1.1695228815078735,1.1262468099594116,-0.48095259070396423,1.098657488822937,-0.496759295463562]);
  net_h1_w[43] = new Float32Array([-0.584020733833313,-0.5809990167617798,1.2143841981887817,1.1917128562927246,1.1883996725082397,-0.5653355121612549,1.2267532348632812,-0.5559167861938477]);
  net_h1_w[44] = new Float32Array([-0.5274472832679749,-0.5132796168327332,1.217393398284912,1.1764205694198608,1.1956100463867188,-0.5220251083374023,1.2365899085998535,-0.5163919925689697]);
  net_h1_w[45] = new Float32Array([-0.44266846776008606,-0.44830965995788574,1.207390308380127,1.1806401014328003,1.1527591943740845,-0.4285430610179901,1.2078505754470825,-0.45228418707847595]);
  net_h1_w[46] = new Float32Array([-0.5113665461540222,-0.49508947134017944,1.3762640953063965,1.389212727546692,1.3791427612304688,-0.5109698176383972,1.4383561611175537,-0.49028530716896057]);
  net_h1_w[47] = new Float32Array([-0.4528176486492157,-0.4779437184333801,1.2498706579208374,1.2605587244033813,1.258569598197937,-0.4677251875400543,1.303848147392273,-0.4814762473106384]);
  net_h1_w[48] = new Float32Array([-0.6196692585945129,-0.6404843926429749,0.9484689831733704,0.9544927477836609,0.9905246496200562,-0.6492366790771484,0.9582409262657166,-0.6023585200309753]);
  net_h1_w[49] = new Float32Array([-0.7933996319770813,-0.7757325172424316,1.0493205785751343,1.1055946350097656,1.027793526649475,-0.7715648412704468,1.0192114114761353,-0.7863583564758301]);
  net_h1_w[50] = new Float32Array([-0.6964100003242493,-0.6814423203468323,0.8959457874298096,0.9472236037254333,0.9558907151222229,-0.6748051047325134,0.9607065320014954,-0.6761168837547302]);
  net_h1_w[51] = new Float32Array([-0.7721206545829773,-0.7593762278556824,0.8777370452880859,0.8426844477653503,0.8558402061462402,-0.7559979557991028,0.8895338773727417,-0.7447336912155151]);
  net_h1_w[52] = new Float32Array([-0.6862969398498535,-0.7046675682067871,0.8573712706565857,0.8664216995239258,0.8725639581680298,-0.7417428493499756,0.870090901851654,-0.6948666572570801]);
  net_h1_w[53] = new Float32Array([-0.646641194820404,-0.6426188945770264,1.057394027709961,1.0607675313949585,1.0358816385269165,-0.6824575066566467,1.042650818824768,-0.67000812292099]);
  net_h1_w[54] = new Float32Array([-0.8384525775909424,-0.7762593030929565,1.0671567916870117,1.0673840045928955,1.0304299592971802,-0.8435409069061279,1.0821748971939087,-0.7793467044830322]);
  net_h1_w[55] = new Float32Array([-0.6395745873451233,-0.6087993383407593,0.9608521461486816,0.9734826683998108,0.9862630367279053,-0.6341854333877563,0.9466062784194946,-0.6654701232910156]);
  net_h1_w[56] = new Float32Array([-0.041566841304302216,-0.05051368847489357,-0.04432714730501175,-0.0030115204863250256,0.003152877790853381,0.03393552824854851,-0.04313423112034798,-0.03964944928884506]);
  net_h1_w[57] = new Float32Array([-0.033697664737701416,0.010154740884900093,0.045031748712062836,0.029793646186590195,0.0009773269994184375,-0.026605287566781044,-0.04423584043979645,0.014834568835794926]);
  net_h1_w[58] = new Float32Array([0.0015517008723691106,0.03618516027927399,0.013057547621428967,0.03810804709792137,-0.0032972609624266624,0.04908290132880211,0.03687051683664322,-0.0039797998033463955]);
  net_h1_w[59] = new Float32Array([-0.01718021370470524,-0.023481635376811028,-0.007957983762025833,-0.03783193975687027,0.007540340069681406,0.027185896411538124,-0.050201307982206345,-0.008513721637427807]);
  net_h1_w[60] = new Float32Array([-0.008079948835074902,-0.045354653149843216,0.008482581935822964,-0.042367953807115555,0.02411145344376564,-0.04948781058192253,0.025833744555711746,0.01762864924967289]);
  net_h1_w[61] = new Float32Array([0.046101029962301254,0.036614175885915756,0.03536743298172951,0.015400542877614498,0.042006369680166245,0.009626730345189571,-0.013875783421099186,0.013232936151325703]);
  net_h1_w[62] = new Float32Array([0.010015123523771763,0.037230342626571655,0.03129942715167999,0.011843398213386536,0.03877498209476471,-0.04402763396501541,-0.031317926943302155,0.04926891252398491]);
  net_h1_w[63] = new Float32Array([-0.047302283346652985,-0.03616839647293091,0.009910687804222107,0.03445051610469818,0.03858228400349617,0.03773847594857216,-0.01289529912173748,0.04157612845301628]);
  net_h1_w[64] = new Float32Array([-0.8014034628868103,-0.8123686909675598,1.3056164979934692,1.2849138975143433,1.2448970079421997,-0.7785168886184692,1.246758222579956,-0.7889747619628906]);
  net_h1_w[65] = new Float32Array([-0.8224177956581116,-0.7896053194999695,1.393235683441162,1.3964605331420898,1.3434669971466064,-0.8274179100990295,1.4161311388015747,-0.8027569651603699]);
  net_h1_w[66] = new Float32Array([-0.6945506930351257,-0.6896531581878662,1.2800897359848022,1.318156123161316,1.3033849000930786,-0.6981750726699829,1.3008214235305786,-0.6843200325965881]);
  net_h1_w[67] = new Float32Array([-0.6152490973472595,-0.6336516737937927,1.222272515296936,1.193432092666626,1.1870328187942505,-0.6139261722564697,1.208791732788086,-0.6233680248260498]);
  net_h1_w[68] = new Float32Array([-0.8018535375595093,-0.7918372750282288,1.2803325653076172,1.2961915731430054,1.3063206672668457,-0.8056873083114624,1.313023567199707,-0.8142899870872498]);
  net_h1_w[69] = new Float32Array([-0.603216826915741,-0.6006819605827332,1.2486586570739746,1.2864279747009277,1.2709145545959473,-0.5890564322471619,1.2717941999435425,-0.6226709485054016]);
  net_h1_w[70] = new Float32Array([-0.6372976303100586,-0.6362158060073853,1.2265651226043701,1.183078646659851,1.2059012651443481,-0.603272557258606,1.2105931043624878,-0.6016232371330261]);
  net_h1_w[71] = new Float32Array([-0.6925973892211914,-0.6906623244285583,1.2173641920089722,1.1873154640197754,1.2572578191757202,-0.6692846417427063,1.2245728969573975,-0.6587172150611877]);
  net_h1_w[72] = new Float32Array([-0.6506180167198181,-0.6591389179229736,1.0797258615493774,1.041992425918579,1.0339322090148926,-0.6495694518089294,1.052237629890442,-0.6595274806022644]);
  net_h1_w[73] = new Float32Array([-0.7118653059005737,-0.7039377689361572,1.2561005353927612,1.2605326175689697,1.2679226398468018,-0.6877505779266357,1.2581851482391357,-0.6700053811073303]);
  net_h1_w[74] = new Float32Array([-0.9783111810684204,-0.9730981588363647,1.521385908126831,1.5328842401504517,1.488396406173706,-0.9503946900367737,1.4640123844146729,-0.9507269859313965]);
  net_h1_w[75] = new Float32Array([-0.8703243136405945,-0.8705097436904907,1.3751920461654663,1.4228124618530273,1.440118670463562,-0.8564742803573608,1.4533437490463257,-0.8465840816497803]);
  net_h1_w[76] = new Float32Array([-0.6993130445480347,-0.7095442414283752,1.4153910875320435,1.401451826095581,1.424330711364746,-0.7231853008270264,1.4179388284683228,-0.7082788944244385]);
  net_h1_w[77] = new Float32Array([-0.8668698072433472,-0.8675337433815002,1.421217918395996,1.4597734212875366,1.4202516078948975,-0.866051971912384,1.4611581563949585,-0.8488783240318298]);
  net_h1_w[78] = new Float32Array([-0.7184613347053528,-0.737130343914032,1.3447471857070923,1.300498366355896,1.3316045999526978,-0.7170149683952332,1.2914834022521973,-0.7279311418533325]);
  net_h1_w[79] = new Float32Array([-0.8184530735015869,-0.7736522555351257,1.2743457555770874,1.3089869022369385,1.278546929359436,-0.7718416452407837,1.3153687715530396,-0.7703045606613159]);
  net_h1_w[80] = new Float32Array([-0.7273686528205872,-0.7223682403564453,1.371686577796936,1.3932229280471802,1.4157720804214478,-0.7412625551223755,1.4293826818466187,-0.7359915971755981]);
  net_h1_w[81] = new Float32Array([-1.0286197662353516,-1.0228838920593262,1.5577236413955688,1.57449471950531,1.5453438758850098,-1.0151430368423462,1.5225849151611328,-1.0428733825683594]);
  net_h1_w[82] = new Float32Array([-0.8910444378852844,-0.9042787551879883,1.4447376728057861,1.487337350845337,1.5093531608581543,-0.8650842308998108,1.4711756706237793,-0.8780534863471985]);
  net_h1_w[83] = new Float32Array([-0.975008487701416,-0.9822301268577576,1.635804295539856,1.5575894117355347,1.6171871423721313,-0.9412626028060913,1.6078191995620728,-0.9528512954711914]);
  net_h1_w[84] = new Float32Array([-0.8472446203231812,-0.841032087802887,1.5986380577087402,1.652434229850769,1.6168841123580933,-0.8509359955787659,1.6167086362838745,-0.8425423502922058]);
  net_h1_w[85] = new Float32Array([-0.7605991363525391,-0.7870262265205383,1.471369981765747,1.4819107055664062,1.4932717084884644,-0.7717966437339783,1.4578360319137573,-0.77776038646698]);
  net_h1_w[86] = new Float32Array([-0.9649139046669006,-0.9662351012229919,1.6364758014678955,1.6372977495193481,1.6382038593292236,-0.944977343082428,1.619423270225525,-0.9390086531639099]);
  net_h1_w[87] = new Float32Array([-0.32561492919921875,-0.31819549202919006,0.9198046922683716,0.9948581457138062,0.9442418813705444,-0.3196852207183838,0.9788299798965454,-0.3228137791156769]);
  net_h1_w[88] = new Float32Array([-0.7435983419418335,-0.7286750078201294,1.1914979219436646,1.176925778388977,1.1786658763885498,-0.7190876007080078,1.1855666637420654,-0.7006126046180725]);
  net_h1_w[89] = new Float32Array([-1.0927817821502686,-1.0935263633728027,1.422393560409546,1.3959343433380127,1.353119969367981,-1.0713753700256348,1.386674404144287,-1.12394118309021]);
  net_h1_w[90] = new Float32Array([-1.1242430210113525,-1.1088669300079346,1.782283902168274,1.732694387435913,1.7261731624603271,-1.1358376741409302,1.7420395612716675,-1.108102560043335]);
  net_h1_w[91] = new Float32Array([-1.053704857826233,-1.0867244005203247,1.6006120443344116,1.6271339654922485,1.6577633619308472,-1.066362738609314,1.683090329170227,-1.0480619668960571]);
  net_h1_w[92] = new Float32Array([-1.0670665502548218,-1.0484389066696167,1.542898178100586,1.5619533061981201,1.5471363067626953,-1.0696598291397095,1.5895529985427856,-1.0576014518737793]);
  net_h1_w[93] = new Float32Array([-0.9109228849411011,-0.8980289101600647,1.5675010681152344,1.6404236555099487,1.5836983919143677,-0.8729702234268188,1.595947027206421,-0.8949482440948486]);
  net_h1_w[94] = new Float32Array([-1.029503345489502,-1.0118542909622192,1.4399532079696655,1.5066890716552734,1.4625684022903442,-1.029653549194336,1.49666428565979,-1.0153254270553589]);
  net_h1_w[95] = new Float32Array([-0.9110384583473206,-0.9317229986190796,1.4754287004470825,1.4485948085784912,1.419561505317688,-0.9451613426208496,1.4646127223968506,-0.9175288081169128]);
  net_h1_w[96] = new Float32Array([-0.9800083637237549,-1.017950177192688,1.2130144834518433,1.2316484451293945,1.1959341764450073,-1.0252172946929932,1.257797360420227,-1.0155105590820312]);
  net_h1_w[97] = new Float32Array([-0.8538056015968323,-0.8644818663597107,1.4563664197921753,1.4326192140579224,1.421455979347229,-0.8628068566322327,1.4363921880722046,-0.8597186207771301]);
  net_h1_w[98] = new Float32Array([-1.0148909091949463,-1.0020995140075684,1.3793779611587524,1.4353106021881104,1.3734962940216064,-1.0043991804122925,1.41689133644104,-0.9818023443222046]);
  net_h1_w[99] = new Float32Array([-1.1118513345718384,-1.1135668754577637,1.5077037811279297,1.485918402671814,1.542467474937439,-1.0866490602493286,1.5066226720809937,-1.0774983167648315]);
  net_h1_w[100] = new Float32Array([-1.0684648752212524,-1.0520901679992676,1.529409646987915,1.5694231986999512,1.5401360988616943,-1.038620114326477,1.5831578969955444,-1.0418100357055664]);
  net_h1_w[101] = new Float32Array([-1.1449135541915894,-1.1129629611968994,1.5062434673309326,1.5473146438598633,1.5878386497497559,-1.139177918434143,1.5522369146347046,-1.116772174835205]);
  net_h1_w[102] = new Float32Array([-0.976300835609436,-0.9597336053848267,1.4491477012634277,1.4147082567214966,1.4767744541168213,-0.9597065448760986,1.4926559925079346,-0.9531465768814087]);
  net_h1_w[103] = new Float32Array([-0.9096388816833496,-0.8547431230545044,1.1653000116348267,1.1948699951171875,1.2213479280471802,-0.892735481262207,1.2240854501724243,-0.894580066204071]);
  net_h1_w[104] = new Float32Array([-0.9828026294708252,-0.9441791772842407,1.1241557598114014,1.1461395025253296,1.137753963470459,-0.9672927260398865,1.1501551866531372,-1.0183980464935303]);
  net_h1_w[105] = new Float32Array([-1.0239124298095703,-0.9751302003860474,1.1280087232589722,1.1685454845428467,1.1637578010559082,-1.0160237550735474,1.1100093126296997,-0.9311076402664185]);
  net_h1_w[106] = new Float32Array([-1.0632673501968384,-1.0382462739944458,1.2316569089889526,1.2351739406585693,1.2200829982757568,-1.036973237991333,1.2970186471939087,-1.0853080749511719]);
  net_h1_w[107] = new Float32Array([-1.115477204322815,-1.1176625490188599,1.5188747644424438,1.567144513130188,1.5700584650039673,-1.0919651985168457,1.555582880973816,-1.0968494415283203]);
  net_h1_w[108] = new Float32Array([-1.0112212896347046,-0.9871727228164673,1.4046050310134888,1.4198755025863647,1.4419416189193726,-0.9983702898025513,1.461509346961975,-1.0032674074172974]);
  net_h1_w[109] = new Float32Array([-1.0755348205566406,-1.027727484703064,1.2178906202316284,1.2825015783309937,1.2767882347106934,-1.0621182918548584,1.2717071771621704,-0.9970691204071045]);
  net_h1_w[110] = new Float32Array([-0.903645932674408,-0.8860030770301819,1.242799997329712,1.2072035074234009,1.2562938928604126,-0.9100800156593323,1.225040316581726,-0.9219908118247986]);
  net_h1_w[111] = new Float32Array([-0.9854354858398438,-1.0001869201660156,1.166350245475769,1.1190831661224365,1.2010881900787354,-0.9661364555358887,1.1539850234985352,-0.9903043508529663]);
  net_h1_w[112] = new Float32Array([-0.9479570984840393,-0.9849972724914551,1.024452567100525,1.0459949970245361,1.018254041671753,-1.2463054656982422,1.0306532382965088,-1.004581093788147]);
  net_h1_w[113] = new Float32Array([-1.0513489246368408,-1.0140377283096313,1.3090850114822388,1.35197114944458,1.31637704372406,-1.0248665809631348,1.3216841220855713,-1.068608045578003]);
  net_h1_w[114] = new Float32Array([-0.8903898596763611,-0.8798354268074036,1.1896741390228271,1.1613212823867798,1.2102426290512085,-0.8893772959709167,1.2168012857437134,-0.8923043012619019]);
  net_h1_w[115] = new Float32Array([-0.9690166711807251,-1.0043963193893433,1.2602161169052124,1.2303415536880493,1.2607955932617188,-0.9599737524986267,1.2379761934280396,-0.9638787508010864]);
  net_h1_w[116] = new Float32Array([-0.9491924047470093,-0.9960224032402039,1.2580503225326538,1.2206614017486572,1.248997688293457,-0.999763548374176,1.2597981691360474,-1.005802035331726]);
  net_h1_w[117] = new Float32Array([-1.0097529888153076,-0.9485726356506348,1.2446649074554443,1.2268203496932983,1.2828634977340698,-1.0079193115234375,1.2473841905593872,-1.0097182989120483]);
  net_h1_w[118] = new Float32Array([-0.7255294919013977,-0.7532445788383484,1.1126863956451416,1.0734992027282715,1.1182613372802734,-0.736299991607666,1.0776209831237793,-0.7711594104766846]);
  net_h1_w[119] = new Float32Array([-0.8667773008346558,-0.8294283151626587,1.0826412439346313,1.0986980199813843,1.0901954174041748,-0.8782898187637329,1.084322214126587,-0.8487513065338135]);
  net_h1_w[120] = new Float32Array([-0.7113891839981079,-0.726836621761322,0.931768536567688,0.9317811131477356,0.9034864902496338,-0.7109341621398926,0.9446762204170227,-0.7111722230911255]);
  net_h1_w[121] = new Float32Array([-0.8721933960914612,-0.9227015376091003,1.0469502210617065,1.0564196109771729,1.0473567247390747,-0.8338122963905334,1.0205391645431519,-0.9033815860748291]);
  net_h1_w[122] = new Float32Array([-1.1413025856018066,-1.0136505365371704,1.1028642654418945,1.1457164287567139,1.1419824361801147,-1.2406270503997803,1.105944275856018,-1.1246998310089111]);
  net_h1_w[123] = new Float32Array([-0.7860425710678101,-0.8396619558334351,1.0419180393218994,1.014245629310608,0.986139178276062,-0.815951406955719,1.0625537633895874,-0.7691472768783569]);
  net_h1_w[124] = new Float32Array([-0.8028749227523804,-0.8548323512077332,1.0722107887268066,1.1129032373428345,1.0516198873519897,-0.8036185503005981,1.0999983549118042,-0.8226717114448547]);
  net_h1_w[125] = new Float32Array([-0.9997055530548096,-0.9913650751113892,1.2182966470718384,1.244260549545288,1.2190265655517578,-0.9699967503547668,1.2705070972442627,-0.9827566146850586]);
  net_h1_w[126] = new Float32Array([-0.8925313949584961,-0.885836124420166,1.021077275276184,1.0458825826644897,1.0555081367492676,-0.9099915623664856,1.0530405044555664,-0.8889073133468628]);
  net_h1_w[127] = new Float32Array([-0.8517850041389465,-0.8590465188026428,1.0658888816833496,1.0765588283538818,1.102785587310791,-0.8723756074905396,1.0880764722824097,-0.848829984664917]);
  net_h1_w[128] = new Float32Array([-1.184875249862671,-1.1876229047775269,1.9826844930648804,1.9987157583236694,2.011583089828491,-1.186652660369873,2.0417158603668213,-1.1742967367172241]);
  net_h1_w[129] = new Float32Array([-0.9250956773757935,-0.9262403845787048,1.3496507406234741,1.4053317308425903,1.384106993675232,-0.9330289363861084,1.4239424467086792,-0.9476474523544312]);
  net_h1_w[130] = new Float32Array([-0.9429969191551208,-0.9387103915214539,1.4905529022216797,1.5092957019805908,1.524427890777588,-0.912217915058136,1.4794645309448242,-0.9016434550285339]);
  net_h1_w[131] = new Float32Array([-1.0062272548675537,-0.9902983903884888,1.7079086303710938,1.679173469543457,1.6665856838226318,-0.996139407157898,1.679045557975769,-0.993049681186676]);
  net_h1_w[132] = new Float32Array([-1.1253466606140137,-1.094590425491333,1.7341097593307495,1.7389081716537476,1.675365924835205,-1.0816560983657837,1.6976145505905151,-1.0838357210159302]);
  net_h1_w[133] = new Float32Array([-0.8318954706192017,-0.8513911366462708,1.1959481239318848,1.266049861907959,1.2490092515945435,-0.8458022475242615,1.2464603185653687,-0.8280177116394043]);
  net_h1_w[134] = new Float32Array([-0.8574349284172058,-0.8352904915809631,1.3574391603469849,1.3882737159729004,1.3934746980667114,-0.8446173667907715,1.389353632926941,-0.862973153591156]);
  net_h1_w[135] = new Float32Array([-1.2359060049057007,-1.214643955230713,1.6826385259628296,1.70102059841156,1.662390947341919,-1.1996114253997803,1.7346816062927246,-1.2122061252593994]);
  net_h1_w[136] = new Float32Array([-0.9485906362533569,-0.9505727887153625,1.3913249969482422,1.4072513580322266,1.4040637016296387,-0.9578232169151306,1.418997883796692,-0.9384227395057678]);
  net_h1_w[137] = new Float32Array([-1.1214171648025513,-1.086467981338501,1.7061405181884766,1.7239396572113037,1.6813985109329224,-1.1134902238845825,1.6704187393188477,-1.0844309329986572]);
  net_h1_w[138] = new Float32Array([-1.1460894346237183,-1.15306556224823,1.755662202835083,1.710593581199646,1.758322834968567,-1.1277397871017456,1.7601957321166992,-1.1443209648132324]);
  net_h1_w[139] = new Float32Array([-0.8389164805412292,-0.8151134252548218,1.445512056350708,1.498000979423523,1.4613234996795654,-0.803800642490387,1.4476526975631714,-0.8094801902770996]);
  net_h1_w[140] = new Float32Array([-0.8901698589324951,-0.8751288056373596,1.3518030643463135,1.3200819492340088,1.3665235042572021,-0.8247803449630737,1.302139163017273,-0.8909623026847839]);
  net_h1_w[141] = new Float32Array([-1.2617683410644531,-1.2909313440322876,1.8868874311447144,1.8446733951568604,1.8453017473220825,-1.2873520851135254,1.8825984001159668,-1.2773605585098267]);
  net_h1_w[142] = new Float32Array([-1.1780060529708862,-1.1375516653060913,1.604852557182312,1.6268304586410522,1.636328935623169,-1.1777164936065674,1.6171611547470093,-1.1648935079574585]);
  net_h1_w[143] = new Float32Array([-0.9395718574523926,-0.9410178065299988,1.4914666414260864,1.5212032794952393,1.5266996622085571,-0.9395769834518433,1.5285117626190186,-0.9232178926467896]);
  net_h1_w[144] = new Float32Array([-1.03415846824646,-1.0264943838119507,1.3725214004516602,1.3492540121078491,1.371212363243103,-0.9955171346664429,1.3621944189071655,-0.9989848136901855]);
  net_h1_w[145] = new Float32Array([-1.206923246383667,-1.1707872152328491,1.6970791816711426,1.6952040195465088,1.7124743461608887,-1.1694201231002808,1.714197039604187,-1.204028844833374]);
  net_h1_w[146] = new Float32Array([-0.7870521545410156,-0.7790948152542114,1.318886160850525,1.3008251190185547,1.28147554397583,-0.7632660269737244,1.3328975439071655,-0.7785592675209045]);
  net_h1_w[147] = new Float32Array([-1.0701119899749756,-1.0654277801513672,1.6421067714691162,1.6707358360290527,1.6844662427902222,-1.080053448677063,1.5951231718063354,-1.07535719871521]);
  net_h1_w[148] = new Float32Array([-1.032366156578064,-1.0122653245925903,1.8542253971099854,1.8658368587493896,1.871838092803955,-1.0014243125915527,1.9167841672897339,-1.0138603448867798]);
  net_h1_w[149] = new Float32Array([-0.8404132127761841,-0.8295896649360657,1.3725132942199707,1.3925302028656006,1.405584692955017,-0.8382189273834229,1.409468173980713,-0.8273442387580872]);
  net_h1_w[150] = new Float32Array([-1.0902079343795776,-1.1175349950790405,1.7856273651123047,1.8406147956848145,1.8613933324813843,-1.0942538976669312,1.8500514030456543,-1.107369065284729]);
  net_h1_w[151] = new Float32Array([-0.7957843542098999,-0.8128412365913391,1.2562055587768555,1.2047858238220215,1.2242168188095093,-0.9010416865348816,1.254780888557434,-0.7934305667877197]);
  net_h1_w[152] = new Float32Array([-1.1168081760406494,-1.1273424625396729,1.5136691331863403,1.5106767416000366,1.556541085243225,-1.1214520931243896,1.5405848026275635,-1.1086281538009644]);
  net_h1_w[153] = new Float32Array([-1.0815775394439697,-1.0799232721328735,1.4783483743667603,1.5189334154129028,1.4865833520889282,-1.0711084604263306,1.5272823572158813,-1.0358538627624512]);
  net_h1_w[154] = new Float32Array([-0.9878480434417725,-0.9923874735832214,1.539322018623352,1.5743142366409302,1.599327802658081,-0.9752851128578186,1.5239518880844116,-0.9551017880439758]);
  net_h1_w[155] = new Float32Array([-0.9461007118225098,-0.9227359294891357,1.661563754081726,1.7234978675842285,1.6382598876953125,-0.9308277368545532,1.6997569799423218,-0.9161046743392944]);
  net_h1_w[156] = new Float32Array([-1.096107006072998,-1.077834963798523,1.6899009943008423,1.6571683883666992,1.6955766677856445,-1.062446117401123,1.7018812894821167,-1.0806084871292114]);
  net_h1_w[157] = new Float32Array([-0.969887912273407,-0.9746289849281311,1.598711609840393,1.5519365072250366,1.5318409204483032,-0.9610006213188171,1.5269560813903809,-0.9442375898361206]);
  net_h1_w[158] = new Float32Array([-1.466226577758789,-1.287194848060608,1.6145468950271606,1.529392957687378,1.5772958993911743,-1.4760191440582275,1.5979760885238647,-1.389479160308838]);
  net_h1_w[159] = new Float32Array([-1.0964651107788086,-1.059425711631775,1.6496429443359375,1.6463780403137207,1.6336185932159424,-1.0747668743133545,1.6031981706619263,-1.0610893964767456]);
  net_h1_w[160] = new Float32Array([-1.236215591430664,-1.1856842041015625,1.5943028926849365,1.6375705003738403,1.6406663656234741,-1.2077608108520508,1.6570054292678833,-1.2063709497451782]);
  net_h1_w[161] = new Float32Array([-1.1785589456558228,-1.1994999647140503,1.4884217977523804,1.4989101886749268,1.5312544107437134,-1.1900919675827026,1.5672301054000854,-1.1612257957458496]);
  net_h1_w[162] = new Float32Array([-1.0659695863723755,-1.0676816701889038,1.4820637702941895,1.5284055471420288,1.5111491680145264,-1.0707498788833618,1.5692328214645386,-1.0652865171432495]);
  net_h1_w[163] = new Float32Array([-1.0029512643814087,-0.9910890460014343,1.629217505455017,1.6432067155838013,1.6075849533081055,-1.1988471746444702,1.6161558628082275,-1.0108495950698853]);
  net_h1_w[164] = new Float32Array([-1.11849844455719,-1.1014060974121094,1.6749753952026367,1.7074017524719238,1.7054047584533691,-1.1143327951431274,1.6391701698303223,-1.10609769821167]);
  net_h1_w[165] = new Float32Array([-1.0718791484832764,-1.0701521635055542,1.5211317539215088,1.4849586486816406,1.4695738554000854,-1.0657013654708862,1.4777544736862183,-1.0259506702423096]);
  net_h1_w[166] = new Float32Array([-1.035979151725769,-1.0180115699768066,1.5462406873703003,1.549391269683838,1.5180732011795044,-1.0346159934997559,1.5449498891830444,-1.0254558324813843]);
  net_h1_w[167] = new Float32Array([-1.033781886100769,-1.008241891860962,1.4353355169296265,1.4077023267745972,1.4392130374908447,-0.979868471622467,1.390331506729126,-1.0078500509262085]);
  net_h1_w[168] = new Float32Array([-1.1183432340621948,-1.034303069114685,1.2421244382858276,1.227160930633545,1.2644563913345337,-1.0969328880310059,1.227888584136963,-1.0976005792617798]);
  net_h1_w[169] = new Float32Array([-1.1408530473709106,-1.1325913667678833,1.4378442764282227,1.4817386865615845,1.44813072681427,-1.1584221124649048,1.4786659479141235,-1.1838935613632202]);
  net_h1_w[170] = new Float32Array([-1.1007356643676758,-1.1494486331939697,1.4213980436325073,1.3876352310180664,1.3636224269866943,-1.1800148487091064,1.3672045469284058,-1.1089799404144287]);
  net_h1_w[171] = new Float32Array([-1.0246785879135132,-1.0511976480484009,1.3137993812561035,1.2663249969482422,1.2743295431137085,-1.043840765953064,1.2733380794525146,-1.0350619554519653]);
  net_h1_w[172] = new Float32Array([-1.3574987649917603,-1.292262315750122,1.4137920141220093,1.425602912902832,1.4381238222122192,-1.411314845085144,1.4878238439559937,-1.331385850906372]);
  net_h1_w[173] = new Float32Array([-1.179620623588562,-1.1714341640472412,1.4359767436981201,1.4615752696990967,1.422656536102295,-1.1614044904708862,1.4242923259735107,-1.1759579181671143]);
  net_h1_w[174] = new Float32Array([-1.0256545543670654,-1.0772173404693604,1.4142467975616455,1.4529956579208374,1.4153673648834229,-1.031594157218933,1.4378433227539062,-1.0260857343673706]);
  net_h1_w[175] = new Float32Array([-1.1777622699737549,-1.2080069780349731,1.370298147201538,1.4265578985214233,1.4569569826126099,-1.2018420696258545,1.4439486265182495,-1.1896710395812988]);
  net_h1_w[176] = new Float32Array([-0.9814583659172058,-0.967208206653595,1.3240888118743896,1.2655826807022095,1.2564237117767334,-0.9690868854522705,1.3334507942199707,-1.001555323600769]);
  net_h1_w[177] = new Float32Array([-1.1240524053573608,-1.1490261554718018,1.30887770652771,1.2888598442077637,1.3870512247085571,-1.0988385677337646,1.3757637739181519,-1.1120494604110718]);
  net_h1_w[178] = new Float32Array([-1.0773003101348877,-1.0786651372909546,1.415429949760437,1.363142967224121,1.425514817237854,-1.0808687210083008,1.4280171394348145,-1.111016869544983]);
  net_h1_w[179] = new Float32Array([-1.1704539060592651,-1.2080308198928833,1.3635951280593872,1.4261970520019531,1.399891972541809,-1.1733684539794922,1.362564206123352,-1.19287109375]);
  net_h1_w[180] = new Float32Array([-1.1187584400177002,-1.07888925075531,1.2643336057662964,1.3374708890914917,1.3337934017181396,-1.0986770391464233,1.3203792572021484,-1.067561149597168]);
  net_h1_w[181] = new Float32Array([-1.192448377609253,-1.2138831615447998,1.4798789024353027,1.4705604314804077,1.4907857179641724,-1.2175756692886353,1.4927009344100952,-1.2186779975891113]);
  net_h1_w[182] = new Float32Array([-1.1471710205078125,-1.125266432762146,1.3148901462554932,1.3157851696014404,1.3401702642440796,-1.1562057733535767,1.2943933010101318,-1.0846123695373535]);
  net_h1_w[183] = new Float32Array([-0.9241042137145996,-0.9043235182762146,1.2879068851470947,1.2840391397476196,1.2735702991485596,-0.9360970854759216,1.3171013593673706,-0.9404827952384949]);
  net_h1_w[184] = new Float32Array([-0.8493894338607788,-0.8928903341293335,1.1741620302200317,1.1667709350585938,1.1582520008087158,-0.8576368689537048,1.1728146076202393,-0.8844106197357178]);
  net_h1_w[185] = new Float32Array([-1.1073250770568848,-1.1230696439743042,1.4169981479644775,1.4489037990570068,1.4357593059539795,-1.0897938013076782,1.4463571310043335,-1.0734202861785889]);
  net_h1_w[186] = new Float32Array([-1.2006137371063232,-1.1885825395584106,1.3169671297073364,1.3172338008880615,1.3031375408172607,-1.1611300706863403,1.2823867797851562,-1.1682993173599243]);
  net_h1_w[187] = new Float32Array([-1.1618167161941528,-1.1459178924560547,1.3553526401519775,1.37322199344635,1.3902289867401123,-1.1717727184295654,1.3968307971954346,-1.12384831905365]);
  net_h1_w[188] = new Float32Array([-1.2030577659606934,-1.1788485050201416,1.5022128820419312,1.4933178424835205,1.517530918121338,-1.1687440872192383,1.483018398284912,-1.1962072849273682]);
  net_h1_w[189] = new Float32Array([-1.100311517715454,-1.1031250953674316,1.219361424446106,1.2184927463531494,1.200893521308899,-1.0546237230300903,1.1597201824188232,-1.0902029275894165]);
  net_h1_w[190] = new Float32Array([-0.9934535026550293,-0.9359029531478882,1.2402596473693848,1.3004963397979736,1.292565107345581,-0.9296265840530396,1.2322927713394165,-0.952174961566925]);
  net_h1_w[191] = new Float32Array([-0.8933980464935303,-0.891119658946991,1.2596993446350098,1.2004095315933228,1.2168092727661133,-0.9218965768814087,1.2717758417129517,-0.8773483633995056]);
  net_h1_w[192] = new Float32Array([-1.72841477394104,-1.7265548706054688,2.597598075866699,2.577359437942505,2.577474355697632,-1.7101280689239502,2.6039247512817383,-1.6977890729904175]);
  net_h1_w[193] = new Float32Array([-1.7393040657043457,-1.740103840827942,2.6974480152130127,2.6876370906829834,2.7091481685638428,-1.7172942161560059,2.7204971313476562,-1.7086831331253052]);
  net_h1_w[194] = new Float32Array([-1.5082625150680542,-1.493571162223816,2.407904863357544,2.43249249458313,2.4366674423217773,-1.491344690322876,2.399221897125244,-1.48672354221344]);
  net_h1_w[195] = new Float32Array([-1.7171262502670288,-1.7012628316879272,2.491687059402466,2.507559299468994,2.517463207244873,-1.6843218803405762,2.4967548847198486,-1.6928855180740356]);
  net_h1_w[196] = new Float32Array([-1.6380409002304077,-1.6433264017105103,2.5816195011138916,2.591989755630493,2.60550856590271,-1.620500922203064,2.615168809890747,-1.6156761646270752]);
  net_h1_w[197] = new Float32Array([-1.6352401971817017,-1.6288353204727173,2.49835467338562,2.555096387863159,2.477864980697632,-1.620912790298462,2.485173225402832,-1.617763638496399]);
  net_h1_w[198] = new Float32Array([-1.579908847808838,-1.5885043144226074,2.575059413909912,2.615327835083008,2.5723917484283447,-1.5735284090042114,2.589397668838501,-1.562631368637085]);
  net_h1_w[199] = new Float32Array([-1.6032257080078125,-1.600672721862793,2.510007858276367,2.5509536266326904,2.553771495819092,-1.5882103443145752,2.5489232540130615,-1.5924370288848877]);
  net_h1_w[200] = new Float32Array([-1.7940701246261597,-1.7862797975540161,2.58296799659729,2.5563435554504395,2.5749270915985107,-1.7770662307739258,2.57224702835083,-1.7791131734848022]);
  net_h1_w[201] = new Float32Array([-1.7380200624465942,-1.745143175125122,2.584951877593994,2.656503677368164,2.582711935043335,-1.7181260585784912,2.658053398132324,-1.739441156387329]);
  net_h1_w[202] = new Float32Array([-1.6637390851974487,-1.6659213304519653,2.5225319862365723,2.5463554859161377,2.5029923915863037,-1.64541494846344,2.5067031383514404,-1.6488479375839233]);
  net_h1_w[203] = new Float32Array([-1.81290602684021,-1.8175148963928223,2.619307279586792,2.5865840911865234,2.5889041423797607,-1.795538067817688,2.5830161571502686,-1.8077508211135864]);
  net_h1_w[204] = new Float32Array([-1.6361100673675537,-1.6449867486953735,2.4186244010925293,2.400313377380371,2.4067530632019043,-1.6244536638259888,2.4414634704589844,-1.6238499879837036]);
  net_h1_w[205] = new Float32Array([-1.7251501083374023,-1.7241895198822021,2.5039103031158447,2.4824697971343994,2.5328309535980225,-1.7143036127090454,2.539234161376953,-1.688206672668457]);
  net_h1_w[206] = new Float32Array([-1.6673002243041992,-1.6625652313232422,2.46863055229187,2.481337308883667,2.4934277534484863,-1.686173677444458,2.483604669570923,-1.655295491218567]);
  net_h1_w[207] = new Float32Array([-1.6572953462600708,-1.6374346017837524,2.4902875423431396,2.4986586570739746,2.54331374168396,-1.6416338682174683,2.518578052520752,-1.6234185695648193]);
  net_h1_w[208] = new Float32Array([-1.7769073247909546,-1.794950008392334,2.486186981201172,2.528230667114258,2.5055646896362305,-1.767478108406067,2.521113157272339,-1.7570972442626953]);
  net_h1_w[209] = new Float32Array([-1.831667184829712,-1.8361157178878784,2.5321450233459473,2.606215000152588,2.575223922729492,-1.8199585676193237,2.6054680347442627,-1.80194091796875]);
  net_h1_w[210] = new Float32Array([-1.6984138488769531,-1.6934115886688232,2.522581100463867,2.4963042736053467,2.458712100982666,-1.6718322038650513,2.5148043632507324,-1.6965017318725586]);
  net_h1_w[211] = new Float32Array([-1.9498074054718018,-1.9661766290664673,2.6039528846740723,2.652089834213257,2.662248134613037,-1.9710519313812256,2.6081252098083496,-1.9556177854537964]);
  net_h1_w[212] = new Float32Array([-1.8221001625061035,-1.826036810874939,2.6248252391815186,2.6014328002929688,2.623114585876465,-1.8187083005905151,2.641394853591919,-1.8126720190048218]);
  net_h1_w[213] = new Float32Array([-1.753219485282898,-1.7488478422164917,2.5463380813598633,2.53602933883667,2.5320281982421875,-1.742817997932434,2.584174394607544,-1.7477667331695557]);
  net_h1_w[214] = new Float32Array([-1.8228366374969482,-1.7973625659942627,2.597172498703003,2.625556468963623,2.644991159439087,-1.8072620630264282,2.656352996826172,-1.8114862442016602]);
  net_h1_w[215] = new Float32Array([-1.623392105102539,-1.6223654747009277,2.4927401542663574,2.488887071609497,2.4658877849578857,-1.6313130855560303,2.5424399375915527,-1.623681664466858]);
  net_h1_w[216] = new Float32Array([-1.6778502464294434,-1.6645748615264893,2.2944350242614746,2.306781768798828,2.3781368732452393,-1.660541296005249,2.378962993621826,-1.6470856666564941]);
  net_h1_w[217] = new Float32Array([-1.6945397853851318,-1.6908302307128906,2.494314432144165,2.4996893405914307,2.4546711444854736,-1.6749626398086548,2.487558126449585,-1.6801010370254517]);
  net_h1_w[218] = new Float32Array([-1.708817958831787,-1.7202520370483398,2.4608805179595947,2.5129141807556152,2.489838123321533,-1.7194949388504028,2.5119881629943848,-1.7221437692642212]);
  net_h1_w[219] = new Float32Array([-1.729305386543274,-1.7340470552444458,2.447815179824829,2.493220090866089,2.50685715675354,-1.7118510007858276,2.4775850772857666,-1.7111278772354126]);
  net_h1_w[220] = new Float32Array([-1.7071902751922607,-1.7074347734451294,2.553258180618286,2.615274429321289,2.5715863704681396,-1.70743727684021,2.5851144790649414,-1.704143762588501]);
  net_h1_w[221] = new Float32Array([-1.6745455265045166,-1.6887249946594238,2.5488505363464355,2.6160573959350586,2.5477614402770996,-1.6804336309432983,2.5567193031311035,-1.6531133651733398]);
  net_h1_w[222] = new Float32Array([-1.5784671306610107,-1.5931217670440674,2.4131875038146973,2.427570104598999,2.4761393070220947,-1.5802273750305176,2.4457850456237793,-1.57970130443573]);
  net_h1_w[223] = new Float32Array([-1.688334584236145,-1.71091890335083,2.509791612625122,2.5322201251983643,2.507395029067993,-1.7039388418197632,2.534337043762207,-1.6770519018173218]);
  net_h1_w[224] = new Float32Array([-1.6213648319244385,-1.6372967958450317,2.055474281311035,2.096926689147949,2.0469110012054443,-1.6309291124343872,2.057607650756836,-1.5928747653961182]);
  net_h1_w[225] = new Float32Array([-1.709153413772583,-1.730991244316101,2.300546169281006,2.324249267578125,2.3328776359558105,-1.7139577865600586,2.346092700958252,-1.7146663665771484]);
  net_h1_w[226] = new Float32Array([-1.8892701864242554,-1.8901045322418213,2.4452741146087646,2.4389476776123047,2.4706432819366455,-1.8582075834274292,2.4754319190979004,-1.8735826015472412]);
  net_h1_w[227] = new Float32Array([-1.7676479816436768,-1.7542812824249268,2.3041677474975586,2.2764058113098145,2.2411727905273438,-1.7418113946914673,2.227590322494507,-1.7134196758270264]);
  net_h1_w[228] = new Float32Array([-1.8216344118118286,-1.8378748893737793,2.345918893814087,2.383918285369873,2.369706630706787,-1.8373215198516846,2.3822948932647705,-1.8256722688674927]);
  net_h1_w[229] = new Float32Array([-1.820390224456787,-1.8224539756774902,2.3454062938690186,2.3061039447784424,2.330216407775879,-1.813387155532837,2.3425965309143066,-1.8166974782943726]);
  net_h1_w[230] = new Float32Array([-1.698983073234558,-1.7172271013259888,2.283071756362915,2.239126682281494,2.285801410675049,-1.683798909187317,2.2939915657043457,-1.696717381477356]);
  net_h1_w[231] = new Float32Array([-1.7722612619400024,-1.7547191381454468,2.2275331020355225,2.2374086380004883,2.2742466926574707,-1.7744991779327393,2.293919563293457,-1.7507483959197998]);
  net_h1_w[232] = new Float32Array([-1.7458006143569946,-1.7457481622695923,1.9768562316894531,2.048069477081299,2.040680408477783,-1.69166898727417,2.0146219730377197,-1.7082709074020386]);
  net_h1_w[233] = new Float32Array([-1.8437209129333496,-1.8471097946166992,2.1210670471191406,2.163346290588379,2.1308114528656006,-1.8416168689727783,2.207807779312134,-1.8530704975128174]);
  net_h1_w[234] = new Float32Array([-1.823136568069458,-1.8294451236724854,2.162219524383545,2.130490779876709,2.120730400085449,-1.799766182899475,2.1086294651031494,-1.79413902759552]);
  net_h1_w[235] = new Float32Array([-1.820016860961914,-1.8190499544143677,2.169077157974243,2.2179603576660156,2.240083932876587,-1.8448700904846191,2.2497754096984863,-1.8338545560836792]);
  net_h1_w[236] = new Float32Array([-1.8565412759780884,-1.861422061920166,2.1855075359344482,2.2181859016418457,2.170870065689087,-1.8761672973632812,2.1703593730926514,-1.8324220180511475]);
  net_h1_w[237] = new Float32Array([-1.8234444856643677,-1.85152006149292,2.193852424621582,2.1992673873901367,2.206958532333374,-1.8354496955871582,2.163177490234375,-1.827579140663147]);
  net_h1_w[238] = new Float32Array([-1.8508135080337524,-1.848921775817871,2.1908118724823,2.212756633758545,2.1907095909118652,-1.8179125785827637,2.1891109943389893,-1.8640177249908447]);
  net_h1_w[239] = new Float32Array([-1.7258292436599731,-1.7051864862442017,1.9756100177764893,2.017160177230835,1.9878944158554077,-1.702911376953125,2.033965826034546,-1.7600101232528687]);
  net_h1_w[240] = new Float32Array([-1.8300195932388306,-1.7973626852035522,2.0681545734405518,2.064690589904785,2.0786426067352295,-1.7967355251312256,2.0555853843688965,-1.8066514730453491]);
  net_h1_w[241] = new Float32Array([-1.8438541889190674,-1.8417845964431763,2.1779606342315674,2.2050678730010986,2.1535351276397705,-1.8292160034179688,2.20161509513855,-1.8525426387786865]);
  net_h1_w[242] = new Float32Array([-1.8864332437515259,-1.9145562648773193,2.240093469619751,2.2455782890319824,2.282728433609009,-1.9264405965805054,2.259727954864502,-1.9177429676055908]);
  net_h1_w[243] = new Float32Array([-1.8412916660308838,-1.822261929512024,2.217259645462036,2.2049167156219482,2.152167320251465,-1.8716003894805908,2.1748905181884766,-1.8191512823104858]);
  net_h1_w[244] = new Float32Array([-1.8137985467910767,-1.7856805324554443,2.193040609359741,2.175117015838623,2.1697676181793213,-1.792691707611084,2.1628262996673584,-1.7811126708984375]);
  net_h1_w[245] = new Float32Array([-1.8429090976715088,-1.8802576065063477,2.200605869293213,2.2256782054901123,2.195376396179199,-1.8765496015548706,2.21753191947937,-1.851872444152832]);
  net_h1_w[246] = new Float32Array([-1.763801097869873,-1.7796883583068848,2.134927749633789,2.1602249145507812,2.1877171993255615,-1.838118314743042,2.174678087234497,-1.8189153671264648]);
  net_h1_w[247] = new Float32Array([-1.77961003780365,-1.7640517950057983,2.0725228786468506,2.0838911533355713,2.0860254764556885,-1.7786409854888916,2.055985927581787,-1.7684944868087769]);
  net_h1_w[248] = new Float32Array([-1.8411624431610107,-1.8743460178375244,2.0713226795196533,2.0441131591796875,2.035691261291504,-1.825595736503601,2.0326733589172363,-1.822945237159729]);
  net_h1_w[249] = new Float32Array([-1.8561830520629883,-1.852270245552063,2.150479316711426,2.1363611221313477,2.1494927406311035,-1.8708255290985107,2.108110189437866,-1.8630999326705933]);
  net_h1_w[250] = new Float32Array([-1.8304859399795532,-1.8599423170089722,2.2744698524475098,2.2652103900909424,2.243476629257202,-1.8845301866531372,2.2722206115722656,-1.86204195022583]);
  net_h1_w[251] = new Float32Array([-1.7998013496398926,-1.7647839784622192,2.2261440753936768,2.207759380340576,2.1971182823181152,-1.782018780708313,2.231570243835449,-1.764393925666809]);
  net_h1_w[252] = new Float32Array([-1.8758755922317505,-1.8514050245285034,2.2509286403656006,2.2253315448760986,2.263000249862671,-1.8119326829910278,2.211989164352417,-1.8164622783660889]);
  net_h1_w[253] = new Float32Array([-1.8721932172775269,-1.8576315641403198,2.271226644515991,2.2823646068573,2.272263765335083,-1.8587578535079956,2.274794101715088,-1.8787778615951538]);
  net_h1_w[254] = new Float32Array([-1.871963381767273,-1.8418537378311157,2.1165637969970703,2.1691434383392334,2.159705400466919,-1.8245919942855835,2.124816417694092,-1.867213249206543]);
  net_h1_w[255] = new Float32Array([-1.8625473976135254,-1.8603063821792603,2.0617856979370117,2.0604515075683594,2.0308682918548584,-1.849843978881836,2.0432028770446777,-1.8385584354400635]);
  net_h1_w[256] = new Float32Array([-1.8613461256027222,-1.8573695421218872,4.374464988708496,4.326956748962402,4.368321895599365,-1.8485718965530396,4.3669538497924805,-1.8482316732406616]);
  net_h1_w[257] = new Float32Array([-1.747100830078125,-1.741595983505249,4.100042819976807,4.097121715545654,4.1259541511535645,-1.723340392112732,4.098124980926514,-1.7291934490203857]);
  net_h1_w[258] = new Float32Array([-1.816245436668396,-1.813987135887146,4.09252405166626,4.109631061553955,4.1045241355896,-1.802121639251709,4.164682388305664,-1.804105520248413]);
  net_h1_w[259] = new Float32Array([-1.7406858205795288,-1.7387137413024902,3.6838576793670654,3.7425577640533447,3.7511370182037354,-1.7316603660583496,3.6962344646453857,-1.7197049856185913]);
  net_h1_w[260] = new Float32Array([-1.7259677648544312,-1.7209054231643677,4.154687404632568,4.121886730194092,4.160565376281738,-1.7071549892425537,4.187617301940918,-1.711715817451477]);
  net_h1_w[261] = new Float32Array([-1.791055679321289,-1.7853556871414185,4.2385101318359375,4.252310752868652,4.2422380447387695,-1.7790675163269043,4.185163974761963,-1.7766021490097046]);
  net_h1_w[262] = new Float32Array([-1.861661434173584,-1.858699083328247,4.46513557434082,4.534857749938965,4.4819159507751465,-1.8425748348236084,4.535700798034668,-1.8435425758361816]);
  net_h1_w[263] = new Float32Array([-1.7628346681594849,-1.7595425844192505,4.351432800292969,4.426334381103516,4.37914514541626,-1.7456281185150146,4.425806522369385,-1.7463312149047852]);
  net_h1_w[264] = new Float32Array([-2.325378894805908,-2.3310189247131348,3.200057029724121,3.209531545639038,3.151317834854126,-2.3219025135040283,3.2086844444274902,-2.318319320678711]);
  net_h1_w[265] = new Float32Array([-2.394942045211792,-2.400775671005249,3.530043601989746,3.4990479946136475,3.5504112243652344,-2.383913993835449,3.5687832832336426,-2.384319305419922]);
  net_h1_w[266] = new Float32Array([-2.4026920795440674,-2.393862009048462,3.5872020721435547,3.6068155765533447,3.5256357192993164,-2.3878934383392334,3.5612447261810303,-2.377682685852051]);
  net_h1_w[267] = new Float32Array([-2.068753957748413,-2.0716357231140137,3.2214698791503906,3.196382522583008,3.198117971420288,-2.0622975826263428,3.1715426445007324,-2.057307720184326]);
  net_h1_w[268] = new Float32Array([-2.336156129837036,-2.3328981399536133,3.530026435852051,3.4790802001953125,3.4687600135803223,-2.317470073699951,3.483724355697632,-2.3128981590270996]);
  net_h1_w[269] = new Float32Array([-2.2750539779663086,-2.2715976238250732,3.453537940979004,3.475830554962158,3.4710707664489746,-2.2617359161376953,3.429016590118408,-2.2680633068084717]);
  net_h1_w[270] = new Float32Array([-2.445314645767212,-2.438368558883667,3.6555190086364746,3.710563898086548,3.729456901550293,-2.4262170791625977,3.6896474361419678,-2.4255683422088623]);
  net_h1_w[271] = new Float32Array([-2.3158130645751953,-2.287855625152588,3.2677133083343506,3.3130548000335693,3.2922072410583496,-2.2948553562164307,3.2609195709228516,-2.269901990890503]);
  net_h1_w[272] = new Float32Array([-2.4839179515838623,-2.4733333587646484,3.1823339462280273,3.1862125396728516,3.2021071910858154,-2.482882261276245,3.1430158615112305,-2.455146312713623]);
  net_h1_w[273] = new Float32Array([-2.305988311767578,-2.2850558757781982,3.1886024475097656,3.121722459793091,3.152456760406494,-2.2632172107696533,3.1430563926696777,-2.2742369174957275]);
  net_h1_w[274] = new Float32Array([-2.3322010040283203,-2.3301141262054443,3.3403422832489014,3.292924642562866,3.3150415420532227,-2.312265634536743,3.2751753330230713,-2.3236312866210938]);
  net_h1_w[275] = new Float32Array([-2.3668129444122314,-2.3392794132232666,3.320119619369507,3.409024477005005,3.3547146320343018,-2.323617696762085,3.426290988922119,-2.3354203701019287]);
  net_h1_w[276] = new Float32Array([-2.547710657119751,-2.534555673599243,3.725168228149414,3.722118377685547,3.683896541595459,-2.521522283554077,3.7726337909698486,-2.524354934692383]);
  net_h1_w[277] = new Float32Array([-2.6411612033843994,-2.6181256771087646,3.58727765083313,3.581508159637451,3.670236825942993,-2.609813928604126,3.6335854530334473,-2.6180920600891113]);
  net_h1_w[278] = new Float32Array([-2.4729697704315186,-2.4619369506835938,3.4354865550994873,3.4235684871673584,3.4405572414398193,-2.455332040786743,3.4338278770446777,-2.447841167449951]);
  net_h1_w[279] = new Float32Array([-2.6038873195648193,-2.5800342559814453,3.3022708892822266,3.316788673400879,3.312363862991333,-2.5903210639953613,3.34836745262146,-2.5666110515594482]);
  net_h1_w[280] = new Float32Array([-2.357128620147705,-2.34979248046875,3.1910479068756104,3.2353460788726807,3.228444814682007,-2.3494129180908203,3.2625701427459717,-2.335514783859253]);
  net_h1_w[281] = new Float32Array([-2.4179253578186035,-2.39469051361084,3.226337432861328,3.211663007736206,3.206979513168335,-2.3997721672058105,3.164339065551758,-2.383122444152832]);
  net_h1_w[282] = new Float32Array([-2.501535415649414,-2.4859418869018555,3.4214205741882324,3.391819477081299,3.4402730464935303,-2.4709463119506836,3.437464714050293,-2.471792459487915]);
  net_h1_w[283] = new Float32Array([-2.402158737182617,-2.3920676708221436,3.4670233726501465,3.569972276687622,3.4603970050811768,-2.386713981628418,3.497877836227417,-2.3755102157592773]);
  net_h1_w[284] = new Float32Array([-2.3421599864959717,-2.3265161514282227,3.3840243816375732,3.4547030925750732,3.3875715732574463,-2.3312413692474365,3.422027349472046,-2.3153467178344727]);
  net_h1_w[285] = new Float32Array([-2.3898985385894775,-2.394375801086426,3.5084469318389893,3.5068604946136475,3.509654998779297,-2.3814611434936523,3.5210275650024414,-2.3773744106292725]);
  net_h1_w[286] = new Float32Array([-2.5566203594207764,-2.554950714111328,3.355919122695923,3.4302127361297607,3.4309606552124023,-2.5353527069091797,3.4551892280578613,-2.544283628463745]);
  net_h1_w[287] = new Float32Array([-2.5189738273620605,-2.5070455074310303,3.351024627685547,3.3008151054382324,3.2796707153320312,-2.510612964630127,3.311393976211548,-2.4931740760803223]);
  net_h1_w[288] = new Float32Array([-2.476661443710327,-2.4704532623291016,2.9107203483581543,2.8792567253112793,2.870377779006958,-2.4946842193603516,2.9098281860351562,-2.472463846206665]);
  net_h1_w[289] = new Float32Array([-2.371325731277466,-2.3669581413269043,3.1017520427703857,3.1039247512817383,3.03446888923645,-2.346714496612549,3.0692596435546875,-2.3442585468292236]);
  net_h1_w[290] = new Float32Array([-2.4577808380126953,-2.4712002277374268,3.0707297325134277,3.0007927417755127,3.0950279235839844,-2.4633443355560303,3.052283525466919,-2.4703047275543213]);
  net_h1_w[291] = new Float32Array([-2.547654867172241,-2.537673234939575,3.194408655166626,3.1994335651397705,3.20589017868042,-2.536503553390503,3.151400566101074,-2.5130109786987305]);
  net_h1_w[292] = new Float32Array([-2.4644408226013184,-2.4712533950805664,3.2122116088867188,3.1954128742218018,3.2228355407714844,-2.4538984298706055,3.1856017112731934,-2.4456429481506348]);
  net_h1_w[293] = new Float32Array([-2.5027353763580322,-2.498854875564575,3.1597392559051514,3.182061195373535,3.120800256729126,-2.4768829345703125,3.1759328842163086,-2.4822170734405518]);
  net_h1_w[294] = new Float32Array([-2.597923994064331,-2.604337453842163,3.312812328338623,3.395036220550537,3.3551559448242188,-2.585801601409912,3.32348895072937,-2.5928525924682617]);
  net_h1_w[295] = new Float32Array([-2.4934017658233643,-2.4917070865631104,3.0523734092712402,3.097066640853882,3.1188032627105713,-2.4655818939208984,3.0539450645446777,-2.4723050594329834]);
  net_h1_w[296] = new Float32Array([-2.4811625480651855,-2.4948277473449707,2.883540153503418,2.9278533458709717,2.890333652496338,-2.455289602279663,2.9650020599365234,-2.463089942932129]);
  net_h1_w[297] = new Float32Array([-2.6537797451019287,-2.6587488651275635,3.016634941101074,3.0063719749450684,3.0131053924560547,-2.64056134223938,3.0149476528167725,-2.6901097297668457]);
  net_h1_w[298] = new Float32Array([-2.6610381603240967,-2.6593570709228516,3.0471482276916504,3.0435540676116943,3.1062417030334473,-2.6371052265167236,3.048582077026367,-2.63088059425354]);
  net_h1_w[299] = new Float32Array([-2.7474405765533447,-2.761007070541382,2.9213385581970215,2.990900993347168,2.9518704414367676,-2.7879180908203125,2.961432933807373,-2.759821653366089]);
  net_h1_w[300] = new Float32Array([-2.6919639110565186,-2.7145676612854004,2.977957248687744,2.98897123336792,2.9577314853668213,-2.7212884426116943,2.9374401569366455,-2.6857423782348633]);
  net_h1_w[301] = new Float32Array([-2.603403091430664,-2.600489377975464,2.9613146781921387,2.9384536743164062,2.9607181549072266,-2.601846933364868,2.9373619556427,-2.603874921798706]);
  net_h1_w[302] = new Float32Array([-2.5019586086273193,-2.4632959365844727,2.9515316486358643,2.9164981842041016,2.8748323917388916,-2.4605600833892822,2.898900032043457,-2.4735991954803467]);
  net_h1_w[303] = new Float32Array([-2.449225664138794,-2.41981840133667,2.8744089603424072,2.8655574321746826,2.89923357963562,-2.480121612548828,2.8420403003692627,-2.405683755874634]);
  net_h1_w[304] = new Float32Array([-2.5753393173217773,-2.5562400817871094,2.953021764755249,2.8840062618255615,2.8815808296203613,-2.5547144412994385,2.9108409881591797,-2.5428640842437744]);
  net_h1_w[305] = new Float32Array([-2.6770365238189697,-2.673879623413086,3.0159010887145996,2.9701554775238037,3.029630422592163,-2.663696527481079,3.047539472579956,-2.6581718921661377]);
  net_h1_w[306] = new Float32Array([-2.738809108734131,-2.71885085105896,2.9142956733703613,2.928166151046753,2.957353115081787,-2.761786460876465,2.9584929943084717,-2.7105135917663574]);
  net_h1_w[307] = new Float32Array([-2.7093896865844727,-2.7331390380859375,2.8698086738586426,2.9397170543670654,2.905529260635376,-2.735624313354492,2.9180312156677246,-2.740788221359253]);
  net_h1_w[308] = new Float32Array([-2.734853744506836,-2.701848030090332,3.0006110668182373,2.9382426738739014,2.9972164630889893,-2.7529919147491455,2.934399127960205,-2.7158217430114746]);
  net_h1_w[309] = new Float32Array([-2.8398702144622803,-2.619825601577759,2.8533902168273926,2.8120455741882324,2.8774948120117188,-2.839522123336792,2.8288187980651855,-2.70495343208313]);
  net_h1_w[310] = new Float32Array([-2.640977382659912,-2.643470525741577,2.972400426864624,2.9506173133850098,3.0132486820220947,-2.6194138526916504,3.035743474960327,-2.6307873725891113]);
  net_h1_w[311] = new Float32Array([-2.48604679107666,-2.462205648422241,2.820050001144409,2.8719964027404785,2.8523898124694824,-2.5044960975646973,2.837144136428833,-2.487858772277832]);
  net_h1_w[312] = new Float32Array([-2.676896572113037,-2.7111246585845947,2.9576127529144287,2.9872026443481445,3.0208489894866943,-2.6930856704711914,3.011531352996826,-2.705425262451172]);
  net_h1_w[313] = new Float32Array([-2.62697696685791,-2.6128838062286377,2.781912088394165,2.8428902626037598,2.8551077842712402,-2.6564230918884277,2.8450944423675537,-2.6173341274261475]);
  net_h1_w[314] = new Float32Array([-2.690096378326416,-2.66430926322937,2.8429696559906006,2.856336832046509,2.7868869304656982,-2.6799402236938477,2.863161325454712,-2.665449619293213]);
  net_h1_w[315] = new Float32Array([-2.8340582847595215,-2.801758289337158,2.8276660442352295,2.8173696994781494,2.8184847831726074,-2.822535753250122,2.8424336910247803,-2.8134818077087402]);
  net_h1_w[316] = new Float32Array([-2.749387502670288,-2.799499034881592,2.9379518032073975,2.938450574874878,2.877321720123291,-2.783538341522217,2.9331326484680176,-2.7456893920898438]);
  net_h1_w[317] = new Float32Array([-2.621473550796509,-2.5852372646331787,2.8314435482025146,2.8648200035095215,2.8858444690704346,-2.632718801498413,2.8569164276123047,-2.6098666191101074]);
  net_h1_w[318] = new Float32Array([-2.82165265083313,-2.786632776260376,2.856391429901123,2.842219591140747,2.844909191131592,-2.872318983078003,2.871403694152832,-2.8328661918640137]);
  net_h1_w[319] = new Float32Array([-2.6853830814361572,-2.664287567138672,3.0277955532073975,3.048095703125,3.0054805278778076,-2.679053783416748,3.08207631111145,-2.6774442195892334]);
  net_h1_w[320] = new Float32Array([1.0098894834518433,1.013750672340393,0.33269453048706055,0.31942108273506165,0.32355988025665283,1.0143526792526245,0.3188391625881195,0.9986860752105713]);
  net_h1_w[321] = new Float32Array([0.8423178195953369,0.8202825784683228,0.7403715252876282,0.7361199259757996,0.7419034838676453,0.8118021488189697,0.7430110573768616,0.8286276459693909]);
  net_h1_w[322] = new Float32Array([1.0728366374969482,1.0253961086273193,0.6204143166542053,0.6104505062103271,0.6197744011878967,1.0588901042938232,0.6170154213905334,1.0287281274795532]);
  net_h1_w[323] = new Float32Array([0.941765308380127,0.9473697543144226,0.6977953314781189,0.7124298214912415,0.7112361788749695,0.9412091374397278,0.6824716329574585,0.912717342376709]);
  net_h1_w[324] = new Float32Array([0.9303168058395386,0.9310980439186096,0.6789458394050598,0.664487898349762,0.6871696710586548,0.9288155436515808,0.6633699536323547,0.9177875518798828]);
  net_h1_w[325] = new Float32Array([0.9199138879776001,0.91376793384552,0.7089589238166809,0.6955965161323547,0.7130789160728455,0.9411446452140808,0.713249921798706,0.9244234561920166]);
  net_h1_w[326] = new Float32Array([1.008672833442688,1.0166876316070557,0.610168993473053,0.589774489402771,0.6115469336509705,1.0037657022476196,0.5970140695571899,0.9916598796844482]);
  net_h1_w[327] = new Float32Array([1.1996089220046997,1.2002413272857666,0.05403992533683777,0.05812068283557892,0.07676421850919724,1.19990873336792,0.06376410275697708,1.21174156665802]);
  net_h1_w[328] = new Float32Array([0.7364845871925354,0.7201757431030273,0.7191898226737976,0.7335880398750305,0.7089406251907349,0.7246373891830444,0.7308310866355896,0.7319772839546204]);
  net_h1_w[329] = new Float32Array([0.7060311436653137,0.7087034583091736,0.9438185095787048,0.9414207935333252,0.9584651589393616,0.7105550169944763,0.9506352543830872,0.7119177579879761]);
  net_h1_w[330] = new Float32Array([0.7946764230728149,0.7999581098556519,1.057421088218689,1.0569751262664795,1.057125210762024,0.7990124225616455,1.0515061616897583,0.7984020709991455]);
  net_h1_w[331] = new Float32Array([0.6795982122421265,0.6673150658607483,1.0495471954345703,1.0270153284072876,1.0450708866119385,0.6733637452125549,1.0367510318756104,0.6757885813713074]);
  net_h1_w[332] = new Float32Array([0.6351641416549683,0.6421403884887695,1.1276987791061401,1.1135832071304321,1.1332862377166748,0.6368309855461121,1.1158896684646606,0.6294718980789185]);
  net_h1_w[333] = new Float32Array([0.8255809545516968,0.8162969946861267,0.9285083413124084,0.9218659996986389,0.9276916980743408,0.8083834648132324,0.934417188167572,0.8017582297325134]);
  net_h1_w[334] = new Float32Array([0.9109580516815186,0.9197788834571838,0.7493644952774048,0.7349417805671692,0.7511270642280579,0.9077586531639099,0.7455986738204956,0.9115092754364014]);
  net_h1_w[335] = new Float32Array([1.006001591682434,1.0100679397583008,0.5495359301567078,0.5329678654670715,0.5457513928413391,1.001619815826416,0.5469210147857666,1.0107601881027222]);
  net_h1_w[336] = new Float32Array([0.6908771395683289,0.6946710348129272,0.9264334440231323,0.9230560660362244,0.9066471457481384,0.6823685765266418,0.9317197203636169,0.688622236251831]);
  net_h1_w[337] = new Float32Array([0.6161549091339111,0.6215436458587646,1.1188933849334717,1.1141505241394043,1.1222832202911377,0.6328301429748535,1.1169532537460327,0.6115167140960693]);
  net_h1_w[338] = new Float32Array([0.658915102481842,0.6419984102249146,1.1706204414367676,1.1630852222442627,1.1723352670669556,0.6389573812484741,1.1749398708343506,0.6514677405357361]);
  net_h1_w[339] = new Float32Array([0.6302965879440308,0.6295332312583923,1.2377535104751587,1.2248914241790771,1.2373899221420288,0.6240296363830566,1.240188479423523,0.6199177503585815]);
  net_h1_w[340] = new Float32Array([0.45463332533836365,0.46247240900993347,1.254300832748413,1.251092553138733,1.2443138360977173,0.455774188041687,1.252396821975708,0.46125665307044983]);
  net_h1_w[341] = new Float32Array([0.7058539390563965,0.6916651725769043,1.1110928058624268,1.10219144821167,1.113261103630066,0.6945925951004028,1.115553855895996,0.6911791563034058]);
  net_h1_w[342] = new Float32Array([0.7674082517623901,0.757863461971283,0.9954020977020264,0.9914097189903259,0.9963700771331787,0.765598475933075,0.9973626136779785,0.7635036706924438]);
  net_h1_w[343] = new Float32Array([0.8140000104904175,0.8095056414604187,0.7893491387367249,0.7790383696556091,0.7830789089202881,0.8072230219841003,0.7837547659873962,0.8047014474868774]);
  net_h1_w[344] = new Float32Array([0.8372197151184082,0.8366796970367432,0.723034679889679,0.7247753739356995,0.7188302874565125,0.830641508102417,0.7284350395202637,0.824285089969635]);
  net_h1_w[345] = new Float32Array([0.7096080183982849,0.7040892243385315,0.9911218285560608,0.9929976463317871,1.004896879196167,0.7049554586410522,0.9896722435951233,0.6997942924499512]);
  net_h1_w[346] = new Float32Array([0.7557408213615417,0.7532244920730591,0.9606489539146423,0.9536511898040771,0.9690918326377869,0.754214346408844,0.9603272080421448,0.7419313192367554]);
  net_h1_w[347] = new Float32Array([0.5697656273841858,0.5531967878341675,1.1316508054733276,1.1181704998016357,1.141597032546997,0.5572829246520996,1.1349581480026245,0.55109041929245]);
  net_h1_w[348] = new Float32Array([0.6188626885414124,0.6143648028373718,1.0976264476776123,1.0717288255691528,1.0988860130310059,0.6105408072471619,1.0862091779708862,0.6082463264465332]);
  net_h1_w[349] = new Float32Array([0.6776360273361206,0.6624816060066223,1.1066874265670776,1.1127287149429321,1.110761284828186,0.6721150875091553,1.1115033626556396,0.6668496131896973]);
  net_h1_w[350] = new Float32Array([0.7113807797431946,0.6974598169326782,1.0188418626785278,1.0176833868026733,0.9976446628570557,0.7002742290496826,1.0068004131317139,0.7003930807113647]);
  net_h1_w[351] = new Float32Array([0.744698166847229,0.7314094305038452,0.8697443008422852,0.8627561926841736,0.865157961845398,0.740109384059906,0.8846361041069031,0.7290463447570801]);
  net_h1_w[352] = new Float32Array([0.910830020904541,0.9112318754196167,0.6448549628257751,0.6288933157920837,0.6359249353408813,0.893851101398468,0.6347953677177429,0.901986837387085]);
  net_h1_w[353] = new Float32Array([0.9418742060661316,0.9301646947860718,0.7904877662658691,0.7795453667640686,0.7970649003982544,0.9303700923919678,0.7951903343200684,0.927090585231781]);
  net_h1_w[354] = new Float32Array([0.7671921849250793,0.7506287693977356,0.9418734312057495,0.9389026165008545,0.9481419324874878,0.7549706697463989,0.9479912519454956,0.7492360472679138]);
  net_h1_w[355] = new Float32Array([0.6524226069450378,0.7374500632286072,0.8551623821258545,0.8507314920425415,0.8542400002479553,0.6198585629463196,0.862313449382782,0.6694982647895813]);
  net_h1_w[356] = new Float32Array([0.394905149936676,0.4014284610748291,0.5875139236450195,0.5856562256813049,0.5850653648376465,0.2091427594423294,0.6082503199577332,0.3602871894836426]);
  net_h1_w[357] = new Float32Array([0.7283461093902588,0.7072421312332153,0.9425798058509827,0.944447934627533,0.9460379481315613,0.671449601650238,0.9241347908973694,0.7101559042930603]);
  net_h1_w[358] = new Float32Array([0.7709494233131409,0.7628508806228638,0.8541007041931152,0.8460443019866943,0.868478000164032,0.7632966637611389,0.8581288456916809,0.7604281306266785]);
  net_h1_w[359] = new Float32Array([0.751331090927124,0.7441332340240479,0.7306254506111145,0.7301800847053528,0.7353317737579346,0.7461348176002502,0.7394616603851318,0.7274894118309021]);
  net_h1_w[360] = new Float32Array([0.8338247537612915,0.8253785371780396,0.7088878154754639,0.7012664079666138,0.7109051942825317,0.816382110118866,0.6983739137649536,0.8188558220863342]);
  net_h1_w[361] = new Float32Array([0.7539471387863159,0.7308816909790039,0.759041965007782,0.7398656606674194,0.756759524345398,0.7379439473152161,0.7492720484733582,0.733919620513916]);
  net_h1_w[362] = new Float32Array([0.751207709312439,0.7382794618606567,0.7118145823478699,0.7060736417770386,0.7240269780158997,0.7560997605323792,0.7181811928749084,0.7414489388465881]);
  net_h1_w[363] = new Float32Array([0.6171755194664001,0.6798079609870911,0.6309896111488342,0.6327382326126099,0.6408224701881409,0.5200801491737366,0.6217591762542725,0.6379010677337646]);
  net_h1_w[364] = new Float32Array([0.6644339561462402,0.6520655751228333,0.6538622379302979,0.6570732593536377,0.6690017580986023,0.6495916247367859,0.657244861125946,0.641136109828949]);
  net_h1_w[365] = new Float32Array([0.6977918148040771,0.6801478862762451,0.6547676920890808,0.6492236852645874,0.6655530333518982,0.6867170929908752,0.6595583558082581,0.6724160313606262]);
  net_h1_w[366] = new Float32Array([0.7313666343688965,0.7244787812232971,0.7560311555862427,0.7362123727798462,0.7379289865493774,0.7425916194915771,0.7374932169914246,0.7387086749076843]);
  net_h1_w[367] = new Float32Array([0.7350149154663086,0.7293432950973511,0.6649550199508667,0.6834481358528137,0.6775943636894226,0.739375650882721,0.6780275106430054,0.721091628074646]);
  net_h1_w[368] = new Float32Array([0.8002563714981079,0.7783679366111755,0.6624080538749695,0.6454201340675354,0.661750853061676,0.7660925984382629,0.6616114377975464,0.7769348621368408]);
  net_h1_w[369] = new Float32Array([0.8127583265304565,0.795028805732727,0.684945285320282,0.6839524507522583,0.6885472536087036,0.8126348853111267,0.6787031292915344,0.7789521813392639]);
  net_h1_w[370] = new Float32Array([0.6796587109565735,0.6619492769241333,0.722341001033783,0.7096737623214722,0.724918007850647,0.655580997467041,0.7307347059249878,0.6587717533111572]);
  net_h1_w[371] = new Float32Array([0.6519068479537964,0.6300321221351624,0.6422100067138672,0.625278115272522,0.6453512907028198,0.6241098046302795,0.634436845779419,0.6228601932525635]);
  net_h1_w[372] = new Float32Array([0.5137113928794861,0.5155794024467468,0.6281908750534058,0.6155162453651428,0.6313698887825012,0.530586838722229,0.6265645623207092,0.49485474824905396]);
  net_h1_w[373] = new Float32Array([0.5778511762619019,0.5548108220100403,0.6904431581497192,0.6918849349021912,0.6769334077835083,0.5686191320419312,0.7032535076141357,0.5592701435089111]);
  net_h1_w[374] = new Float32Array([0.6541339755058289,0.6312114596366882,0.7640527486801147,0.7665387392044067,0.7648892402648926,0.6390440464019775,0.7607238292694092,0.6322734355926514]);
  net_h1_w[375] = new Float32Array([0.7401308417320251,0.7419244647026062,0.7434857487678528,0.7323404550552368,0.7467378973960876,0.741847574710846,0.740193247795105,0.7248493432998657]);
  net_h1_w[376] = new Float32Array([0.7309685349464417,0.7140734195709229,0.600757360458374,0.5819279551506042,0.575808048248291,0.7324191331863403,0.5708180069923401,0.7055550217628479]);
  net_h1_w[377] = new Float32Array([0.7855604290962219,0.7656980752944946,0.6303755044937134,0.6104243993759155,0.6280354857444763,0.7427759766578674,0.6178625822067261,0.7413021922111511]);
  net_h1_w[378] = new Float32Array([0.67302405834198,0.6683197021484375,0.6541388630867004,0.6376360654830933,0.6447973251342773,0.6727768778800964,0.6638444066047668,0.6420649290084839]);
  net_h1_w[379] = new Float32Array([0.4747597873210907,0.4812716841697693,0.5085136890411377,0.4936518967151642,0.502769410610199,0.4650573134422302,0.4900272786617279,0.46522051095962524]);
  net_h1_w[380] = new Float32Array([0.3168909251689911,0.28565213084220886,0.44351324439048767,0.43650734424591064,0.41401180624961853,0.29254382848739624,0.41866156458854675,0.2787081003189087]);
  net_h1_w[381] = new Float32Array([0.4984727203845978,0.5005761981010437,0.6290542483329773,0.6361222863197327,0.630081295967102,0.5100764036178589,0.6257638931274414,0.5048566460609436]);
  net_h1_w[382] = new Float32Array([0.5585693717002869,0.5622340440750122,0.6576653122901917,0.684036374092102,0.6820028424263,0.5509317517280579,0.6902788877487183,0.5508325099945068]);
  net_h1_w[383] = new Float32Array([0.6418949365615845,0.6379212141036987,0.6473693251609802,0.6515207290649414,0.6440058946609497,0.6379737257957458,0.668083667755127,0.634330153465271]);
  net_h1_w[384] = new Float32Array([0.02932198904454708,0.03569125384092331,-0.01672912761569023,0.04575388506054878,-0.020222267135977745,0.03709486126899719,-0.047700054943561554,0.02144748531281948]);
  net_h1_w[385] = new Float32Array([-0.0426805280148983,0.03691780939698219,0.01348203793168068,0.02800721675157547,-0.04001423716545105,0.012094175443053246,-0.0026100960094481707,0.030868804082274437]);
  net_h1_w[386] = new Float32Array([0.043534718453884125,-0.01838386431336403,-0.011975889094173908,0.045012157410383224,-0.04903921112418175,-0.02857309766113758,0.0200569499284029,0.008412504568696022]);
  net_h1_w[387] = new Float32Array([0.01589205302298069,0.04258127883076668,0.037435129284858704,-0.02482875995337963,0.04716069996356964,-0.0455656498670578,-0.018665023148059845,0.03840581700205803]);
  net_h1_w[388] = new Float32Array([-0.008606855757534504,0.05101018771529198,-0.01145442109555006,-0.007589252665638924,0.028438381850719452,-0.044541649520397186,-0.044726837426424026,0.040518663823604584]);
  net_h1_w[389] = new Float32Array([-0.046068742871284485,0.0470493845641613,0.0006393076037056744,-0.03753991052508354,-0.006129378452897072,0.02022099867463112,0.0498625822365284,0.04431760311126709]);
  net_h1_w[390] = new Float32Array([0.03098442032933235,-0.0489102378487587,0.0010714316740632057,-0.03077518194913864,-0.04974694922566414,-0.015391940250992775,-0.04682672768831253,0.004189508035778999]);
  net_h1_w[391] = new Float32Array([-0.0336044616997242,0.03352062404155731,-0.0387440100312233,-0.007034148555248976,-0.03688390552997589,0.020939495414495468,-0.013591134920716286,-0.008012660779058933]);
  net_h1_w[392] = new Float32Array([0.9973205327987671,1.0102704763412476,-0.7109829783439636,-0.7254916429519653,-0.7467437982559204,1.001343011856079,-0.7354919910430908,1.007739782333374]);
  net_h1_w[393] = new Float32Array([0.9480454325675964,1.0027848482131958,-0.7820985317230225,-0.7966237664222717,-0.7575616240501404,0.9955666065216064,-0.7916948199272156,0.9730080366134644]);
  net_h1_w[394] = new Float32Array([0.9021037220954895,0.8883723616600037,-0.6514662504196167,-0.662395715713501,-0.6565002202987671,0.8737632632255554,-0.6522382497787476,0.9236379861831665]);
  net_h1_w[395] = new Float32Array([0.8656530380249023,0.7898388504981995,-0.7178887724876404,-0.6825428009033203,-0.6566106081008911,0.814854621887207,-0.7159916162490845,0.8443909883499146]);
  net_h1_w[396] = new Float32Array([0.9028177857398987,0.8877889513969421,-0.7317559123039246,-0.7352617979049683,-0.7164598107337952,0.9230303764343262,-0.7192922830581665,0.8846132159233093]);
  net_h1_w[397] = new Float32Array([1.129071593284607,1.1278495788574219,-0.7202679514884949,-0.7514438629150391,-0.7449833154678345,1.0914746522903442,-0.7234467267990112,1.119277834892273]);
  net_h1_w[398] = new Float32Array([0.9501403570175171,0.9990647435188293,-0.8564448952674866,-0.8412154912948608,-0.8287424445152283,1.0063536167144775,-0.7812689542770386,0.9819092154502869]);
  net_h1_w[399] = new Float32Array([0.9689536094665527,0.9780917763710022,-0.6720737218856812,-0.6775058507919312,-0.6435360312461853,0.9498842358589172,-0.6673064827919006,0.950211226940155]);
  net_h1_w[400] = new Float32Array([1.2833356857299805,1.2834397554397583,-0.5181252956390381,-0.5097355842590332,-0.5115352272987366,1.278922200202942,-0.5265618562698364,1.3007513284683228]);
  net_h1_w[401] = new Float32Array([1.3977253437042236,1.3465336561203003,-0.512251079082489,-0.504875898361206,-0.4962044656276703,1.3335762023925781,-0.5121698975563049,1.3280658721923828]);
  net_h1_w[402] = new Float32Array([1.1642504930496216,1.1289769411087036,-0.4815826416015625,-0.5084266066551208,-0.4755167067050934,1.1416246891021729,-0.49581241607666016,1.1020817756652832]);
  net_h1_w[403] = new Float32Array([1.1417970657348633,1.1372274160385132,-0.5362436771392822,-0.5421551465988159,-0.5444208383560181,1.0879325866699219,-0.5368107557296753,1.1020387411117554]);
  net_h1_w[404] = new Float32Array([1.163941502571106,1.1219481229782104,-0.5616837739944458,-0.576434314250946,-0.5602968335151672,1.1680141687393188,-0.5665537714958191,1.110225796699524]);
  net_h1_w[405] = new Float32Array([1.2171664237976074,1.2090775966644287,-0.44886505603790283,-0.4565090537071228,-0.45614662766456604,1.209404468536377,-0.4650256633758545,1.1489752531051636]);
  net_h1_w[406] = new Float32Array([1.4105111360549927,1.4399995803833008,-0.5424844622612,-0.554255485534668,-0.563022792339325,1.4044373035430908,-0.5542408227920532,1.398388385772705]);
  net_h1_w[407] = new Float32Array([1.2849035263061523,1.2320129871368408,-0.5335402488708496,-0.5350502729415894,-0.5420436859130859,1.2432096004486084,-0.5417956113815308,1.2645372152328491]);
  net_h1_w[408] = new Float32Array([1.6001548767089844,1.54356050491333,-0.32337257266044617,-0.32617834210395813,-0.32903531193733215,1.5669658184051514,-0.33266404271125793,1.5603166818618774]);
  net_h1_w[409] = new Float32Array([1.530903935432434,1.4387308359146118,-0.37733888626098633,-0.39310386776924133,-0.3903968334197998,1.4585411548614502,-0.3841477930545807,1.4918867349624634]);
  net_h1_w[410] = new Float32Array([1.419324517250061,1.4007402658462524,-0.31858503818511963,-0.3275549113750458,-0.3178216814994812,1.3412346839904785,-0.33188921213150024,1.3397537469863892]);
  net_h1_w[411] = new Float32Array([1.3253225088119507,1.2500202655792236,-0.46306559443473816,-0.46904459595680237,-0.4916766285896301,1.2381625175476074,-0.4817475974559784,1.278510570526123]);
  net_h1_w[412] = new Float32Array([1.2852990627288818,1.274727463722229,-0.36424553394317627,-0.3699040114879608,-0.3649802505970001,1.2865692377090454,-0.3845377266407013,1.2712290287017822]);
  net_h1_w[413] = new Float32Array([1.5178699493408203,1.460772156715393,-0.3019945025444031,-0.30115702748298645,-0.2991698980331421,1.4967018365859985,-0.3133833408355713,1.4715780019760132]);
  net_h1_w[414] = new Float32Array([1.5255157947540283,1.5740054845809937,-0.2989121079444885,-0.3009575307369232,-0.3005000352859497,1.5353056192398071,-0.31657445430755615,1.581437110900879]);
  net_h1_w[415] = new Float32Array([1.500605583190918,1.4885557889938354,-0.29799678921699524,-0.3106725215911865,-0.3092775046825409,1.5123684406280518,-0.30474144220352173,1.5157344341278076]);
  net_h1_w[416] = new Float32Array([1.6230511665344238,1.5959911346435547,-0.3907308280467987,-0.3986128568649292,-0.39962026476860046,1.5841376781463623,-0.40351539850234985,1.6133416891098022]);
  net_h1_w[417] = new Float32Array([1.5673317909240723,1.5524131059646606,-0.42504653334617615,-0.4370788633823395,-0.4191785752773285,1.5692754983901978,-0.42859163880348206,1.5933665037155151]);
  net_h1_w[418] = new Float32Array([1.6617850065231323,1.5627796649932861,-0.26312705874443054,-0.2696366608142853,-0.2642461359500885,1.6058108806610107,-0.27530935406684875,1.5791730880737305]);
  net_h1_w[419] = new Float32Array([1.524579405784607,1.5362168550491333,-0.42211759090423584,-0.43618157505989075,-0.43523454666137695,1.4777401685714722,-0.45355838537216187,1.4855815172195435]);
  net_h1_w[420] = new Float32Array([1.5401885509490967,1.4979426860809326,-0.40182578563690186,-0.4012618362903595,-0.3971661329269409,1.45230233669281,-0.41263270378112793,1.4589439630508423]);
  net_h1_w[421] = new Float32Array([1.530003309249878,1.5560014247894287,-0.28304871916770935,-0.2934841811656952,-0.2798219919204712,1.5805901288986206,-0.28702661395072937,1.5667307376861572]);
  net_h1_w[422] = new Float32Array([1.6013507843017578,1.5694268941879272,-0.32949110865592957,-0.34359443187713623,-0.32871881127357483,1.5384035110473633,-0.33866527676582336,1.5564230680465698]);
  net_h1_w[423] = new Float32Array([1.5753974914550781,1.5743772983551025,-0.3564959168434143,-0.3738243579864502,-0.3677337169647217,1.5781724452972412,-0.3704899251461029,1.5592507123947144]);
  net_h1_w[424] = new Float32Array([1.7082802057266235,1.7646526098251343,-0.7033084630966187,-0.702049195766449,-0.6997663378715515,1.7484630346298218,-0.7153687477111816,1.7416454553604126]);
  net_h1_w[425] = new Float32Array([1.8275691270828247,1.830230474472046,-0.8320012092590332,-0.842908501625061,-0.8294920921325684,1.785586953163147,-0.8406939506530762,1.8401165008544922]);
  net_h1_w[426] = new Float32Array([1.9051525592803955,1.8699545860290527,-0.8300356864929199,-0.8334479928016663,-0.8309812545776367,1.8857738971710205,-0.8294636011123657,1.792931079864502]);
  net_h1_w[427] = new Float32Array([1.6051077842712402,1.590463399887085,-0.7790045142173767,-0.7914295792579651,-0.790253221988678,1.6358023881912231,-0.7909590005874634,1.6638121604919434]);
  net_h1_w[428] = new Float32Array([1.4338738918304443,1.446545124053955,-0.5119132399559021,-0.5019713640213013,-0.5178727507591248,1.4188103675842285,-0.5174789428710938,1.4059053659439087]);
  net_h1_w[429] = new Float32Array([1.6564464569091797,1.5526059865951538,-0.5163926482200623,-0.514233410358429,-0.5093435049057007,1.5645118951797485,-0.5347292423248291,1.6125091314315796]);
  net_h1_w[430] = new Float32Array([1.9798697233200073,1.967875599861145,-0.8878355026245117,-0.8900293111801147,-0.8838019371032715,1.8941043615341187,-0.9005101919174194,1.9222075939178467]);
  net_h1_w[431] = new Float32Array([1.820038080215454,1.8464587926864624,-0.8625627756118774,-0.8528088927268982,-0.8549109101295471,1.844515323638916,-0.8578409552574158,1.8438360691070557]);
  net_h1_w[432] = new Float32Array([2.3615610599517822,2.362241506576538,-1.256946086883545,-1.2702556848526,-1.2493633031845093,2.3372817039489746,-1.2668054103851318,2.3484182357788086]);
  net_h1_w[433] = new Float32Array([2.096114158630371,2.127978801727295,-1.1171541213989258,-1.14185631275177,-1.1222103834152222,2.143259286880493,-1.1485923528671265,2.1511261463165283]);
  net_h1_w[434] = new Float32Array([2.3257670402526855,2.234304904937744,-1.256892204284668,-1.2433258295059204,-1.2670965194702148,2.2886910438537598,-1.2521449327468872,2.274594306945801]);
  net_h1_w[435] = new Float32Array([2.0165748596191406,1.9914275407791138,-1.1880435943603516,-1.1821203231811523,-1.2083531618118286,1.9608172178268433,-1.1934083700180054,1.9588650465011597]);
  net_h1_w[436] = new Float32Array([1.9721322059631348,1.9905143976211548,-1.1966252326965332,-1.2103842496871948,-1.2259724140167236,2.0036566257476807,-1.2168015241622925,2.0340845584869385]);
  net_h1_w[437] = new Float32Array([2.1183464527130127,2.1129238605499268,-1.0790656805038452,-1.0890740156173706,-1.082767128944397,2.078629493713379,-1.087525725364685,2.060371160507202]);
  net_h1_w[438] = new Float32Array([2.1381514072418213,2.19746470451355,-1.3563647270202637,-1.368079662322998,-1.3571745157241821,2.1218104362487793,-1.3637237548828125,2.195890426635742]);
  net_h1_w[439] = new Float32Array([2.1717445850372314,2.1790010929107666,-1.4140214920043945,-1.413691759109497,-1.4167338609695435,2.1681978702545166,-1.4215576648712158,2.213101387023926]);
  net_h1_w[440] = new Float32Array([-0.026354240253567696,-0.026020269840955734,0.010469201020896435,-0.027435531839728355,0.023248441517353058,0.01227663829922676,0.04006853699684143,-0.03800803795456886]);
  net_h1_w[441] = new Float32Array([0.021211877465248108,-0.019101345911622047,-0.005605286452919245,0.006893711630254984,-0.008475860580801964,-0.011762742884457111,0.011471022851765156,0.014690962620079517]);
  net_h1_w[442] = new Float32Array([-0.022058818489313126,0.000796257983893156,0.029174618422985077,-0.015173648484051228,0.010018781758844852,-0.007955255918204784,-0.017861081287264824,-0.003926534205675125]);
  net_h1_w[443] = new Float32Array([-0.025032760575413704,-0.032638151198625565,-0.01025492511689663,0.012401855550706387,0.030989862978458405,-0.04217574745416641,0.03897488862276077,-0.00975879468023777]);
  net_h1_w[444] = new Float32Array([0.026991993188858032,-0.018147921189665794,-0.004012193065136671,0.022739438340067863,-0.045130886137485504,-0.004950640257447958,0.036725517362356186,0.02678716741502285]);
  net_h1_w[445] = new Float32Array([-0.01932464726269245,-0.025234516710042953,-0.034453414380550385,-0.00781302247196436,0.019049158319830894,-0.013504558242857456,0.032556526362895966,0.01743982918560505]);
  net_h1_w[446] = new Float32Array([0.023827355355024338,-0.01931963488459587,-0.04218790680170059,0.020444734022021294,0.014192754402756691,-0.018446817994117737,0.0019026416121050715,-0.03398618847131729]);
  net_h1_w[447] = new Float32Array([0.036630380898714066,0.004571831319481134,0.0387292355298996,0.020422454923391342,0.010844438336789608,-0.013143341988325119,-0.0052145496010780334,-0.047433946281671524]);
  net_h1_w[448] = new Float32Array([0.8940338492393494,0.869478702545166,-0.6085870862007141,-0.6304640173912048,-0.6837282776832581,0.8710659742355347,-0.6274411678314209,0.8956621885299683]);
  net_h1_w[449] = new Float32Array([1.0792256593704224,1.0000134706497192,-0.921280562877655,-0.8683393001556396,-0.9035381078720093,1.068841576576233,-0.8948930501937866,1.0688252449035645]);
  net_h1_w[450] = new Float32Array([1.2009100914001465,1.1806968450546265,-0.9597820043563843,-0.9621680378913879,-0.9662574529647827,1.2313275337219238,-0.9429733157157898,1.2365647554397583]);
  net_h1_w[451] = new Float32Array([1.130372166633606,1.147660255432129,-0.9194545149803162,-0.8724043965339661,-0.8460370898246765,1.120847463607788,-0.8936148285865784,1.125636100769043]);
  net_h1_w[452] = new Float32Array([1.2736390829086304,1.2227671146392822,-0.9914477467536926,-0.9994090795516968,-1.0007872581481934,1.2226701974868774,-1.0279439687728882,1.2717610597610474]);
  net_h1_w[453] = new Float32Array([1.2544310092926025,1.2765839099884033,-0.9220467805862427,-0.8723655343055725,-0.8679900765419006,1.2387714385986328,-0.8975509405136108,1.2256159782409668]);
  net_h1_w[454] = new Float32Array([1.0107016563415527,1.023860216140747,-0.8845886588096619,-0.925915002822876,-0.9228650331497192,1.0393863916397095,-0.9094234704971313,0.9906683564186096]);
  net_h1_w[455] = new Float32Array([1.1672276258468628,1.1776254177093506,-0.8990455865859985,-0.8686208724975586,-0.9022977948188782,1.2351148128509521,-0.8823579549789429,1.2274495363235474]);
  net_h1_w[456] = new Float32Array([1.1877576112747192,1.1811357736587524,-0.9638487100601196,-0.9459917545318604,-0.9627162218093872,1.2261801958084106,-0.9604862928390503,1.1861741542816162]);
  net_h1_w[457] = new Float32Array([1.2146708965301514,1.2162280082702637,-0.9440352916717529,-0.9447193741798401,-0.9409940838813782,1.20316481590271,-0.9780314564704895,1.272786259651184]);
  net_h1_w[458] = new Float32Array([1.215813398361206,1.2543070316314697,-0.9607037901878357,-0.900264322757721,-0.9547576308250427,1.2857385873794556,-0.9211764335632324,1.270918846130371]);
  net_h1_w[459] = new Float32Array([1.2273154258728027,1.2827662229537964,-0.9644673466682434,-1.01811683177948,-1.0022156238555908,1.2183226346969604,-1.017215609550476,1.2749618291854858]);
  net_h1_w[460] = new Float32Array([1.1970932483673096,1.2260863780975342,-0.9967530369758606,-0.9846853017807007,-0.9974120259284973,1.2599425315856934,-1.0361311435699463,1.247782826423645]);
  net_h1_w[461] = new Float32Array([1.2881592512130737,1.2998794317245483,-0.9409990310668945,-0.951784610748291,-0.9633663892745972,1.3135195970535278,-0.9182978272438049,1.255804181098938]);
  net_h1_w[462] = new Float32Array([1.1789475679397583,1.2148751020431519,-0.892522394657135,-0.9046887755393982,-0.9171134829521179,1.2406173944473267,-0.9463450312614441,1.237664818763733]);
  net_h1_w[463] = new Float32Array([1.256908893585205,1.2070266008377075,-1.042069673538208,-1.0097150802612305,-0.995241105556488,1.2292780876159668,-1.0620145797729492,1.2353440523147583]);
  net_h1_w[464] = new Float32Array([1.1758241653442383,1.1690828800201416,-1.0540157556533813,-1.0530331134796143,-1.0474295616149902,1.1962060928344727,-1.0913996696472168,1.1990610361099243]);
  net_h1_w[465] = new Float32Array([1.217315435409546,1.183469295501709,-0.869211733341217,-0.8657714128494263,-0.885888397693634,1.1851234436035156,-0.8618457913398743,1.187806487083435]);
  net_h1_w[466] = new Float32Array([1.254346489906311,1.2168309688568115,-1.0369856357574463,-1.0090380907058716,-1.0169130563735962,1.1778537034988403,-1.0020840167999268,1.2250257730484009]);
  net_h1_w[467] = new Float32Array([1.3197598457336426,1.342504620552063,-0.932515025138855,-0.9283576011657715,-0.91552734375,1.3490242958068848,-0.9180724620819092,1.3424501419067383]);
  net_h1_w[468] = new Float32Array([1.3147271871566772,1.3408565521240234,-0.9132039546966553,-0.8989156484603882,-0.9319450855255127,1.285230040550232,-0.9098920226097107,1.3071367740631104]);
  net_h1_w[469] = new Float32Array([1.2159311771392822,1.192389965057373,-0.9989170432090759,-1.0502967834472656,-1.0062661170959473,1.2266217470169067,-1.0427223443984985,1.200026273727417]);
  net_h1_w[470] = new Float32Array([1.3892736434936523,1.3816251754760742,-1.1020781993865967,-1.1090633869171143,-1.1103745698928833,1.3876510858535767,-1.096787929534912,1.3919939994812012]);
  net_h1_w[471] = new Float32Array([1.1816636323928833,1.1551707983016968,-0.9874979853630066,-0.9828868508338928,-0.9631422162055969,1.1608973741531372,-0.9602817893028259,1.1631567478179932]);
  net_h1_w[472] = new Float32Array([1.2937495708465576,1.3193069696426392,-1.0580179691314697,-1.0688549280166626,-1.0164105892181396,1.326435923576355,-1.0698376893997192,1.3453309535980225]);
  net_h1_w[473] = new Float32Array([1.4039318561553955,1.4071787595748901,-1.0018311738967896,-1.04288649559021,-1.0042173862457275,1.3649191856384277,-1.0024694204330444,1.3901945352554321]);
  net_h1_w[474] = new Float32Array([1.4407931566238403,1.4418889284133911,-1.0334973335266113,-1.0373570919036865,-1.0454981327056885,1.4449447393417358,-1.0567221641540527,1.4874833822250366]);
  net_h1_w[475] = new Float32Array([1.4577982425689697,1.4710404872894287,-0.9615725874900818,-0.9613062739372253,-0.957621693611145,1.481523036956787,-0.9617230296134949,1.450487494468689]);
  net_h1_w[476] = new Float32Array([1.4129002094268799,1.4440847635269165,-0.9260686039924622,-0.9469038844108582,-0.946393609046936,1.3839889764785767,-0.94336998462677,1.447403073310852]);
  net_h1_w[477] = new Float32Array([1.3663493394851685,1.3500667810440063,-0.9302803874015808,-0.919558584690094,-0.920910656452179,1.3491302728652954,-0.9368022680282593,1.3700392246246338]);
  net_h1_w[478] = new Float32Array([1.455031156539917,1.421526551246643,-0.9127073287963867,-0.8925134539604187,-0.910703718662262,1.480125069618225,-0.9072164297103882,1.4347773790359497]);
  net_h1_w[479] = new Float32Array([1.2495757341384888,1.2433632612228394,-1.0068572759628296,-0.967545211315155,-0.9813404083251953,1.240693211555481,-0.9999326467514038,1.1964678764343262]);
  net_h1_w[480] = new Float32Array([1.2456679344177246,1.2494882345199585,-0.8118210434913635,-0.8135815262794495,-0.8255415558815002,1.2109172344207764,-0.7735411524772644,1.274681568145752]);
  net_h1_w[481] = new Float32Array([1.5075567960739136,1.4852675199508667,-1.1788402795791626,-1.1928426027297974,-1.1698123216629028,1.4987460374832153,-1.206986904144287,1.4932714700698853]);
  net_h1_w[482] = new Float32Array([1.5387853384017944,1.5298857688903809,-0.8478480577468872,-0.866519033908844,-0.8343886733055115,1.5606282949447632,-0.8505571484565735,1.4973427057266235]);
  net_h1_w[483] = new Float32Array([1.543777346611023,1.50920832157135,-1.0246220827102661,-1.0226926803588867,-0.997492790222168,1.4744846820831299,-1.0207685232162476,1.4740511178970337]);
  net_h1_w[484] = new Float32Array([1.4766466617584229,1.4525251388549805,-0.972126305103302,-0.9816012978553772,-0.966389000415802,1.4428787231445312,-0.9777941107749939,1.4845303297042847]);
  net_h1_w[485] = new Float32Array([1.4425522089004517,1.4889354705810547,-0.800925612449646,-0.7863375544548035,-0.8068441152572632,1.459619164466858,-0.7805994749069214,1.458387017250061]);
  net_h1_w[486] = new Float32Array([1.490217924118042,1.5107759237289429,-1.1182024478912354,-1.1349025964736938,-1.121248722076416,1.5233213901519775,-1.1166661977767944,1.5368233919143677]);
  net_h1_w[487] = new Float32Array([1.440081238746643,1.4919612407684326,-0.967802882194519,-0.9593749642372131,-0.9633761644363403,1.4746211767196655,-0.9613760709762573,1.5191878080368042]);
  net_h1_w[488] = new Float32Array([1.443171501159668,1.461512565612793,-1.0231571197509766,-1.051550030708313,-1.0308969020843506,1.4504387378692627,-1.0621720552444458,1.447270154953003]);
  net_h1_w[489] = new Float32Array([1.7577009201049805,1.7059416770935059,-1.0586066246032715,-1.0493299961090088,-1.0584139823913574,1.7567462921142578,-1.0658462047576904,1.717139482498169]);
  net_h1_w[490] = new Float32Array([1.527578353881836,1.4686014652252197,-0.9623838663101196,-0.9636827707290649,-0.9599234461784363,1.4888248443603516,-0.9490512013435364,1.487054467201233]);
  net_h1_w[491] = new Float32Array([1.5248950719833374,1.4832217693328857,-0.8487480282783508,-0.857132077217102,-0.8490191102027893,1.5480231046676636,-0.8400890827178955,1.517831802368164]);
  net_h1_w[492] = new Float32Array([1.5067585706710815,1.4908936023712158,-0.8473114371299744,-0.850436270236969,-0.8392491340637207,1.5125545263290405,-0.8439960479736328,1.4763895273208618]);
  net_h1_w[493] = new Float32Array([1.5730611085891724,1.5814988613128662,-1.0016210079193115,-1.0278853178024292,-1.0087593793869019,1.568259596824646,-0.9957318902015686,1.5834896564483643]);
  net_h1_w[494] = new Float32Array([1.354720950126648,1.3538435697555542,-0.9485915303230286,-0.952562689781189,-0.9256486892700195,1.3689756393432617,-0.936262309551239,1.3589075803756714]);
  net_h1_w[495] = new Float32Array([1.096867561340332,1.1442183256149292,-0.6496251821517944,-0.6339426040649414,-0.6549466848373413,1.0981518030166626,-0.6535685658454895,1.0857638120651245]);
  net_h1_w[496] = new Float32Array([1.5868638753890991,1.582726240158081,-0.9728861451148987,-0.9694798588752747,-0.9497944712638855,1.5426390171051025,-0.9823928475379944,1.5713517665863037]);
  net_h1_w[497] = new Float32Array([1.3957085609436035,1.3392027616500854,-0.6814213395118713,-0.6679980158805847,-0.6935231685638428,1.3725959062576294,-0.6893618106842041,1.3457657098770142]);
  net_h1_w[498] = new Float32Array([1.4708449840545654,1.4219000339508057,-0.9919395446777344,-0.9950399398803711,-1.001583218574524,1.4907681941986084,-1.003396987915039,1.4824457168579102]);
  net_h1_w[499] = new Float32Array([1.2821590900421143,1.2757298946380615,-0.8318973779678345,-0.8447762727737427,-0.8420184850692749,1.2788599729537964,-0.8192189931869507,1.245342493057251]);
  net_h1_w[500] = new Float32Array([1.2975826263427734,1.3144023418426514,-0.7724120020866394,-0.7352699041366577,-0.7569385170936584,1.2957077026367188,-0.76982182264328,1.2452232837677002]);
  net_h1_w[501] = new Float32Array([1.687143087387085,1.6536402702331543,-1.0657070875167847,-1.025460958480835,-1.0206544399261475,1.6902769804000854,-1.067999243736267,1.67842698097229]);
  net_h1_w[502] = new Float32Array([1.2128835916519165,1.2078287601470947,-0.6580138802528381,-0.6435815095901489,-0.6430391669273376,1.2466955184936523,-0.6580676436424255,1.21213698387146]);
  net_h1_w[503] = new Float32Array([1.1871825456619263,1.198338508605957,-0.7857134938240051,-0.8007391691207886,-0.785095751285553,1.1304590702056885,-0.7727439403533936,1.180479884147644]);
  net_h1_w[504] = new Float32Array([1.3669263124465942,1.3670175075531006,-0.9823007583618164,-0.9878884553909302,-1.0019745826721191,1.3684020042419434,-0.9574777483940125,1.3535727262496948]);
  net_h1_w[505] = new Float32Array([1.2229375839233398,1.20842707157135,-0.6897707581520081,-0.6931679248809814,-0.6839577555656433,1.1902204751968384,-0.6781648397445679,1.2236577272415161]);
  net_h1_w[506] = new Float32Array([1.2848682403564453,1.2861263751983643,-0.8005860447883606,-0.7787438035011292,-0.7727469801902771,1.2965340614318848,-0.8452355265617371,1.2933869361877441]);
  net_h1_w[507] = new Float32Array([1.519235610961914,1.528742790222168,-0.8009039163589478,-0.814488410949707,-0.7834617495536804,1.540244221687317,-0.7992352247238159,1.534237027168274]);
  net_h1_w[508] = new Float32Array([1.3994102478027344,1.3512392044067383,-0.7286603450775146,-0.7266301512718201,-0.7336535453796387,1.3467450141906738,-0.726872980594635,1.3860273361206055]);
  net_h1_w[509] = new Float32Array([1.0824322700500488,1.0489205121994019,-0.5410143136978149,-0.5478001832962036,-0.5764278173446655,1.0180741548538208,-0.5957123637199402,1.0147302150726318]);
  net_h1_w[510] = new Float32Array([1.052507758140564,1.0702177286148071,-0.6604932546615601,-0.6480377912521362,-0.6384758353233337,1.0684980154037476,-0.6575421690940857,1.1071357727050781]);
  net_h1_w[511] = new Float32Array([1.367826223373413,1.31296706199646,-0.9077742099761963,-0.7966508269309998,-0.8867458701133728,1.3038320541381836,-0.7634355425834656,1.3474732637405396]);
  net_h1_w[512] = new Float32Array([1.334151268005371,1.2878260612487793,-1.0715508460998535,-1.0861064195632935,-1.0662113428115845,1.3394076824188232,-1.075750708580017,1.299712896347046]);
  net_h1_w[513] = new Float32Array([1.421987771987915,1.329344630241394,-1.087839126586914,-1.0944820642471313,-1.0886601209640503,1.3367286920547485,-1.0551882982254028,1.378790259361267]);
  net_h1_w[514] = new Float32Array([1.2065050601959229,1.2363817691802979,-1.1530251502990723,-1.201849341392517,-1.1701105833053589,1.2758204936981201,-1.1878447532653809,1.2436552047729492]);
  net_h1_w[515] = new Float32Array([1.244065523147583,1.1992073059082031,-0.9894254207611084,-0.9893853068351746,-0.9919338822364807,1.2559459209442139,-0.9428426027297974,1.2305306196212769]);
  net_h1_w[516] = new Float32Array([1.4314494132995605,1.3920199871063232,-1.1843456029891968,-1.1947498321533203,-1.171744465827942,1.4256356954574585,-1.1829596757888794,1.406341552734375]);
  net_h1_w[517] = new Float32Array([1.221159815788269,1.3066874742507935,-1.1888387203216553,-1.2027443647384644,-1.1543797254562378,1.2644894123077393,-1.127192735671997,1.2538418769836426]);
  net_h1_w[518] = new Float32Array([1.4099516868591309,1.3721566200256348,-1.1123652458190918,-1.1317795515060425,-1.1069912910461426,1.4402657747268677,-1.096318006515503,1.421913743019104]);
  net_h1_w[519] = new Float32Array([1.3886241912841797,1.3988844156265259,-1.1554181575775146,-1.1489338874816895,-1.1105438470840454,1.3870404958724976,-1.1158157587051392,1.376135230064392]);
  net_h1_w[520] = new Float32Array([1.4294270277023315,1.4399287700653076,-1.0356417894363403,-1.0363366603851318,-1.021941065788269,1.4212931394577026,-1.0239652395248413,1.4585572481155396]);
  net_h1_w[521] = new Float32Array([1.3862594366073608,1.4392237663269043,-1.2243925333023071,-1.1810085773468018,-1.1695518493652344,1.432656168937683,-1.2050913572311401,1.3922221660614014]);
  net_h1_w[522] = new Float32Array([1.4174950122833252,1.415787935256958,-1.0144473314285278,-1.0262725353240967,-1.0088444948196411,1.3740392923355103,-1.0306305885314941,1.3416396379470825]);
  net_h1_w[523] = new Float32Array([1.3586115837097168,1.3609308004379272,-1.2019217014312744,-1.175276756286621,-1.2135870456695557,1.4193660020828247,-1.2395083904266357,1.4009150266647339]);
  net_h1_w[524] = new Float32Array([1.4166985750198364,1.4191004037857056,-1.22510826587677,-1.228892207145691,-1.2188923358917236,1.3518826961517334,-1.1584290266036987,1.4335724115371704]);
  net_h1_w[525] = new Float32Array([1.3841811418533325,1.3358527421951294,-1.0543746948242188,-1.0550683736801147,-1.0975440740585327,1.342312216758728,-1.037376046180725,1.357359528541565]);
  net_h1_w[526] = new Float32Array([1.4359285831451416,1.4297106266021729,-1.193579077720642,-1.2395044565200806,-1.1981281042099,1.350967526435852,-1.1832406520843506,1.425472617149353]);
  net_h1_w[527] = new Float32Array([1.4625521898269653,1.4697906970977783,-1.2310049533843994,-1.1807645559310913,-1.2297347784042358,1.4569017887115479,-1.248821496963501,1.451107144355774]);
  net_h1_w[528] = new Float32Array([1.256946325302124,1.2937308549880981,-1.0560110807418823,-1.033402681350708,-1.0550205707550049,1.2767670154571533,-1.0471383333206177,1.2871973514556885]);
  net_h1_w[529] = new Float32Array([1.5192077159881592,1.4711060523986816,-1.045945167541504,-1.0412840843200684,-1.0565369129180908,1.460925817489624,-1.035251259803772,1.4970101118087769]);
  net_h1_w[530] = new Float32Array([1.3888578414916992,1.3296387195587158,-1.0516421794891357,-1.0620582103729248,-1.0817179679870605,1.3540207147598267,-1.0612800121307373,1.3349089622497559]);
  net_h1_w[531] = new Float32Array([1.4075853824615479,1.4169905185699463,-1.1476922035217285,-1.163515329360962,-1.1751066446304321,1.421114444732666,-1.1756601333618164,1.3975093364715576]);
  net_h1_w[532] = new Float32Array([1.3793623447418213,1.3916826248168945,-1.191374659538269,-1.1748641729354858,-1.1866238117218018,1.4317282438278198,-1.2027380466461182,1.4096771478652954]);
  net_h1_w[533] = new Float32Array([1.5224820375442505,1.4643880128860474,-1.236786127090454,-1.2270795106887817,-1.1952913999557495,1.4548219442367554,-1.2091368436813354,1.5126036405563354]);
  net_h1_w[534] = new Float32Array([1.4753516912460327,1.4305373430252075,-1.1622354984283447,-1.1525473594665527,-1.150376319885254,1.427322268486023,-1.175851821899414,1.4667067527770996]);
  net_h1_w[535] = new Float32Array([1.3335157632827759,1.3482304811477661,-1.1800724267959595,-1.178584098815918,-1.1828863620758057,1.3245917558670044,-1.1572320461273193,1.3239210844039917]);
  net_h1_w[536] = new Float32Array([1.3941251039505005,1.381326675415039,-1.0597280263900757,-1.0929540395736694,-1.0771902799606323,1.3864173889160156,-1.0907727479934692,1.393917441368103]);
  net_h1_w[537] = new Float32Array([1.5164520740509033,1.5103799104690552,-1.125288724899292,-1.1589727401733398,-1.116741418838501,1.5327874422073364,-1.1445667743682861,1.4795827865600586]);
  net_h1_w[538] = new Float32Array([1.495473861694336,1.496720790863037,-1.0763612985610962,-1.0519468784332275,-1.0567545890808105,1.4564487934112549,-1.0554174184799194,1.4800148010253906]);
  net_h1_w[539] = new Float32Array([1.6898912191390991,1.7136415243148804,-1.2039570808410645,-1.2154514789581299,-1.2326419353485107,1.7378337383270264,-1.2017414569854736,1.680578589439392]);
  net_h1_w[540] = new Float32Array([1.7050461769104004,1.7480370998382568,-1.016592264175415,-1.000112533569336,-0.995108425617218,1.772176742553711,-1.0048454999923706,1.7719210386276245]);
  net_h1_w[541] = new Float32Array([1.4187535047531128,1.3221185207366943,-1.0870566368103027,-1.0709991455078125,-1.060823678970337,1.4004123210906982,-1.0448930263519287,1.3593878746032715]);
  net_h1_w[542] = new Float32Array([1.4379085302352905,1.4984904527664185,-1.116016149520874,-1.1377114057540894,-1.103195309638977,1.4695096015930176,-1.1135342121124268,1.4501256942749023]);
  net_h1_w[543] = new Float32Array([1.4754786491394043,1.5222989320755005,-1.0799328088760376,-1.0822150707244873,-1.0790045261383057,1.476893663406372,-1.046581506729126,1.5332998037338257]);
  net_h1_w[544] = new Float32Array([1.3906599283218384,1.3622404336929321,-0.9721459746360779,-0.9615904688835144,-0.9755010604858398,1.3893325328826904,-0.9860310554504395,1.4062422513961792]);
  net_h1_w[545] = new Float32Array([1.5564038753509521,1.5701526403427124,-1.1451473236083984,-1.1453311443328857,-1.1213504076004028,1.5611281394958496,-1.114689588546753,1.5839722156524658]);
  net_h1_w[546] = new Float32Array([1.5798202753067017,1.5808171033859253,-1.0196373462677002,-1.0103880167007446,-1.0000104904174805,1.628590703010559,-1.00912344455719,1.5973354578018188]);
  net_h1_w[547] = new Float32Array([1.7735735177993774,1.752855658531189,-0.9918316602706909,-0.983938455581665,-0.9924926161766052,1.7992500066757202,-0.9837183356285095,1.7987327575683594]);
  net_h1_w[548] = new Float32Array([1.8172842264175415,1.7825897932052612,-1.134366512298584,-1.1522363424301147,-1.1396167278289795,1.816562294960022,-1.1245695352554321,1.8158870935440063]);
  net_h1_w[549] = new Float32Array([1.6420143842697144,1.637369155883789,-1.0365902185440063,-1.0537906885147095,-1.0339528322219849,1.566704511642456,-1.0235644578933716,1.6050643920898438]);
  net_h1_w[550] = new Float32Array([1.4981497526168823,1.5586204528808594,-1.196638822555542,-1.1819020509719849,-1.183409333229065,1.5366322994232178,-1.1790698766708374,1.5505565404891968]);
  net_h1_w[551] = new Float32Array([1.493457317352295,1.5091856718063354,-1.0542980432510376,-1.0316405296325684,-1.0677053928375244,1.492050051689148,-1.0634247064590454,1.5373860597610474]);
  net_h1_w[552] = new Float32Array([1.1046897172927856,1.0906068086624146,-0.6794419884681702,-0.6678687334060669,-0.6890562772750854,1.045300841331482,-0.6725208163261414,1.0374926328659058]);
  net_h1_w[553] = new Float32Array([1.5559383630752563,1.5723575353622437,-1.0879069566726685,-1.0951265096664429,-1.0927592515945435,1.5754529237747192,-1.0947707891464233,1.584933876991272]);
  net_h1_w[554] = new Float32Array([1.2912192344665527,1.3422037363052368,-0.7807939648628235,-0.7697840929031372,-0.7708860039710999,1.3258209228515625,-0.7633642554283142,1.2972028255462646]);
  net_h1_w[555] = new Float32Array([1.6552172899246216,1.6567364931106567,-0.9851571917533875,-0.9839916825294495,-0.9952796697616577,1.58615243434906,-0.9983069896697998,1.6566004753112793]);
  net_h1_w[556] = new Float32Array([1.75984525680542,1.8092000484466553,-1.136324405670166,-1.1499115228652954,-1.166614294052124,1.818357229232788,-1.1592813730239868,1.784324049949646]);
  net_h1_w[557] = new Float32Array([1.5406768321990967,1.4574774503707886,-0.9187244772911072,-0.9135134220123291,-0.9129809141159058,1.4550937414169312,-0.9280692934989929,1.4379397630691528]);
  net_h1_w[558] = new Float32Array([1.713073492050171,1.7245310544967651,-1.1151893138885498,-1.110229253768921,-1.115828275680542,1.7064803838729858,-1.119508147239685,1.7289842367172241]);
  net_h1_w[559] = new Float32Array([1.263575553894043,1.2424770593643188,-0.9867693185806274,-1.0371556282043457,-1.0263372659683228,1.1956915855407715,-1.0149354934692383,1.237516164779663]);
  net_h1_w[560] = new Float32Array([1.4341131448745728,1.446954369544983,-0.9020302891731262,-0.9073752164840698,-0.876160740852356,1.4271875619888306,-0.9042931795120239,1.4258580207824707]);
  net_h1_w[561] = new Float32Array([1.553857684135437,1.5207436084747314,-0.9839821457862854,-0.9743037819862366,-0.9647457599639893,1.5192228555679321,-0.9654245972633362,1.582963228225708]);
  net_h1_w[562] = new Float32Array([1.5632275342941284,1.621759295463562,-1.1364144086837769,-1.108698844909668,-1.1319808959960938,1.574895977973938,-1.1056833267211914,1.6252574920654297]);
  net_h1_w[563] = new Float32Array([1.2302244901657104,1.2527590990066528,-0.8313257694244385,-0.8565775156021118,-0.8288085460662842,1.2577871084213257,-0.8426768183708191,1.286347508430481]);
  net_h1_w[564] = new Float32Array([1.3849679231643677,1.4126530885696411,-0.8260934948921204,-0.81256103515625,-0.8465607166290283,1.3692134618759155,-0.8306305408477783,1.3837251663208008]);
  net_h1_w[565] = new Float32Array([1.6975018978118896,1.625744342803955,-1.042405605316162,-1.0296962261199951,-1.0457236766815186,1.6762933731079102,-1.0215373039245605,1.6635181903839111]);
  net_h1_w[566] = new Float32Array([1.6033856868743896,1.5690900087356567,-1.105765700340271,-1.094903588294983,-1.0943886041641235,1.5787590742111206,-1.0928932428359985,1.6173090934753418]);
  net_h1_w[567] = new Float32Array([1.34956693649292,1.3364158868789673,-0.9012118577957153,-0.908146321773529,-0.8619025349617004,1.3829898834228516,-0.9127005338668823,1.3143620491027832]);
  net_h1_w[568] = new Float32Array([1.7039813995361328,1.7315071821212769,-1.2306020259857178,-1.199324369430542,-1.1945745944976807,1.6943118572235107,-1.2417116165161133,1.681958556175232]);
  net_h1_w[569] = new Float32Array([1.3613591194152832,1.296125054359436,-0.8475654125213623,-0.8735820055007935,-0.8476217985153198,1.3109018802642822,-0.8931172490119934,1.3560214042663574]);
  net_h1_w[570] = new Float32Array([1.3152720928192139,1.3054653406143188,-0.7518875598907471,-0.7594287395477295,-0.735415518283844,1.3509715795516968,-0.7673150300979614,1.3420140743255615]);
  net_h1_w[571] = new Float32Array([1.5749378204345703,1.5456312894821167,-0.8125056028366089,-0.7997942566871643,-0.8131109476089478,1.5582404136657715,-0.8033557534217834,1.5210561752319336]);
  net_h1_w[572] = new Float32Array([1.7216323614120483,1.6800191402435303,-1.1273603439331055,-1.1250882148742676,-1.1085773706436157,1.7090092897415161,-1.118411898612976,1.7166169881820679]);
  net_h1_w[573] = new Float32Array([1.4435456991195679,1.391085147857666,-0.9539775848388672,-0.942895770072937,-0.9502315521240234,1.4367173910140991,-0.924125075340271,1.42865788936615]);
  net_h1_w[574] = new Float32Array([1.3219819068908691,1.3221285343170166,-0.8818512558937073,-0.864676296710968,-0.8554874658584595,1.3066998720169067,-0.858199954032898,1.341819405555725]);
  net_h1_w[575] = new Float32Array([1.3782501220703125,1.4320403337478638,-0.9279265403747559,-0.9466984272003174,-0.9625139236450195,1.3777296543121338,-0.9584372639656067,1.3554624319076538]);
  net_h1_w[576] = new Float32Array([2.0008628368377686,2.0628745555877686,-1.8428077697753906,-1.8407915830612183,-1.8082603216171265,2.0338993072509766,-1.796699047088623,1.9994521141052246]);
  net_h1_w[577] = new Float32Array([2.100748062133789,2.0348997116088867,-1.8233120441436768,-1.803464412689209,-1.7583187818527222,2.0895273685455322,-1.7634971141815186,2.0428359508514404]);
  net_h1_w[578] = new Float32Array([2.180527448654175,2.2019705772399902,-1.830494999885559,-1.8624043464660645,-1.83539617061615,2.1630921363830566,-1.8004357814788818,2.1748857498168945]);
  net_h1_w[579] = new Float32Array([2.179980993270874,2.1974358558654785,-1.8267652988433838,-1.8192545175552368,-1.8514323234558105,2.2136006355285645,-1.8030837774276733,2.2159903049468994]);
  net_h1_w[580] = new Float32Array([2.244255304336548,2.223693370819092,-1.8957791328430176,-1.8817288875579834,-1.8936314582824707,2.2284884452819824,-1.8700815439224243,2.2448689937591553]);
  net_h1_w[581] = new Float32Array([2.1770753860473633,2.147231101989746,-1.8744515180587769,-1.8905693292617798,-1.8465147018432617,2.1605679988861084,-1.8781201839447021,2.13223934173584]);
  net_h1_w[582] = new Float32Array([2.1493115425109863,2.126810312271118,-1.8259739875793457,-1.8596729040145874,-1.850039005279541,2.1251065731048584,-1.859580397605896,2.1011962890625]);
  net_h1_w[583] = new Float32Array([2.0256266593933105,2.044840097427368,-1.8602080345153809,-1.8113826513290405,-1.8494192361831665,1.9982175827026367,-1.8392970561981201,2.0292186737060547]);
  net_h1_w[584] = new Float32Array([2.0407161712646484,1.9965819120407104,-1.785211443901062,-1.7425119876861572,-1.772735357284546,2.00905704498291,-1.7394441366195679,1.966125249862671]);
  net_h1_w[585] = new Float32Array([2.1551482677459717,2.1325278282165527,-1.8743616342544556,-1.8234599828720093,-1.843863844871521,2.12503981590271,-1.8940913677215576,2.1246073246002197]);
  net_h1_w[586] = new Float32Array([2.1514291763305664,2.1513760089874268,-1.7292649745941162,-1.7510745525360107,-1.7413150072097778,2.13427734375,-1.7196016311645508,2.112485408782959]);
  net_h1_w[587] = new Float32Array([2.2170963287353516,2.1630537509918213,-1.8462916612625122,-1.8326380252838135,-1.8274121284484863,2.180032730102539,-1.856665849685669,2.1695711612701416]);
  net_h1_w[588] = new Float32Array([2.153374671936035,2.1625659465789795,-1.7433499097824097,-1.761383056640625,-1.790428638458252,2.1647555828094482,-1.8012843132019043,2.138417959213257]);
  net_h1_w[589] = new Float32Array([2.163428544998169,2.1707215309143066,-1.819433331489563,-1.7924984693527222,-1.7971285581588745,2.210740804672241,-1.8310531377792358,2.186764717102051]);
  net_h1_w[590] = new Float32Array([2.1591386795043945,2.1858222484588623,-1.8474005460739136,-1.8761632442474365,-1.8819154500961304,2.1782455444335938,-1.9015703201293945,2.140432834625244]);
  net_h1_w[591] = new Float32Array([2.121676206588745,2.0912342071533203,-1.8122515678405762,-1.8217204809188843,-1.8235175609588623,2.071061372756958,-1.8208591938018799,2.09047794342041]);
  net_h1_w[592] = new Float32Array([1.9534687995910645,2.001802921295166,-1.721305251121521,-1.6846100091934204,-1.7059961557388306,1.9354033470153809,-1.7292014360427856,1.949622392654419]);
  net_h1_w[593] = new Float32Array([2.109154462814331,2.105524778366089,-1.780922770500183,-1.75566565990448,-1.767052412033081,2.105422258377075,-1.7635602951049805,2.0629446506500244]);
  net_h1_w[594] = new Float32Array([2.0761163234710693,2.082216739654541,-1.7251324653625488,-1.757707953453064,-1.751142978668213,2.061122417449951,-1.739655613899231,2.0609686374664307]);
  net_h1_w[595] = new Float32Array([2.0834803581237793,2.0632147789001465,-1.7122865915298462,-1.7147620916366577,-1.7231836318969727,2.10872483253479,-1.7245968580245972,2.099846839904785]);
  net_h1_w[596] = new Float32Array([2.244260311126709,2.2206249237060547,-1.8622181415557861,-1.8546768426895142,-1.8450804948806763,2.2448203563690186,-1.880189299583435,2.261935234069824]);
  net_h1_w[597] = new Float32Array([2.170167922973633,2.192720413208008,-1.8036326169967651,-1.8025518655776978,-1.810437560081482,2.177436113357544,-1.8042610883712769,2.1687512397766113]);
  net_h1_w[598] = new Float32Array([2.173637866973877,2.2023661136627197,-1.8965883255004883,-1.9014564752578735,-1.9237509965896606,2.215453624725342,-1.8914705514907837,2.1579785346984863]);
  net_h1_w[599] = new Float32Array([2.0791847705841064,2.0549631118774414,-1.8444409370422363,-1.8152501583099365,-1.8119722604751587,2.117443084716797,-1.828440546989441,2.0729568004608154]);
  net_h1_w[600] = new Float32Array([2.23093843460083,2.2341651916503906,-1.7219074964523315,-1.7102903127670288,-1.7337989807128906,2.1940460205078125,-1.730381727218628,2.1955528259277344]);
  net_h1_w[601] = new Float32Array([2.1709413528442383,2.17164945602417,-1.7011480331420898,-1.690764307975769,-1.6766533851623535,2.1715943813323975,-1.675223708152771,2.164541244506836]);
  net_h1_w[602] = new Float32Array([2.2410824298858643,2.263451337814331,-1.8428727388381958,-1.8407405614852905,-1.8278470039367676,2.294969320297241,-1.849773645401001,2.2977888584136963]);
  net_h1_w[603] = new Float32Array([2.3304474353790283,2.3357737064361572,-1.7220377922058105,-1.735718011856079,-1.7219173908233643,2.2635717391967773,-1.7347229719161987,2.267925262451172]);
  net_h1_w[604] = new Float32Array([2.3324947357177734,2.3722891807556152,-1.8291348218917847,-1.8350837230682373,-1.8339736461639404,2.3112783432006836,-1.8484792709350586,2.364988088607788]);
  net_h1_w[605] = new Float32Array([2.349905014038086,2.32722544670105,-1.8182765245437622,-1.8439754247665405,-1.8463268280029297,2.3337278366088867,-1.8572620153427124,2.2842438220977783]);
  net_h1_w[606] = new Float32Array([2.2514901161193848,2.2573964595794678,-1.7209484577178955,-1.7270984649658203,-1.7384705543518066,2.2862534523010254,-1.7251310348510742,2.2285807132720947]);
  net_h1_w[607] = new Float32Array([2.2254011631011963,2.2265145778656006,-1.7632683515548706,-1.763007640838623,-1.7888728380203247,2.2313899993896484,-1.7495100498199463,2.194570541381836]);
  net_h1_w[608] = new Float32Array([2.375176429748535,2.4002013206481934,-1.6549766063690186,-1.6763019561767578,-1.6603078842163086,2.374375104904175,-1.6693661212921143,2.364262580871582]);
  net_h1_w[609] = new Float32Array([2.443427324295044,2.474053382873535,-1.6682714223861694,-1.6643671989440918,-1.6734598875045776,2.4711060523986816,-1.6826720237731934,2.472017526626587]);
  net_h1_w[610] = new Float32Array([2.5905954837799072,2.54471755027771,-1.7323349714279175,-1.7252085208892822,-1.7303236722946167,2.5754289627075195,-1.7360689640045166,2.502899646759033]);
  net_h1_w[611] = new Float32Array([2.511929750442505,2.516362428665161,-1.7886756658554077,-1.8024373054504395,-1.8045542240142822,2.5149707794189453,-1.7987557649612427,2.4737281799316406]);
  net_h1_w[612] = new Float32Array([2.639216184616089,2.598599433898926,-1.753726601600647,-1.7595090866088867,-1.7572097778320312,2.5534985065460205,-1.7679363489151,2.5838229656219482]);
  net_h1_w[613] = new Float32Array([2.5393385887145996,2.4569597244262695,-1.5772809982299805,-1.5875076055526733,-1.577005386352539,2.4996845722198486,-1.574902057647705,2.4831888675689697]);
  net_h1_w[614] = new Float32Array([2.556121349334717,2.518101692199707,-1.7162516117095947,-1.7183386087417603,-1.7163214683532715,2.565469264984131,-1.7205194234848022,2.517129898071289]);
  net_h1_w[615] = new Float32Array([2.5170748233795166,2.5212223529815674,-1.7624826431274414,-1.7660561800003052,-1.7569879293441772,2.501323938369751,-1.772135853767395,2.4715094566345215]);
  net_h1_w[616] = new Float32Array([2.552280902862549,2.5469088554382324,-1.741829514503479,-1.7431548833847046,-1.7481894493103027,2.581017017364502,-1.7493081092834473,2.5078468322753906]);
  net_h1_w[617] = new Float32Array([2.5552966594696045,2.581864356994629,-1.7439165115356445,-1.7490200996398926,-1.7402738332748413,2.5075302124023438,-1.759199619293213,2.5833358764648438]);
  net_h1_w[618] = new Float32Array([2.60900616645813,2.5869531631469727,-1.8133771419525146,-1.8399615287780762,-1.8325181007385254,2.5456392765045166,-1.8259592056274414,2.548433780670166]);
  net_h1_w[619] = new Float32Array([2.6139838695526123,2.6389503479003906,-1.8740241527557373,-1.8822746276855469,-1.8729619979858398,2.609576940536499,-1.8810385465621948,2.5981950759887695]);
  net_h1_w[620] = new Float32Array([2.651155471801758,2.620302200317383,-1.857024908065796,-1.8721601963043213,-1.8853161334991455,2.646653890609741,-1.8801602125167847,2.65824294090271]);
  net_h1_w[621] = new Float32Array([2.6421895027160645,2.6390273571014404,-1.8121933937072754,-1.8187674283981323,-1.820144772529602,2.69203782081604,-1.8310946226119995,2.700549364089966]);
  net_h1_w[622] = new Float32Array([2.575084686279297,2.5617756843566895,-1.7857557535171509,-1.7926560640335083,-1.7874107360839844,2.5330305099487305,-1.807616114616394,2.5107016563415527]);
  net_h1_w[623] = new Float32Array([2.5307905673980713,2.4846677780151367,-1.7564375400543213,-1.7482357025146484,-1.7523119449615479,2.535585641860962,-1.7676725387573242,2.503506898880005]);
  net_h1_w[624] = new Float32Array([2.5423049926757812,2.512852191925049,-1.7399545907974243,-1.7622230052947998,-1.7495700120925903,2.497411012649536,-1.7582517862319946,2.5426888465881348]);
  net_h1_w[625] = new Float32Array([2.6376938819885254,2.60235595703125,-1.7530664205551147,-1.753099799156189,-1.7567845582962036,2.5996434688568115,-1.7677817344665527,2.616365909576416]);
  net_h1_w[626] = new Float32Array([2.520143985748291,2.4895987510681152,-1.759384274482727,-1.7763961553573608,-1.7857304811477661,2.484809160232544,-1.7804763317108154,2.4620959758758545]);
  net_h1_w[627] = new Float32Array([2.5259368419647217,2.515672206878662,-1.698005199432373,-1.6848024129867554,-1.7048108577728271,2.45528507232666,-1.6948472261428833,2.5067481994628906]);
  net_h1_w[628] = new Float32Array([2.459988832473755,2.4156908988952637,-1.6743475198745728,-1.6903802156448364,-1.6967766284942627,2.450577974319458,-1.6851922273635864,2.4214494228363037]);
  net_h1_w[629] = new Float32Array([2.3313095569610596,2.3496274948120117,-1.5803306102752686,-1.5777610540390015,-1.5662622451782227,2.342913866043091,-1.5857701301574707,2.3548355102539062]);
  net_h1_w[630] = new Float32Array([2.6354660987854004,2.664466381072998,-1.803283452987671,-1.8183523416519165,-1.8194856643676758,2.6264946460723877,-1.7982943058013916,2.615055799484253]);
  net_h1_w[631] = new Float32Array([2.5105326175689697,2.5255074501037598,-1.743778944015503,-1.7479318380355835,-1.7506698369979858,2.536750555038452,-1.7627469301223755,2.516014814376831]);
  net_h1_w[632] = new Float32Array([2.4795939922332764,2.460188388824463,-1.7267369031906128,-1.7282238006591797,-1.737093448638916,2.4688267707824707,-1.736129879951477,2.466813325881958]);
  net_h1_w[633] = new Float32Array([2.6740150451660156,2.633310079574585,-1.7750297784805298,-1.779962182044983,-1.7969681024551392,2.668862819671631,-1.7875423431396484,2.676210880279541]);
  net_h1_w[634] = new Float32Array([2.578317403793335,2.5405571460723877,-1.7342779636383057,-1.7248016595840454,-1.7158012390136719,2.565929412841797,-1.730399489402771,2.5251410007476807]);
  net_h1_w[635] = new Float32Array([2.5604541301727295,2.61773419380188,-1.8062958717346191,-1.7865264415740967,-1.7868444919586182,2.552248477935791,-1.799261450767517,2.5852251052856445]);
  net_h1_w[636] = new Float32Array([2.508263111114502,2.49849534034729,-1.7117472887039185,-1.7162545919418335,-1.7112221717834473,2.5098962783813477,-1.7194288969039917,2.4935739040374756]);
  net_h1_w[637] = new Float32Array([2.6771697998046875,2.626248359680176,-1.694671630859375,-1.6874465942382812,-1.6879583597183228,2.6852691173553467,-1.7018685340881348,2.6069531440734863]);
  net_h1_w[638] = new Float32Array([2.6751346588134766,2.6531243324279785,-1.768955111503601,-1.777601957321167,-1.782470464706421,2.586374521255493,-1.771654486656189,2.6264803409576416]);
  net_h1_w[639] = new Float32Array([2.7810611724853516,2.785696268081665,-1.8226313591003418,-1.8427987098693848,-1.8431122303009033,2.7633092403411865,-1.8310706615447998,2.7440428733825684]);
  net_h1_w[640] = new Float32Array([2.888296127319336,2.9010837078094482,-2.6328320503234863,-2.6489005088806152,-2.6268150806427,2.9053456783294678,-2.6588990688323975,2.8834338188171387]);
  net_h1_w[641] = new Float32Array([2.737680435180664,2.8118391036987305,-2.5900015830993652,-2.6423263549804688,-2.6284265518188477,2.760054349899292,-2.59452748298645,2.7498373985290527]);
  net_h1_w[642] = new Float32Array([2.8340272903442383,2.8874244689941406,-2.7315797805786133,-2.69315505027771,-2.7488598823547363,2.828251600265503,-2.7273199558258057,2.8076889514923096]);
  net_h1_w[643] = new Float32Array([2.8497655391693115,2.8935155868530273,-2.860109329223633,-2.8617117404937744,-2.8543148040771484,2.8686306476593018,-2.8450028896331787,2.8365795612335205]);
  net_h1_w[644] = new Float32Array([2.9027116298675537,2.8692116737365723,-2.7617733478546143,-2.743900775909424,-2.7464118003845215,2.8549857139587402,-2.770343065261841,2.878566265106201]);
  net_h1_w[645] = new Float32Array([2.8790268898010254,2.8559486865997314,-2.6574549674987793,-2.6695685386657715,-2.653531074523926,2.836932420730591,-2.638214111328125,2.8035736083984375]);
  net_h1_w[646] = new Float32Array([2.8936731815338135,2.792766809463501,-2.659687042236328,-2.6420183181762695,-2.652902364730835,2.8271219730377197,-2.6103668212890625,2.8308944702148438]);
  net_h1_w[647] = new Float32Array([2.8863961696624756,2.9081010818481445,-2.6779696941375732,-2.668592929840088,-2.6815271377563477,2.9279584884643555,-2.6747941970825195,2.8820557594299316]);
  net_h1_w[648] = new Float32Array([2.821434736251831,2.7538931369781494,-2.5580086708068848,-2.5637624263763428,-2.5825648307800293,2.7800824642181396,-2.5877697467803955,2.7516961097717285]);
  net_h1_w[649] = new Float32Array([2.9453046321868896,2.9368245601654053,-2.657658815383911,-2.671947956085205,-2.6830976009368896,2.92301344871521,-2.6789870262145996,2.9261367321014404]);
  net_h1_w[650] = new Float32Array([2.914057970046997,2.9254651069641113,-2.7749736309051514,-2.7898523807525635,-2.7872135639190674,2.961010694503784,-2.795149326324463,2.9573049545288086]);
  net_h1_w[651] = new Float32Array([2.9522016048431396,2.9953885078430176,-2.74595046043396,-2.746391773223877,-2.7249772548675537,2.93053936958313,-2.785306930541992,2.9358294010162354]);
  net_h1_w[652] = new Float32Array([2.856229543685913,2.8892455101013184,-2.7355051040649414,-2.755983352661133,-2.7343668937683105,2.9098963737487793,-2.707855224609375,2.8911075592041016]);
  net_h1_w[653] = new Float32Array([2.9482455253601074,2.916698455810547,-2.680067539215088,-2.653642177581787,-2.6764438152313232,2.958757162094116,-2.699484348297119,2.975912094116211]);
  net_h1_w[654] = new Float32Array([2.930889368057251,2.9101855754852295,-2.5845651626586914,-2.60001802444458,-2.564009666442871,2.914504289627075,-2.5722312927246094,2.8903234004974365]);
  net_h1_w[655] = new Float32Array([2.943301200866699,2.9167730808258057,-2.659040689468384,-2.6451661586761475,-2.6383419036865234,2.902986764907837,-2.656991481781006,2.945744037628174]);
  net_h1_w[656] = new Float32Array([2.8885979652404785,2.9199328422546387,-2.561736583709717,-2.5777862071990967,-2.5565760135650635,2.918443202972412,-2.5604889392852783,2.906052827835083]);
  net_h1_w[657] = new Float32Array([3.001858949661255,3.0211119651794434,-2.7225046157836914,-2.6846964359283447,-2.711191415786743,3.003119945526123,-2.715125560760498,2.9881372451782227]);
  net_h1_w[658] = new Float32Array([2.9900264739990234,2.915675640106201,-2.629296064376831,-2.6070914268493652,-2.617962121963501,2.8889544010162354,-2.629390239715576,2.9431874752044678]);
  net_h1_w[659] = new Float32Array([2.9789657592773438,2.9290080070495605,-2.689312696456909,-2.686697244644165,-2.686384916305542,3.004765510559082,-2.681741714477539,3.00811505317688]);
  net_h1_w[660] = new Float32Array([2.998891592025757,3.053163528442383,-2.7269914150238037,-2.7485287189483643,-2.7384588718414307,3.04150128364563,-2.7599828243255615,3.0540077686309814]);
  net_h1_w[661] = new Float32Array([2.886199712753296,2.9451684951782227,-2.5981056690216064,-2.6032800674438477,-2.5899055004119873,2.890519142150879,-2.5927960872650146,2.926076650619507]);
  net_h1_w[662] = new Float32Array([2.891239643096924,2.8999476432800293,-2.567284345626831,-2.5769436359405518,-2.570490837097168,2.8902926445007324,-2.527742385864258,2.890242338180542]);
  net_h1_w[663] = new Float32Array([2.734215259552002,2.7259669303894043,-2.439053773880005,-2.449094533920288,-2.485442876815796,2.7267470359802246,-2.4515857696533203,2.7353615760803223]);
  net_h1_w[664] = new Float32Array([2.846547842025757,2.8171119689941406,-2.5564634799957275,-2.5223803520202637,-2.524510383605957,2.8133046627044678,-2.543409824371338,2.8165781497955322]);
  net_h1_w[665] = new Float32Array([3.2260372638702393,3.1436269283294678,-2.4445810317993164,-2.4556117057800293,-2.4475152492523193,3.2138640880584717,-2.4526212215423584,3.156816005706787]);
  net_h1_w[666] = new Float32Array([3.1536502838134766,3.1682305335998535,-2.5423805713653564,-2.518397808074951,-2.533820390701294,3.165177583694458,-2.520742654800415,3.095571756362915]);
  net_h1_w[667] = new Float32Array([3.1609864234924316,3.1977438926696777,-2.600342273712158,-2.628675937652588,-2.617129325866699,3.128147840499878,-2.6010499000549316,3.1383914947509766]);
  net_h1_w[668] = new Float32Array([3.1346542835235596,3.1529643535614014,-2.5046682357788086,-2.514345407485962,-2.489654779434204,3.1364352703094482,-2.494723320007324,3.116338014602661]);
  net_h1_w[669] = new Float32Array([3.126995801925659,3.162891149520874,-2.5690126419067383,-2.5728049278259277,-2.58660626411438,3.170836925506592,-2.556020498275757,3.084587574005127]);
  net_h1_w[670] = new Float32Array([2.951087713241577,2.952244997024536,-2.3745574951171875,-2.3695597648620605,-2.36374568939209,2.965440273284912,-2.4031925201416016,2.9399096965789795]);
  net_h1_w[671] = new Float32Array([2.9040849208831787,2.912142276763916,-2.3868279457092285,-2.4091415405273438,-2.3924074172973633,2.862637996673584,-2.416813611984253,2.8240065574645996]);
  net_h1_w[672] = new Float32Array([3.281015157699585,3.2386226654052734,-2.4850213527679443,-2.498886823654175,-2.4997968673706055,3.261075496673584,-2.5027830600738525,3.273139476776123]);
  net_h1_w[673] = new Float32Array([3.313882827758789,3.288478136062622,-2.551631450653076,-2.55904483795166,-2.5376620292663574,3.328348159790039,-2.5625064373016357,3.2843141555786133]);
  net_h1_w[674] = new Float32Array([3.5432915687561035,3.511836051940918,-2.587425947189331,-2.604163646697998,-2.603109836578369,3.580207109451294,-2.60622501373291,3.5080347061157227]);
  net_h1_w[675] = new Float32Array([3.494229793548584,3.471463680267334,-2.499516487121582,-2.4967212677001953,-2.4996109008789062,3.401322841644287,-2.5112152099609375,3.4113705158233643]);
  net_h1_w[676] = new Float32Array([3.493067979812622,3.4950156211853027,-2.498093605041504,-2.4935083389282227,-2.4991583824157715,3.4716005325317383,-2.5013210773468018,3.473889112472534]);
  net_h1_w[677] = new Float32Array([3.2886710166931152,3.298854351043701,-2.3914425373077393,-2.3946588039398193,-2.3798141479492188,3.298185110092163,-2.3917596340179443,3.290792942047119]);
  net_h1_w[678] = new Float32Array([3.1795926094055176,3.1720147132873535,-2.386883497238159,-2.392261505126953,-2.393367290496826,3.126215934753418,-2.407539129257202,3.1243948936462402]);
  net_h1_w[679] = new Float32Array([2.9877727031707764,3.057208299636841,-2.476003646850586,-2.4835031032562256,-2.4816300868988037,2.969993829727173,-2.478813886642456,2.9893319606781006]);
  net_h1_w[680] = new Float32Array([2.904491424560547,2.912609338760376,-2.2451908588409424,-2.2464911937713623,-2.2331578731536865,2.9091789722442627,-2.274193525314331,2.925644874572754]);
  net_h1_w[681] = new Float32Array([3.2463059425354004,3.2019217014312744,-2.435943841934204,-2.402768135070801,-2.4264943599700928,3.1887574195861816,-2.4174790382385254,3.2411041259765625]);
  net_h1_w[682] = new Float32Array([3.3375236988067627,3.39680552482605,-2.3571689128875732,-2.3639323711395264,-2.3621277809143066,3.3850836753845215,-2.36617112159729,3.373823642730713]);
  net_h1_w[683] = new Float32Array([3.3617827892303467,3.327467203140259,-2.3864872455596924,-2.3877336978912354,-2.3834750652313232,3.3366169929504395,-2.396132469177246,3.336639404296875]);
  net_h1_w[684] = new Float32Array([3.4495034217834473,3.4272775650024414,-2.414670944213867,-2.4281065464019775,-2.413609266281128,3.454258680343628,-2.431527853012085,3.426258087158203]);
  net_h1_w[685] = new Float32Array([3.4137144088745117,3.373168468475342,-2.376314640045166,-2.392462730407715,-2.389068365097046,3.4091217517852783,-2.4014251232147217,3.357722043991089]);
  net_h1_w[686] = new Float32Array([3.166175365447998,3.1321773529052734,-2.385331153869629,-2.4018895626068115,-2.3882060050964355,3.2152352333068848,-2.4097869396209717,3.211581230163574]);
  net_h1_w[687] = new Float32Array([3.24630069732666,3.1952385902404785,-2.497676134109497,-2.5039877891540527,-2.4973294734954834,3.184868812561035,-2.5409367084503174,3.1825661659240723]);
  net_h1_w[688] = new Float32Array([3.2251594066619873,3.2242040634155273,-2.413586378097534,-2.4237008094787598,-2.40480637550354,3.2190232276916504,-2.4106743335723877,3.2454473972320557]);
  net_h1_w[689] = new Float32Array([3.4490792751312256,3.3634192943573,-2.4654812812805176,-2.480055093765259,-2.4646952152252197,3.3540828227996826,-2.4845545291900635,3.4398491382598877]);
  net_h1_w[690] = new Float32Array([3.489471673965454,3.437472105026245,-2.498905897140503,-2.4939067363739014,-2.4987785816192627,3.447871446609497,-2.50044584274292,3.3895626068115234]);
  net_h1_w[691] = new Float32Array([3.4210360050201416,3.4298605918884277,-2.352539539337158,-2.3646607398986816,-2.3484880924224854,3.416689872741699,-2.351123094558716,3.470484495162964]);
  net_h1_w[692] = new Float32Array([3.4756414890289307,3.471001148223877,-2.3810434341430664,-2.378314256668091,-2.3788909912109375,3.5295534133911133,-2.3917174339294434,3.441391706466675]);
  net_h1_w[693] = new Float32Array([3.4708058834075928,3.4453344345092773,-2.4690449237823486,-2.4675235748291016,-2.4588584899902344,3.45117449760437,-2.4714972972869873,3.4365427494049072]);
  net_h1_w[694] = new Float32Array([3.6572580337524414,3.5771450996398926,-2.4917547702789307,-2.4748010635375977,-2.48083758354187,3.585941791534424,-2.5007998943328857,3.5459930896759033]);
  net_h1_w[695] = new Float32Array([3.4363045692443848,3.432861804962158,-2.633502244949341,-2.6379213333129883,-2.629765033721924,3.4035565853118896,-2.6425223350524902,3.4142098426818848]);
  net_h1_w[696] = new Float32Array([4.333884239196777,4.316313743591309,-2.0008230209350586,-2.006584405899048,-2.0017926692962646,4.266249656677246,-2.011669635772705,4.235954284667969]);
  net_h1_w[697] = new Float32Array([4.202529430389404,4.221651077270508,-1.942665696144104,-1.950019121170044,-1.943340539932251,4.22788143157959,-1.956323266029358,4.147680759429932]);
  net_h1_w[698] = new Float32Array([4.39455509185791,4.360353469848633,-2.0222253799438477,-2.0242257118225098,-2.0261175632476807,4.365392208099365,-2.036421060562134,4.303045749664307]);
  net_h1_w[699] = new Float32Array([3.7568445205688477,3.6777467727661133,-1.9557089805603027,-1.9733002185821533,-1.9684232473373413,3.697519540786743,-1.9696896076202393,3.650623321533203]);
  net_h1_w[700] = new Float32Array([4.254504203796387,4.239907741546631,-2.0196690559387207,-2.0301685333251953,-2.028118848800659,4.276923656463623,-2.031416654586792,4.183409690856934]);
  net_h1_w[701] = new Float32Array([4.3021392822265625,4.242043972015381,-1.7151540517807007,-1.717696189880371,-1.718334436416626,4.214985370635986,-1.7254183292388916,4.290067672729492]);
  net_h1_w[702] = new Float32Array([4.305138111114502,4.262423038482666,-1.9186517000198364,-1.9260488748550415,-1.927191138267517,4.267416477203369,-1.934027910232544,4.314306259155273]);
  net_h1_w[703] = new Float32Array([4.229649066925049,4.202040672302246,-2.0316390991210938,-2.041121006011963,-2.0362672805786133,4.239459037780762,-2.0431125164031982,4.237749099731445]);
  net_h1_w[704] = new Float32Array([0.5200657248497009,0.518233060836792,0.7262052893638611,0.7297323346138,0.7107356190681458,0.5236541628837585,0.7108609080314636,0.523688554763794]);
  net_h1_w[705] = new Float32Array([0.5539039373397827,0.5658600926399231,0.7474066019058228,0.7643152475357056,0.7273187041282654,0.5722395181655884,0.7493125796318054,0.578957736492157]);
  net_h1_w[706] = new Float32Array([0.49056553840637207,0.5327132940292358,0.7250853180885315,0.736497163772583,0.7341528534889221,0.5141994953155518,0.7325605750083923,0.5086109042167664]);
  net_h1_w[707] = new Float32Array([0.4611184000968933,0.44255688786506653,0.5199458003044128,0.5162683725357056,0.5037530660629272,0.4518439769744873,0.5050451159477234,0.46575790643692017]);
  net_h1_w[708] = new Float32Array([0.28173816204071045,0.24570712447166443,0.3276774287223816,0.35304972529411316,0.34104886651039124,0.2743830680847168,0.3615265488624573,0.24200879037380219]);
  net_h1_w[709] = new Float32Array([0.5288594961166382,0.5433975458145142,0.5859408974647522,0.5846006274223328,0.5895201563835144,0.5299112200737,0.5612761974334717,0.5214603543281555]);
  net_h1_w[710] = new Float32Array([0.5783169269561768,0.5830116868019104,0.6413975358009338,0.6445138454437256,0.632929801940918,0.5610266923904419,0.6449739336967468,0.5709092617034912]);
  net_h1_w[711] = new Float32Array([0.6125685572624207,0.6085261702537537,0.655822217464447,0.6564479470252991,0.6469705104827881,0.626352846622467,0.6591368317604065,0.6134932637214661]);
  net_h1_w[712] = new Float32Array([0.7062451243400574,0.7071638107299805,0.7670396566390991,0.7571110129356384,0.7474176287651062,0.6958619356155396,0.7693222761154175,0.7080047726631165]);
  net_h1_w[713] = new Float32Array([0.6584859490394592,0.6876260042190552,0.8330541253089905,0.8311764001846313,0.829119861125946,0.6638954877853394,0.8360965251922607,0.6566845774650574]);
  net_h1_w[714] = new Float32Array([0.6130430102348328,0.6335358619689941,0.7122897505760193,0.7323647141456604,0.7106715440750122,0.6102286577224731,0.7198841571807861,0.6323275566101074]);
  net_h1_w[715] = new Float32Array([0.5205116271972656,0.5179906487464905,0.664269208908081,0.7011839747428894,0.6815813183784485,0.525613009929657,0.6639336943626404,0.5234038829803467]);
  net_h1_w[716] = new Float32Array([0.5420868992805481,0.5277309417724609,0.6013369560241699,0.6119852066040039,0.6202812194824219,0.5025184154510498,0.5990445017814636,0.5301010012626648]);
  net_h1_w[717] = new Float32Array([0.6257468461990356,0.6230564117431641,0.6114426851272583,0.6175654530525208,0.6152158379554749,0.5588911175727844,0.621178150177002,0.609499990940094]);
  net_h1_w[718] = new Float32Array([0.7090808749198914,0.7026907205581665,0.7404385805130005,0.754304826259613,0.7399947047233582,0.6921803951263428,0.747802734375,0.6833962202072144]);
  net_h1_w[719] = new Float32Array([0.690612256526947,0.6879836916923523,0.720264732837677,0.7161712050437927,0.7112635970115662,0.6937519907951355,0.7237744331359863,0.6882802844047546]);
  net_h1_w[720] = new Float32Array([0.7539976239204407,0.7807713150978088,0.793237030506134,0.8110379576683044,0.796475350856781,0.7731688618659973,0.7887036204338074,0.7606369853019714]);
  net_h1_w[721] = new Float32Array([0.6589886546134949,0.6739373207092285,0.8805486559867859,0.889392077922821,0.8718084692955017,0.6750301122665405,0.8774768710136414,0.6686492562294006]);
  net_h1_w[722] = new Float32Array([0.6287046074867249,0.6338043212890625,0.87505042552948,0.8801993727684021,0.8838045597076416,0.6440619230270386,0.8787117600440979,0.6278876066207886]);
  net_h1_w[723] = new Float32Array([0.5447785258293152,0.6006278395652771,0.8099324703216553,0.8172398209571838,0.8128511905670166,0.556424081325531,0.8330544233322144,0.5829659104347229]);
  net_h1_w[724] = new Float32Array([0.5889697670936584,0.5789937973022461,0.7724983096122742,0.7756330966949463,0.7739099264144897,0.5911939144134521,0.7728294134140015,0.5820527076721191]);
  net_h1_w[725] = new Float32Array([0.6154743432998657,0.6242836713790894,0.7436398267745972,0.7562245726585388,0.7427451014518738,0.6487388014793396,0.7417795062065125,0.6266554594039917]);
  net_h1_w[726] = new Float32Array([0.6876357793807983,0.7020223736763,0.7936453223228455,0.7958007454872131,0.782965898513794,0.69234299659729,0.790593683719635,0.6769194006919861]);
  net_h1_w[727] = new Float32Array([0.6297805309295654,0.6275556683540344,0.7986822724342346,0.8003122210502625,0.786654531955719,0.6231838464736938,0.7855568528175354,0.621610164642334]);
  net_h1_w[728] = new Float32Array([0.6760550737380981,0.6885496973991394,0.8877532482147217,0.9077602624893188,0.8920654654502869,0.689795196056366,0.8881063461303711,0.6868112087249756]);
  net_h1_w[729] = new Float32Array([0.8675446510314941,0.8661283850669861,0.9414148926734924,0.9349862933158875,0.9308565258979797,0.8659205436706543,0.9288086891174316,0.8503659963607788]);
  net_h1_w[730] = new Float32Array([0.8128347992897034,0.809878945350647,0.8615227341651917,0.8680882453918457,0.8724434971809387,0.8199407458305359,0.8681941032409668,0.8095467686653137]);
  net_h1_w[731] = new Float32Array([0.9030508399009705,0.9171419739723206,0.7150335907936096,0.7254384160041809,0.7066874504089355,0.8985520005226135,0.720743715763092,0.8904643058776855]);
  net_h1_w[732] = new Float32Array([0.8873382210731506,0.886807918548584,0.7438399195671082,0.7484156489372253,0.7442898750305176,0.8888822197914124,0.7397624254226685,0.8933425545692444]);
  net_h1_w[733] = new Float32Array([0.8948485851287842,0.8938260674476624,0.7974510192871094,0.8021385073661804,0.796892523765564,0.8835110068321228,0.8050801753997803,0.8919267058372498]);
  net_h1_w[734] = new Float32Array([0.8395774960517883,0.844913125038147,0.8365265727043152,0.8435676097869873,0.8378063440322876,0.8299447298049927,0.8326640725135803,0.8293261528015137]);
  net_h1_w[735] = new Float32Array([0.6605650782585144,0.6559005379676819,0.7865926027297974,0.7849987745285034,0.7782705426216125,0.6617082953453064,0.7846254110336304,0.6602612137794495]);
  net_h1_w[736] = new Float32Array([0.7375284433364868,0.7344462871551514,0.8928576707839966,0.8842989206314087,0.8726020455360413,0.7403865456581116,0.8693840503692627,0.7295442819595337]);
  net_h1_w[737] = new Float32Array([0.9479670524597168,0.9437516927719116,0.8135975003242493,0.8121739625930786,0.8062775731086731,0.9569181203842163,0.8122907876968384,0.9406863451004028]);
  net_h1_w[738] = new Float32Array([0.9399383068084717,0.9242866635322571,0.7325621247291565,0.7290810346603394,0.7413648366928101,0.9393310546875,0.7241973876953125,0.9205484986305237]);
  net_h1_w[739] = new Float32Array([0.9848200082778931,0.987646222114563,0.6607650518417358,0.6571000814437866,0.6628243923187256,0.9987804889678955,0.6486698985099792,0.9973053932189941]);
  net_h1_w[740] = new Float32Array([0.9694076180458069,0.9658412337303162,0.7630928158760071,0.759316086769104,0.7623792290687561,0.975651741027832,0.7581833600997925,0.9832282066345215]);
  net_h1_w[741] = new Float32Array([1.0254865884780884,1.0269502401351929,0.7035270929336548,0.6986775994300842,0.6992020606994629,1.0507149696350098,0.7008886337280273,1.017410159111023]);
  net_h1_w[742] = new Float32Array([0.9060261845588684,0.8782283663749695,0.8207226991653442,0.8265708088874817,0.8166382908821106,0.8828052878379822,0.8199917078018188,0.8845080733299255]);
  net_h1_w[743] = new Float32Array([0.6828799843788147,0.697223424911499,0.7994635701179504,0.7980509996414185,0.794667661190033,0.6982835531234741,0.7999197840690613,0.6712761521339417]);
  net_h1_w[744] = new Float32Array([0.7950925230979919,0.7744612097740173,0.8567195534706116,0.8452831506729126,0.8481984734535217,0.7901402115821838,0.8466153740882874,0.7925904393196106]);
  net_h1_w[745] = new Float32Array([1.0225107669830322,1.0132405757904053,0.7693080306053162,0.7655279636383057,0.7688856720924377,1.0286903381347656,0.7569465041160583,1.004347801208496]);
  net_h1_w[746] = new Float32Array([1.0111051797866821,1.0070922374725342,0.7620528340339661,0.7669745683670044,0.7578035593032837,1.0194576978683472,0.7464396357536316,1.0105020999908447]);
  net_h1_w[747] = new Float32Array([1.1827170848846436,1.1776182651519775,0.7002354264259338,0.7072352170944214,0.7047485709190369,1.1846332550048828,0.7014701962471008,1.1734559535980225]);
  net_h1_w[748] = new Float32Array([0.9850801825523376,0.9907468557357788,0.7448552250862122,0.7645098567008972,0.7611085176467896,0.984707236289978,0.7522376179695129,0.9885118007659912]);
  net_h1_w[749] = new Float32Array([1.0844104290008545,1.0885732173919678,0.6864886283874512,0.6957236528396606,0.6857589483261108,1.0977752208709717,0.6833826303482056,1.0883508920669556]);
  net_h1_w[750] = new Float32Array([0.8558064699172974,0.8383026123046875,0.8681166172027588,0.86549973487854,0.8612539172172546,0.8594651818275452,0.8577497005462646,0.8403295278549194]);
  net_h1_w[751] = new Float32Array([0.6853854656219482,0.6801953911781311,0.8376951217651367,0.837334930896759,0.8309479355812073,0.6727045178413391,0.8332907557487488,0.6817576289176941]);
  net_h1_w[752] = new Float32Array([0.5994890928268433,0.600802481174469,0.9705047011375427,0.964771032333374,0.968585193157196,0.6064267158508301,0.945715069770813,0.5987743735313416]);
  net_h1_w[753] = new Float32Array([0.8426980972290039,0.8498972058296204,0.9096310138702393,0.9177226424217224,0.9014294147491455,0.8465043902397156,0.8988283276557922,0.8412454724311829]);
  net_h1_w[754] = new Float32Array([0.9469361901283264,0.9432530999183655,0.864470362663269,0.892866849899292,0.8885968923568726,0.9413309693336487,0.8547723889350891,0.9350622892379761]);
  net_h1_w[755] = new Float32Array([0.9067054986953735,0.8973006010055542,0.9448204040527344,0.9388591647148132,0.9285597205162048,0.92401522397995,0.9247152805328369,0.8977572917938232]);
  net_h1_w[756] = new Float32Array([0.8923498392105103,0.8863222002983093,0.9114142656326294,0.9194376468658447,0.9205798506736755,0.8898486495018005,0.9124227166175842,0.8923993110656738]);
  net_h1_w[757] = new Float32Array([0.7827993631362915,0.7855071425437927,1.0455859899520874,1.0524532794952393,1.05045485496521,0.798636257648468,1.0477794408798218,0.7818849086761475]);
  net_h1_w[758] = new Float32Array([0.720022976398468,0.7115457057952881,1.1036348342895508,1.0996780395507812,1.0871814489364624,0.7290846705436707,1.0963401794433594,0.6986564993858337]);
  net_h1_w[759] = new Float32Array([0.48563551902770996,0.489172101020813,1.0861454010009766,1.0964934825897217,1.0796445608139038,0.49031955003738403,1.0818562507629395,0.4876439571380615]);
  net_h1_w[760] = new Float32Array([0.18248768150806427,0.18030525743961334,1.0353590250015259,1.056268572807312,1.0492033958435059,0.20354768633842468,1.049852728843689,0.19483065605163574]);
  net_h1_w[761] = new Float32Array([0.6791894435882568,0.6834988594055176,0.8361413478851318,0.8466400504112244,0.823011577129364,0.7011853456497192,0.8318238854408264,0.6879188418388367]);
  net_h1_w[762] = new Float32Array([0.7025370001792908,0.6842238306999207,1.008850336074829,0.9879404306411743,1.007843017578125,0.7132668495178223,0.9798673391342163,0.6893730163574219]);
  net_h1_w[763] = new Float32Array([0.7762928009033203,0.7742511630058289,1.032272219657898,1.0073901414871216,1.0359718799591064,0.7887622714042664,1.0038607120513916,0.769862949848175]);
  net_h1_w[764] = new Float32Array([0.43148207664489746,0.4261253774166107,1.2279024124145508,1.245320200920105,1.223201870918274,0.43649938702583313,1.2260044813156128,0.42489463090896606]);
  net_h1_w[765] = new Float32Array([0.5479855537414551,0.5398548245429993,1.1900055408477783,1.2080947160720825,1.2048742771148682,0.5442677140235901,1.2034268379211426,0.546154260635376]);
  net_h1_w[766] = new Float32Array([0.4685981571674347,0.4653626084327698,1.228872299194336,1.2213178873062134,1.2236638069152832,0.489165723323822,1.218631625175476,0.4573930501937866]);
  net_h1_w[767] = new Float32Array([-0.009750406257808208,-0.010667460039258003,1.4538792371749878,1.4583688974380493,1.4527249336242676,0.001384759321808815,1.4628026485443115,-0.025209397077560425]);
  const net_h1_b = new Float32Array([3.7594995498657227,3.7539403438568115,4.019850254058838,4.034614562988281,4.024468421936035,3.7259631156921387,4.045433044433594,3.735010862350464]);
  const net_o_w = new Float32Array([-8.498835563659668,-8.548130989074707,8.840615272521973,8.786456108093262,8.785168647766113,-8.56656551361084,8.73967170715332,-8.576812744140625]);
  const net_o_b = -19.156692613135895;
  
  //}}}
  
  //}}}

  const cwtch = new(cwtchStruct);

  cwtch.initOnce();
  cwtch.uciArgv();

  //{{{  connect to stdio
  
  process.stdin.setEncoding('utf8');
  
  process.stdin.on('readable', function() {
    let chunk = process.stdin.read();
    process.stdin.resume();
    if (chunk !== null) {
      cwtch.uciExec(chunk);
    }
  });
  
  process.stdin.on('end', function() {
    process.exit();
  });
  
  //}}}


//}}}
//
// needs files in same format as trainer.js.
//
// filter positions if:-
//
//   bm is a capture
//   bm is a promotion
//   stm is in check
//
// usage: node filter
//

const fs = require('fs');
const readline = require('readline');

const epdFile = 'data/datagen/x.epd';
const outFile = 'data/datagen/xf.epd';

let o = '';
let n = 0;

fs.writeFileSync(outFile, '');

const rl = readline.createInterface({
  input: fs.createReadStream(epdFile),
  output: process.stdout,
  crlfDelay: Infinity,
  terminal: false
});

rl.on('line', function (line) {

  const parts = line.split(' ');

  cwtch.position(parts[0],parts[1],parts[2],parts[3]);

  cwtch.quiet = 1;
  cwtch.uciExec('go depth 5');

  if (moveIsNoisy(cwtch.bestMove)) {
    //console.log('filter noisy');
    return;
  }

  if (cwtch.bestMove & MOVE_PROMOTE_MASK) {
    //console.log('filter promote',formatMove(cwtch.bestMove));
    return;
  }

  const cx   = colourIndex(cwtch.turn);
  const list = cwtch.cxList[cx];
  if (cwtch.isKingAttacked(list[LKING], colourToggle(cwtch.turn))) {
    //console.log('filter in check');
    return;
  }

  o = o + line + '\n';
  n++;

  if ((n % 100) == 0)
    process.stdout.write(n+'\r');

  if (n > 10000) {
    fs.appendFileSync(outFile,o);
    o = '';
    n = 0;
  }
});

rl.on('close', function () {
  if (n)
    fs.appendFileSync(outFile,o);
  process.exit();
});

